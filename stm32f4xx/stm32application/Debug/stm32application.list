
stm32application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091ec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b8  0800937c  0800937c  0000a37c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b34  08009b34  0000b160  2**0
                  CONTENTS
  4 .ARM          00000008  08009b34  08009b34  0000ab34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b3c  08009b3c  0000b160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b3c  08009b3c  0000ab3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b40  08009b40  0000ab40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000160  20000000  08009b44  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b160  2**0
                  CONTENTS
 10 .bss          00001f80  20000160  20000160  0000b160  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  200020e0  200020e0  0000b160  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b160  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013735  00000000  00000000  0000b190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003907  00000000  00000000  0001e8c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f58  00000000  00000000  000221d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b88  00000000  00000000  00023128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023eb5  00000000  00000000  00023cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016e72  00000000  00000000  00047b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c72bd  00000000  00000000  0005e9d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00125c94  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041dc  00000000  00000000  00125cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  00129eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000160 	.word	0x20000160
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009364 	.word	0x08009364

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000164 	.word	0x20000164
 80001cc:	08009364 	.word	0x08009364

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <sizeofuser>:
userDetails user[maxnumberofusers];

int usernumber = 0;

int sizeofuser (userDetails *user)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	int size=0;
 8000598:	2300      	movs	r3, #0
 800059a:	60fb      	str	r3, [r7, #12]
	while (user[size].firstname[0] != '\0') size++;
 800059c:	e002      	b.n	80005a4 <sizeofuser+0x14>
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	3301      	adds	r3, #1
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fa      	ldr	r2, [r7, #12]
 80005a6:	4613      	mov	r3, r2
 80005a8:	015b      	lsls	r3, r3, #5
 80005aa:	4413      	add	r3, r2
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	4413      	add	r3, r2
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d1f3      	bne.n	800059e <sizeofuser+0xe>
	return size+1;
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	3301      	adds	r3, #1
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <ESP_Init>:


/*****************************************************************************************************************************************/

void ESP_Init (char *SSID, char *PASSWD, char *STAIP)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b098      	sub	sp, #96	@ 0x60
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
	char data[80];

	Ringbuf_init();
 80005d4:	f000 fa86 	bl	8000ae4 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n");
 80005d8:	4832      	ldr	r0, [pc, #200]	@ (80006a4 <ESP_Init+0xdc>)
 80005da:	f000 fb91 	bl	8000d00 <Uart_sendstring>
	HAL_Delay(2000);
 80005de:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80005e2:	f001 f8a3 	bl	800172c <HAL_Delay>

	/********* AT **********/
	Uart_flush();
 80005e6:	f000 fc41 	bl	8000e6c <Uart_flush>
	Uart_sendstring("AT\r\n");
 80005ea:	482f      	ldr	r0, [pc, #188]	@ (80006a8 <ESP_Init+0xe0>)
 80005ec:	f000 fb88 	bl	8000d00 <Uart_sendstring>
	while(!(Wait_for("OK\r\n")));
 80005f0:	bf00      	nop
 80005f2:	482e      	ldr	r0, [pc, #184]	@ (80006ac <ESP_Init+0xe4>)
 80005f4:	f000 fd06 	bl	8001004 <Wait_for>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d0f9      	beq.n	80005f2 <ESP_Init+0x2a>


	/********* AT+CWMODE=1 **********/
	Uart_flush();
 80005fe:	f000 fc35 	bl	8000e6c <Uart_flush>
	Uart_sendstring("AT+CWMODE=1\r\n");
 8000602:	482b      	ldr	r0, [pc, #172]	@ (80006b0 <ESP_Init+0xe8>)
 8000604:	f000 fb7c 	bl	8000d00 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000608:	bf00      	nop
 800060a:	4828      	ldr	r0, [pc, #160]	@ (80006ac <ESP_Init+0xe4>)
 800060c:	f000 fcfa 	bl	8001004 <Wait_for>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d0f9      	beq.n	800060a <ESP_Init+0x42>

	/* Set Static IP Address */
	/********* AT+CWSTAIP=IPADDRESS **********/
	Uart_flush();
 8000616:	f000 fc29 	bl	8000e6c <Uart_flush>
	sprintf (data, "AT+CIPSTA=\"%s\"\r\n", STAIP);
 800061a:	f107 0310 	add.w	r3, r7, #16
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	4924      	ldr	r1, [pc, #144]	@ (80006b4 <ESP_Init+0xec>)
 8000622:	4618      	mov	r0, r3
 8000624:	f008 f9ee 	bl	8008a04 <siprintf>
	Uart_sendstring(data);
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fb67 	bl	8000d00 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000632:	bf00      	nop
 8000634:	481d      	ldr	r0, [pc, #116]	@ (80006ac <ESP_Init+0xe4>)
 8000636:	f000 fce5 	bl	8001004 <Wait_for>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d0f9      	beq.n	8000634 <ESP_Init+0x6c>

	/********* AT+CWJAP="SSID","PASSWD" **********/
	Uart_flush();
 8000640:	f000 fc14 	bl	8000e6c <Uart_flush>
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8000644:	f107 0010 	add.w	r0, r7, #16
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	491a      	ldr	r1, [pc, #104]	@ (80006b8 <ESP_Init+0xf0>)
 800064e:	f008 f9d9 	bl	8008a04 <siprintf>
	Uart_sendstring(data);
 8000652:	f107 0310 	add.w	r3, r7, #16
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fb52 	bl	8000d00 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 800065c:	bf00      	nop
 800065e:	4813      	ldr	r0, [pc, #76]	@ (80006ac <ESP_Init+0xe4>)
 8000660:	f000 fcd0 	bl	8001004 <Wait_for>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d0f9      	beq.n	800065e <ESP_Init+0x96>

	/********* AT+CIPMUX **********/
	Uart_flush();
 800066a:	f000 fbff 	bl	8000e6c <Uart_flush>
	Uart_sendstring("AT+CIPMUX=1\r\n");
 800066e:	4813      	ldr	r0, [pc, #76]	@ (80006bc <ESP_Init+0xf4>)
 8000670:	f000 fb46 	bl	8000d00 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000674:	bf00      	nop
 8000676:	480d      	ldr	r0, [pc, #52]	@ (80006ac <ESP_Init+0xe4>)
 8000678:	f000 fcc4 	bl	8001004 <Wait_for>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d0f9      	beq.n	8000676 <ESP_Init+0xae>

	/********* AT+CIPSERVER **********/
	Uart_flush();
 8000682:	f000 fbf3 	bl	8000e6c <Uart_flush>
	Uart_sendstring("AT+CIPSERVER=1,80\r\n");
 8000686:	480e      	ldr	r0, [pc, #56]	@ (80006c0 <ESP_Init+0xf8>)
 8000688:	f000 fb3a 	bl	8000d00 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 800068c:	bf00      	nop
 800068e:	4807      	ldr	r0, [pc, #28]	@ (80006ac <ESP_Init+0xe4>)
 8000690:	f000 fcb8 	bl	8001004 <Wait_for>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d0f9      	beq.n	800068e <ESP_Init+0xc6>

}
 800069a:	bf00      	nop
 800069c:	bf00      	nop
 800069e:	3760      	adds	r7, #96	@ 0x60
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	08009928 	.word	0x08009928
 80006a8:	08009934 	.word	0x08009934
 80006ac:	0800993c 	.word	0x0800993c
 80006b0:	08009944 	.word	0x08009944
 80006b4:	08009954 	.word	0x08009954
 80006b8:	08009968 	.word	0x08009968
 80006bc:	08009980 	.word	0x08009980
 80006c0:	08009990 	.word	0x08009990

080006c4 <Server_Send>:




int Server_Send (char *str, int Link_ID)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b098      	sub	sp, #96	@ 0x60
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	6039      	str	r1, [r7, #0]
	int len = strlen (str);
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f7ff fd88 	bl	80001e4 <strlen>
 80006d4:	4603      	mov	r3, r0
 80006d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
	char data[80];
	Uart_flush();
 80006d8:	f000 fbc8 	bl	8000e6c <Uart_flush>
	sprintf (data, "AT+CIPSEND=%d,%d\r\n", Link_ID, len);
 80006dc:	f107 000c 	add.w	r0, r7, #12
 80006e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80006e2:	683a      	ldr	r2, [r7, #0]
 80006e4:	4919      	ldr	r1, [pc, #100]	@ (800074c <Server_Send+0x88>)
 80006e6:	f008 f98d 	bl	8008a04 <siprintf>
	Uart_sendstring(data);
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 fb06 	bl	8000d00 <Uart_sendstring>
	while (!(Wait_for(">")));
 80006f4:	bf00      	nop
 80006f6:	4816      	ldr	r0, [pc, #88]	@ (8000750 <Server_Send+0x8c>)
 80006f8:	f000 fc84 	bl	8001004 <Wait_for>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d0f9      	beq.n	80006f6 <Server_Send+0x32>
	Uart_sendstring (str);
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f000 fafc 	bl	8000d00 <Uart_sendstring>
	while (!(Wait_for("SEND OK")));
 8000708:	bf00      	nop
 800070a:	4812      	ldr	r0, [pc, #72]	@ (8000754 <Server_Send+0x90>)
 800070c:	f000 fc7a 	bl	8001004 <Wait_for>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d0f9      	beq.n	800070a <Server_Send+0x46>
	Uart_flush();
 8000716:	f000 fba9 	bl	8000e6c <Uart_flush>
	sprintf (data, "AT+CIPCLOSE=%d\r\n",Link_ID);
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	683a      	ldr	r2, [r7, #0]
 8000720:	490d      	ldr	r1, [pc, #52]	@ (8000758 <Server_Send+0x94>)
 8000722:	4618      	mov	r0, r3
 8000724:	f008 f96e 	bl	8008a04 <siprintf>
	Uart_sendstring(data);
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	4618      	mov	r0, r3
 800072e:	f000 fae7 	bl	8000d00 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000732:	bf00      	nop
 8000734:	4809      	ldr	r0, [pc, #36]	@ (800075c <Server_Send+0x98>)
 8000736:	f000 fc65 	bl	8001004 <Wait_for>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d0f9      	beq.n	8000734 <Server_Send+0x70>
	return 1;
 8000740:	2301      	movs	r3, #1
}
 8000742:	4618      	mov	r0, r3
 8000744:	3760      	adds	r7, #96	@ 0x60
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	080099a4 	.word	0x080099a4
 8000750:	080099b8 	.word	0x080099b8
 8000754:	080099bc 	.word	0x080099bc
 8000758:	080099c4 	.word	0x080099c4
 800075c:	0800993c 	.word	0x0800993c

08000760 <Server_Handle>:

void Server_Handle (char *str, int Link_ID)
{
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	f5ad 5dc0 	sub.w	sp, sp, #6144	@ 0x1800
 8000766:	b087      	sub	sp, #28
 8000768:	af02      	add	r7, sp, #8
 800076a:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800076e:	f6a3 030c 	subw	r3, r3, #2060	@ 0x80c
 8000772:	6018      	str	r0, [r3, #0]
 8000774:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8000778:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 800077c:	6019      	str	r1, [r3, #0]
	char datatosend[4096] = {0};
 800077e:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8000782:	2200      	movs	r2, #0
 8000784:	f843 2c08 	str.w	r2, [r3, #-8]
 8000788:	3b04      	subs	r3, #4
 800078a:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f008 f957 	bl	8008a44 <memset>
	if (!(strcmp (str, "/page1")))
 8000796:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800079a:	f6a3 030c 	subw	r3, r3, #2060	@ 0x80c
 800079e:	496c      	ldr	r1, [pc, #432]	@ (8000950 <Server_Handle+0x1f0>)
 80007a0:	6818      	ldr	r0, [r3, #0]
 80007a2:	f7ff fd15 	bl	80001d0 <strcmp>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d114      	bne.n	80007d6 <Server_Handle+0x76>
	{
		sprintf(datatosend, page1);
 80007ac:	4b69      	ldr	r3, [pc, #420]	@ (8000954 <Server_Handle+0x1f4>)
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80007b4:	3b08      	subs	r3, #8
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f008 f923 	bl	8008a04 <siprintf>
		Server_Send(datatosend, Link_ID);
 80007be:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80007c2:	f5a3 6201 	sub.w	r2, r3, #2064	@ 0x810
 80007c6:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80007ca:	3b08      	subs	r3, #8
 80007cc:	6811      	ldr	r1, [r2, #0]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ff78 	bl	80006c4 <Server_Send>
	{
		sprintf (datatosend, home);
		Server_Send(datatosend, Link_ID);
	}

}
 80007d4:	e0b5      	b.n	8000942 <Server_Handle+0x1e2>
	else if (!(strcmp (str, "/page2")))
 80007d6:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80007da:	f6a3 030c 	subw	r3, r3, #2060	@ 0x80c
 80007de:	495e      	ldr	r1, [pc, #376]	@ (8000958 <Server_Handle+0x1f8>)
 80007e0:	6818      	ldr	r0, [r3, #0]
 80007e2:	f7ff fcf5 	bl	80001d0 <strcmp>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	f040 8096 	bne.w	800091a <Server_Handle+0x1ba>
		sprintf(datatosend, page2_Top);
 80007ee:	4b5b      	ldr	r3, [pc, #364]	@ (800095c <Server_Handle+0x1fc>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80007f6:	3b08      	subs	r3, #8
 80007f8:	4611      	mov	r1, r2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f008 f902 	bl	8008a04 <siprintf>
		strcat (datatosend, table);
 8000800:	4b57      	ldr	r3, [pc, #348]	@ (8000960 <Server_Handle+0x200>)
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8000808:	3b08      	subs	r3, #8
 800080a:	4611      	mov	r1, r2
 800080c:	4618      	mov	r0, r3
 800080e:	f008 f921 	bl	8008a54 <strcat>
		int bufsize = (sizeofuser (user));
 8000812:	4854      	ldr	r0, [pc, #336]	@ (8000964 <Server_Handle+0x204>)
 8000814:	f7ff febc 	bl	8000590 <sizeofuser>
 8000818:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 800081c:	f103 0308 	add.w	r3, r3, #8
 8000820:	6018      	str	r0, [r3, #0]
		for (int i=0; i<bufsize; i++)
 8000822:	2300      	movs	r3, #0
 8000824:	f507 52c0 	add.w	r2, r7, #6144	@ 0x1800
 8000828:	f102 020c 	add.w	r2, r2, #12
 800082c:	6013      	str	r3, [r2, #0]
 800082e:	e03f      	b.n	80008b0 <Server_Handle+0x150>
			sprintf (localbuf, "<tr><td>%s %s</td>	<td>%s</td></tr>",user[i].firstname,user[i].lastname,user[i].age);
 8000830:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 8000834:	f103 030c 	add.w	r3, r3, #12
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	4613      	mov	r3, r2
 800083c:	015b      	lsls	r3, r3, #5
 800083e:	4413      	add	r3, r2
 8000840:	4a48      	ldr	r2, [pc, #288]	@ (8000964 <Server_Handle+0x204>)
 8000842:	1899      	adds	r1, r3, r2
 8000844:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 8000848:	f103 030c 	add.w	r3, r3, #12
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	4613      	mov	r3, r2
 8000850:	015b      	lsls	r3, r3, #5
 8000852:	4413      	add	r3, r2
 8000854:	3308      	adds	r3, #8
 8000856:	4a43      	ldr	r2, [pc, #268]	@ (8000964 <Server_Handle+0x204>)
 8000858:	4413      	add	r3, r2
 800085a:	1ddc      	adds	r4, r3, #7
 800085c:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 8000860:	f103 030c 	add.w	r3, r3, #12
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	4613      	mov	r3, r2
 8000868:	015b      	lsls	r3, r3, #5
 800086a:	4413      	add	r3, r2
 800086c:	3318      	adds	r3, #24
 800086e:	4a3d      	ldr	r2, [pc, #244]	@ (8000964 <Server_Handle+0x204>)
 8000870:	4413      	add	r3, r2
 8000872:	3306      	adds	r3, #6
 8000874:	f107 0010 	add.w	r0, r7, #16
 8000878:	3808      	subs	r0, #8
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	4623      	mov	r3, r4
 800087e:	460a      	mov	r2, r1
 8000880:	4939      	ldr	r1, [pc, #228]	@ (8000968 <Server_Handle+0x208>)
 8000882:	f008 f8bf 	bl	8008a04 <siprintf>
			strcat (datatosend, localbuf);
 8000886:	f107 0210 	add.w	r2, r7, #16
 800088a:	3a08      	subs	r2, #8
 800088c:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8000890:	3b08      	subs	r3, #8
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f008 f8dd 	bl	8008a54 <strcat>
		for (int i=0; i<bufsize; i++)
 800089a:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 800089e:	f103 030c 	add.w	r3, r3, #12
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	3301      	adds	r3, #1
 80008a6:	f507 52c0 	add.w	r2, r7, #6144	@ 0x1800
 80008aa:	f102 020c 	add.w	r2, r2, #12
 80008ae:	6013      	str	r3, [r2, #0]
 80008b0:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 80008b4:	f103 030c 	add.w	r3, r3, #12
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 80008be:	f103 0308 	add.w	r3, r3, #8
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	dbb3      	blt.n	8000830 <Server_Handle+0xd0>
		strcat (datatosend, "</table>");
 80008c8:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80008cc:	3b08      	subs	r3, #8
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fc88 	bl	80001e4 <strlen>
 80008d4:	4603      	mov	r3, r0
 80008d6:	461a      	mov	r2, r3
 80008d8:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80008dc:	3b08      	subs	r3, #8
 80008de:	4413      	add	r3, r2
 80008e0:	4922      	ldr	r1, [pc, #136]	@ (800096c <Server_Handle+0x20c>)
 80008e2:	461a      	mov	r2, r3
 80008e4:	460b      	mov	r3, r1
 80008e6:	cb03      	ldmia	r3!, {r0, r1}
 80008e8:	6010      	str	r0, [r2, #0]
 80008ea:	6051      	str	r1, [r2, #4]
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	7213      	strb	r3, [r2, #8]
		strcat(datatosend, page2_end);
 80008f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000970 <Server_Handle+0x210>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80008f8:	3b08      	subs	r3, #8
 80008fa:	4611      	mov	r1, r2
 80008fc:	4618      	mov	r0, r3
 80008fe:	f008 f8a9 	bl	8008a54 <strcat>
		Server_Send(datatosend, Link_ID);
 8000902:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8000906:	f5a3 6201 	sub.w	r2, r3, #2064	@ 0x810
 800090a:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800090e:	3b08      	subs	r3, #8
 8000910:	6811      	ldr	r1, [r2, #0]
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fed6 	bl	80006c4 <Server_Send>
}
 8000918:	e013      	b.n	8000942 <Server_Handle+0x1e2>
		sprintf (datatosend, home);
 800091a:	4b16      	ldr	r3, [pc, #88]	@ (8000974 <Server_Handle+0x214>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8000922:	3b08      	subs	r3, #8
 8000924:	4611      	mov	r1, r2
 8000926:	4618      	mov	r0, r3
 8000928:	f008 f86c 	bl	8008a04 <siprintf>
		Server_Send(datatosend, Link_ID);
 800092c:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8000930:	f5a3 6201 	sub.w	r2, r3, #2064	@ 0x810
 8000934:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8000938:	3b08      	subs	r3, #8
 800093a:	6811      	ldr	r1, [r2, #0]
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fec1 	bl	80006c4 <Server_Send>
}
 8000942:	bf00      	nop
 8000944:	f507 57c0 	add.w	r7, r7, #6144	@ 0x1800
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	bd90      	pop	{r4, r7, pc}
 800094e:	bf00      	nop
 8000950:	080099d8 	.word	0x080099d8
 8000954:	20000004 	.word	0x20000004
 8000958:	080099e0 	.word	0x080099e0
 800095c:	20000008 	.word	0x20000008
 8000960:	20000010 	.word	0x20000010
 8000964:	2000017c 	.word	0x2000017c
 8000968:	080099e8 	.word	0x080099e8
 800096c:	08009a0c 	.word	0x08009a0c
 8000970:	2000000c 	.word	0x2000000c
 8000974:	20000000 	.word	0x20000000

08000978 <Server_Start>:

void Server_Start (void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b0a2      	sub	sp, #136	@ 0x88
 800097c:	af00      	add	r7, sp, #0
	char buftostoreheader[128] = {0};
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	227c      	movs	r2, #124	@ 0x7c
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f008 f85a 	bl	8008a44 <memset>
	char Link_ID;
	while (!(Get_after("+IPD,", 1, &Link_ID)));
 8000990:	bf00      	nop
 8000992:	1dfb      	adds	r3, r7, #7
 8000994:	461a      	mov	r2, r3
 8000996:	2101      	movs	r1, #1
 8000998:	4844      	ldr	r0, [pc, #272]	@ (8000aac <Server_Start+0x134>)
 800099a:	f000 fb07 	bl	8000fac <Get_after>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d0f6      	beq.n	8000992 <Server_Start+0x1a>

	Link_ID -= 48;
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	3b30      	subs	r3, #48	@ 0x30
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	71fb      	strb	r3, [r7, #7]
	while (!(Copy_upto(" HTTP/1.1", buftostoreheader)));
 80009ac:	bf00      	nop
 80009ae:	f107 0308 	add.w	r3, r7, #8
 80009b2:	4619      	mov	r1, r3
 80009b4:	483e      	ldr	r0, [pc, #248]	@ (8000ab0 <Server_Start+0x138>)
 80009b6:	f000 fa85 	bl	8000ec4 <Copy_upto>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d0f6      	beq.n	80009ae <Server_Start+0x36>
	if (Look_for("/page1", buftostoreheader) == 1)
 80009c0:	f107 0308 	add.w	r3, r7, #8
 80009c4:	4619      	mov	r1, r3
 80009c6:	483b      	ldr	r0, [pc, #236]	@ (8000ab4 <Server_Start+0x13c>)
 80009c8:	f000 f8d3 	bl	8000b72 <Look_for>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d13c      	bne.n	8000a4c <Server_Start+0xd4>
	{
		GetDataFromBuffer("fname=", "&", buftostoreheader, user[usernumber].firstname);
 80009d2:	4b39      	ldr	r3, [pc, #228]	@ (8000ab8 <Server_Start+0x140>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	4613      	mov	r3, r2
 80009d8:	015b      	lsls	r3, r3, #5
 80009da:	4413      	add	r3, r2
 80009dc:	4a37      	ldr	r2, [pc, #220]	@ (8000abc <Server_Start+0x144>)
 80009de:	4413      	add	r3, r2
 80009e0:	f107 0208 	add.w	r2, r7, #8
 80009e4:	4936      	ldr	r1, [pc, #216]	@ (8000ac0 <Server_Start+0x148>)
 80009e6:	4837      	ldr	r0, [pc, #220]	@ (8000ac4 <Server_Start+0x14c>)
 80009e8:	f000 f99f 	bl	8000d2a <GetDataFromBuffer>
		GetDataFromBuffer("lname=", "&", buftostoreheader, user[usernumber].lastname);
 80009ec:	4b32      	ldr	r3, [pc, #200]	@ (8000ab8 <Server_Start+0x140>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4613      	mov	r3, r2
 80009f2:	015b      	lsls	r3, r3, #5
 80009f4:	4413      	add	r3, r2
 80009f6:	3308      	adds	r3, #8
 80009f8:	4a30      	ldr	r2, [pc, #192]	@ (8000abc <Server_Start+0x144>)
 80009fa:	4413      	add	r3, r2
 80009fc:	3307      	adds	r3, #7
 80009fe:	f107 0208 	add.w	r2, r7, #8
 8000a02:	492f      	ldr	r1, [pc, #188]	@ (8000ac0 <Server_Start+0x148>)
 8000a04:	4830      	ldr	r0, [pc, #192]	@ (8000ac8 <Server_Start+0x150>)
 8000a06:	f000 f990 	bl	8000d2a <GetDataFromBuffer>
		GetDataFromBuffer("age=", " HTTP", buftostoreheader, user[usernumber].age);
 8000a0a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ab8 <Server_Start+0x140>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	015b      	lsls	r3, r3, #5
 8000a12:	4413      	add	r3, r2
 8000a14:	3318      	adds	r3, #24
 8000a16:	4a29      	ldr	r2, [pc, #164]	@ (8000abc <Server_Start+0x144>)
 8000a18:	4413      	add	r3, r2
 8000a1a:	3306      	adds	r3, #6
 8000a1c:	f107 0208 	add.w	r2, r7, #8
 8000a20:	492a      	ldr	r1, [pc, #168]	@ (8000acc <Server_Start+0x154>)
 8000a22:	482b      	ldr	r0, [pc, #172]	@ (8000ad0 <Server_Start+0x158>)
 8000a24:	f000 f981 	bl	8000d2a <GetDataFromBuffer>
		usernumber++;
 8000a28:	4b23      	ldr	r3, [pc, #140]	@ (8000ab8 <Server_Start+0x140>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	4a22      	ldr	r2, [pc, #136]	@ (8000ab8 <Server_Start+0x140>)
 8000a30:	6013      	str	r3, [r2, #0]
		if (usernumber >9) usernumber = 0;
 8000a32:	4b21      	ldr	r3, [pc, #132]	@ (8000ab8 <Server_Start+0x140>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2b09      	cmp	r3, #9
 8000a38:	dd02      	ble.n	8000a40 <Server_Start+0xc8>
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab8 <Server_Start+0x140>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
		Server_Handle("/page1",Link_ID);
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	4619      	mov	r1, r3
 8000a44:	481b      	ldr	r0, [pc, #108]	@ (8000ab4 <Server_Start+0x13c>)
 8000a46:	f7ff fe8b 	bl	8000760 <Server_Handle>

	else
	{
		Server_Handle("/ ", Link_ID);
	}
}
 8000a4a:	e02b      	b.n	8000aa4 <Server_Start+0x12c>
	else if (Look_for("/page2", buftostoreheader) == 1)
 8000a4c:	f107 0308 	add.w	r3, r7, #8
 8000a50:	4619      	mov	r1, r3
 8000a52:	4820      	ldr	r0, [pc, #128]	@ (8000ad4 <Server_Start+0x15c>)
 8000a54:	f000 f88d 	bl	8000b72 <Look_for>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d105      	bne.n	8000a6a <Server_Start+0xf2>
		Server_Handle("/page2",Link_ID);
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	4619      	mov	r1, r3
 8000a62:	481c      	ldr	r0, [pc, #112]	@ (8000ad4 <Server_Start+0x15c>)
 8000a64:	f7ff fe7c 	bl	8000760 <Server_Handle>
}
 8000a68:	e01c      	b.n	8000aa4 <Server_Start+0x12c>
	else if (Look_for("/home", buftostoreheader) == 1)
 8000a6a:	f107 0308 	add.w	r3, r7, #8
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4819      	ldr	r0, [pc, #100]	@ (8000ad8 <Server_Start+0x160>)
 8000a72:	f000 f87e 	bl	8000b72 <Look_for>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d105      	bne.n	8000a88 <Server_Start+0x110>
		Server_Handle("/home",Link_ID);
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4815      	ldr	r0, [pc, #84]	@ (8000ad8 <Server_Start+0x160>)
 8000a82:	f7ff fe6d 	bl	8000760 <Server_Handle>
}
 8000a86:	e00d      	b.n	8000aa4 <Server_Start+0x12c>
	else if (Look_for("/favicon.ico", buftostoreheader) == 1);
 8000a88:	f107 0308 	add.w	r3, r7, #8
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4813      	ldr	r0, [pc, #76]	@ (8000adc <Server_Start+0x164>)
 8000a90:	f000 f86f 	bl	8000b72 <Look_for>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d004      	beq.n	8000aa4 <Server_Start+0x12c>
		Server_Handle("/ ", Link_ID);
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4810      	ldr	r0, [pc, #64]	@ (8000ae0 <Server_Start+0x168>)
 8000aa0:	f7ff fe5e 	bl	8000760 <Server_Handle>
}
 8000aa4:	bf00      	nop
 8000aa6:	3788      	adds	r7, #136	@ 0x88
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	08009a18 	.word	0x08009a18
 8000ab0:	08009a20 	.word	0x08009a20
 8000ab4:	080099d8 	.word	0x080099d8
 8000ab8:	200002c8 	.word	0x200002c8
 8000abc:	2000017c 	.word	0x2000017c
 8000ac0:	08009a2c 	.word	0x08009a2c
 8000ac4:	08009a30 	.word	0x08009a30
 8000ac8:	08009a38 	.word	0x08009a38
 8000acc:	08009a40 	.word	0x08009a40
 8000ad0:	08009a48 	.word	0x08009a48
 8000ad4:	080099e0 	.word	0x080099e0
 8000ad8:	08009a50 	.word	0x08009a50
 8000adc:	08009a58 	.word	0x08009a58
 8000ae0:	08009a68 	.word	0x08009a68

08000ae4 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8000ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b20 <Ringbuf_init+0x3c>)
 8000aea:	4a0e      	ldr	r2, [pc, #56]	@ (8000b24 <Ringbuf_init+0x40>)
 8000aec:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <Ringbuf_init+0x44>)
 8000af0:	4a0e      	ldr	r2, [pc, #56]	@ (8000b2c <Ringbuf_init+0x48>)
 8000af2:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8000af4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <Ringbuf_init+0x4c>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	695a      	ldr	r2, [r3, #20]
 8000afa:	4b0d      	ldr	r3, [pc, #52]	@ (8000b30 <Ringbuf_init+0x4c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f042 0201 	orr.w	r2, r2, #1
 8000b02:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8000b04:	4b0a      	ldr	r3, [pc, #40]	@ (8000b30 <Ringbuf_init+0x4c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	68da      	ldr	r2, [r3, #12]
 8000b0a:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <Ringbuf_init+0x4c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f042 0220 	orr.w	r2, r2, #32
 8000b12:	60da      	str	r2, [r3, #12]
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	200003a4 	.word	0x200003a4
 8000b24:	20000314 	.word	0x20000314
 8000b28:	200003a8 	.word	0x200003a8
 8000b2c:	2000035c 	.word	0x2000035c
 8000b30:	200002cc 	.word	0x200002cc

08000b34 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b44:	3301      	adds	r3, #1
 8000b46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000b4a:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d007      	beq.n	8000b66 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5a:	683a      	ldr	r2, [r7, #0]
 8000b5c:	79f9      	ldrb	r1, [r7, #7]
 8000b5e:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000b60:	68fa      	ldr	r2, [r7, #12]
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8000b66:	bf00      	nop
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <Look_for>:

int Look_for (char *str, char *buffertolookinto)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b086      	sub	sp, #24
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
 8000b7a:	6039      	str	r1, [r7, #0]
	int stringlength = strlen (str);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff fb31 	bl	80001e4 <strlen>
 8000b82:	4603      	mov	r3, r0
 8000b84:	60fb      	str	r3, [r7, #12]
	int bufferlength = strlen (buffertolookinto);
 8000b86:	6838      	ldr	r0, [r7, #0]
 8000b88:	f7ff fb2c 	bl	80001e4 <strlen>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	60bb      	str	r3, [r7, #8]
	int so_far = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	613b      	str	r3, [r7, #16]
repeat:
	while (str[so_far] != buffertolookinto[indx]) indx++;
 8000b98:	e002      	b.n	8000ba0 <Look_for+0x2e>
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	781a      	ldrb	r2, [r3, #0]
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	6839      	ldr	r1, [r7, #0]
 8000bac:	440b      	add	r3, r1
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d1f2      	bne.n	8000b9a <Look_for+0x28>
	if (str[so_far] == buffertolookinto[indx])
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	781a      	ldrb	r2, [r3, #0]
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	6839      	ldr	r1, [r7, #0]
 8000bc0:	440b      	add	r3, r1
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d111      	bne.n	8000bec <Look_for+0x7a>
	{
		while (str[so_far] == buffertolookinto[indx])
 8000bc8:	e005      	b.n	8000bd6 <Look_for+0x64>
		{
			so_far++;
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	617b      	str	r3, [r7, #20]
			indx++;
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	613b      	str	r3, [r7, #16]
		while (str[so_far] == buffertolookinto[indx])
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	4413      	add	r3, r2
 8000bdc:	781a      	ldrb	r2, [r3, #0]
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	6839      	ldr	r1, [r7, #0]
 8000be2:	440b      	add	r3, r1
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d0ef      	beq.n	8000bca <Look_for+0x58>
 8000bea:	e008      	b.n	8000bfe <Look_for+0x8c>
		}
	}
	else
	{
		so_far =0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
		if (indx >= bufferlength) return -1;
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	dbcf      	blt.n	8000b98 <Look_for+0x26>
 8000bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfc:	e007      	b.n	8000c0e <Look_for+0x9c>
		goto repeat;
	}

	if (so_far == stringlength) return 1;
 8000bfe:	697a      	ldr	r2, [r7, #20]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d101      	bne.n	8000c0a <Look_for+0x98>
 8000c06:	2301      	movs	r3, #1
 8000c08:	e001      	b.n	8000c0e <Look_for+0x9c>
	else return -1;
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3718      	adds	r7, #24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <Uart_read>:

int Uart_read(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8000c1e:	4b11      	ldr	r3, [pc, #68]	@ (8000c64 <Uart_read+0x4c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c24:	4b0f      	ldr	r3, [pc, #60]	@ (8000c64 <Uart_read+0x4c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d102      	bne.n	8000c34 <Uart_read+0x1c>
  {
    return -1;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c32:	e010      	b.n	8000c56 <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8000c34:	4b0b      	ldr	r3, [pc, #44]	@ (8000c64 <Uart_read+0x4c>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b0a      	ldr	r3, [pc, #40]	@ (8000c64 <Uart_read+0x4c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c3e:	5cd3      	ldrb	r3, [r2, r3]
 8000c40:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8000c42:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <Uart_read+0x4c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c48:	1c5a      	adds	r2, r3, #1
 8000c4a:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <Uart_read+0x4c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000c52:	645a      	str	r2, [r3, #68]	@ 0x44
    return c;
 8000c54:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	200003a4 	.word	0x200003a4

08000c68 <Uart_write>:

void Uart_write(int c)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	db21      	blt.n	8000cba <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 8000c76:	4b14      	ldr	r3, [pc, #80]	@ (8000cc8 <Uart_write+0x60>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c82:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 8000c84:	bf00      	nop
 8000c86:	4b10      	ldr	r3, [pc, #64]	@ (8000cc8 <Uart_write+0x60>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d0f9      	beq.n	8000c86 <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8000c92:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc8 <Uart_write+0x60>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc8 <Uart_write+0x60>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9c:	6879      	ldr	r1, [r7, #4]
 8000c9e:	b2c9      	uxtb	r1, r1
 8000ca0:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 8000ca2:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <Uart_write+0x60>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	641a      	str	r2, [r3, #64]	@ 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000caa:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <Uart_write+0x64>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	68da      	ldr	r2, [r3, #12]
 8000cb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <Uart_write+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000cb8:	60da      	str	r2, [r3, #12]
	}
}
 8000cba:	bf00      	nop
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	200003a8 	.word	0x200003a8
 8000ccc:	200002cc 	.word	0x200002cc

08000cd0 <IsDataAvailable>:

int IsDataAvailable(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <IsDataAvailable+0x2c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	4b07      	ldr	r3, [pc, #28]	@ (8000cfc <IsDataAvailable+0x2c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	3340      	adds	r3, #64	@ 0x40
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	200003a4 	.word	0x200003a4

08000d00 <Uart_sendstring>:

void Uart_sendstring (const char *s)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 8000d08:	e006      	b.n	8000d18 <Uart_sendstring+0x18>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	1c5a      	adds	r2, r3, #1
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ffa8 	bl	8000c68 <Uart_write>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1f4      	bne.n	8000d0a <Uart_sendstring+0xa>
}
 8000d20:	bf00      	nop
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <GetDataFromBuffer>:

  while(*s) Uart_write(*s++);
}

void GetDataFromBuffer (char *startString, char *endString, char *buffertocopyfrom, char *buffertocopyinto)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b08c      	sub	sp, #48	@ 0x30
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	60f8      	str	r0, [r7, #12]
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
 8000d36:	603b      	str	r3, [r7, #0]
	int startStringLength = strlen (startString);
 8000d38:	68f8      	ldr	r0, [r7, #12]
 8000d3a:	f7ff fa53 	bl	80001e4 <strlen>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	623b      	str	r3, [r7, #32]
	int endStringLength   = strlen (endString);
 8000d42:	68b8      	ldr	r0, [r7, #8]
 8000d44:	f7ff fa4e 	bl	80001e4 <strlen>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	61fb      	str	r3, [r7, #28]
	int so_far = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int indx = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62bb      	str	r3, [r7, #40]	@ 0x28
	int startposition = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61bb      	str	r3, [r7, #24]
	int endposition = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]

repeat1:
	while (startString[so_far] != buffertocopyfrom[indx]) indx++;
 8000d5c:	e002      	b.n	8000d64 <GetDataFromBuffer+0x3a>
 8000d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d60:	3301      	adds	r3, #1
 8000d62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	4413      	add	r3, r2
 8000d6a:	781a      	ldrb	r2, [r3, #0]
 8000d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	440b      	add	r3, r1
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d1f2      	bne.n	8000d5e <GetDataFromBuffer+0x34>
	if (startString[so_far] == buffertocopyfrom[indx])
 8000d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	781a      	ldrb	r2, [r3, #0]
 8000d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	440b      	add	r3, r1
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d110      	bne.n	8000dae <GetDataFromBuffer+0x84>
	{
		while (startString[so_far] == buffertocopyfrom[indx])
 8000d8c:	e005      	b.n	8000d9a <GetDataFromBuffer+0x70>
		{
			so_far++;
 8000d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d90:	3301      	adds	r3, #1
 8000d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
			indx++;
 8000d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d96:	3301      	adds	r3, #1
 8000d98:	62bb      	str	r3, [r7, #40]	@ 0x28
		while (startString[so_far] == buffertocopyfrom[indx])
 8000d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d9c:	68fa      	ldr	r2, [r7, #12]
 8000d9e:	4413      	add	r3, r2
 8000da0:	781a      	ldrb	r2, [r3, #0]
 8000da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000da4:	6879      	ldr	r1, [r7, #4]
 8000da6:	440b      	add	r3, r1
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d0ef      	beq.n	8000d8e <GetDataFromBuffer+0x64>
		}
	}

	if (so_far == startStringLength) startposition = indx;
 8000dae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000db0:	6a3b      	ldr	r3, [r7, #32]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d104      	bne.n	8000dc0 <GetDataFromBuffer+0x96>
 8000db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000db8:	61bb      	str	r3, [r7, #24]
	{
		so_far =0;
		goto repeat1;
	}

	so_far = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000dbe:	e006      	b.n	8000dce <GetDataFromBuffer+0xa4>
		so_far =0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		goto repeat1;
 8000dc4:	e7ca      	b.n	8000d5c <GetDataFromBuffer+0x32>

repeat2:
	while (endString[so_far] != buffertocopyfrom[indx]) indx++;
 8000dc6:	e002      	b.n	8000dce <GetDataFromBuffer+0xa4>
 8000dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dca:	3301      	adds	r3, #1
 8000dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dd0:	68ba      	ldr	r2, [r7, #8]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	781a      	ldrb	r2, [r3, #0]
 8000dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dd8:	6879      	ldr	r1, [r7, #4]
 8000dda:	440b      	add	r3, r1
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d1f2      	bne.n	8000dc8 <GetDataFromBuffer+0x9e>
	if (endString[so_far] == buffertocopyfrom[indx])
 8000de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000de4:	68ba      	ldr	r2, [r7, #8]
 8000de6:	4413      	add	r3, r2
 8000de8:	781a      	ldrb	r2, [r3, #0]
 8000dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dec:	6879      	ldr	r1, [r7, #4]
 8000dee:	440b      	add	r3, r1
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d110      	bne.n	8000e18 <GetDataFromBuffer+0xee>
	{
		while (endString[so_far] == buffertocopyfrom[indx])
 8000df6:	e005      	b.n	8000e04 <GetDataFromBuffer+0xda>
		{
			so_far++;
 8000df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			indx++;
 8000dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e00:	3301      	adds	r3, #1
 8000e02:	62bb      	str	r3, [r7, #40]	@ 0x28
		while (endString[so_far] == buffertocopyfrom[indx])
 8000e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	4413      	add	r3, r2
 8000e0a:	781a      	ldrb	r2, [r3, #0]
 8000e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	440b      	add	r3, r1
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d0ef      	beq.n	8000df8 <GetDataFromBuffer+0xce>
		}
	}

	if (so_far == endStringLength) endposition = indx-endStringLength;
 8000e18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d10a      	bne.n	8000e36 <GetDataFromBuffer+0x10c>
 8000e20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	617b      	str	r3, [r7, #20]
	{
		so_far =0;
		goto repeat2;
	}

	so_far = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	indx=0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62bb      	str	r3, [r7, #40]	@ 0x28

	for (int i=startposition; i<endposition; i++)
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e34:	e010      	b.n	8000e58 <GetDataFromBuffer+0x12e>
		so_far =0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
		goto repeat2;
 8000e3a:	e7c4      	b.n	8000dc6 <GetDataFromBuffer+0x9c>
	{
		buffertocopyinto[indx] = buffertocopyfrom[i];
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	441a      	add	r2, r3
 8000e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e44:	6839      	ldr	r1, [r7, #0]
 8000e46:	440b      	add	r3, r1
 8000e48:	7812      	ldrb	r2, [r2, #0]
 8000e4a:	701a      	strb	r2, [r3, #0]
		indx++;
 8000e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e4e:	3301      	adds	r3, #1
 8000e50:	62bb      	str	r3, [r7, #40]	@ 0x28
	for (int i=startposition; i<endposition; i++)
 8000e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e54:	3301      	adds	r3, #1
 8000e56:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	dbed      	blt.n	8000e3c <GetDataFromBuffer+0x112>
	}
}
 8000e60:	bf00      	nop
 8000e62:	bf00      	nop
 8000e64:	3730      	adds	r7, #48	@ 0x30
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <Uart_flush>:

void Uart_flush (void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	memset(_rx_buffer->buffer,'\0', UART_BUFFER_SIZE);
 8000e70:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <Uart_flush+0x20>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2240      	movs	r2, #64	@ 0x40
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f007 fde3 	bl	8008a44 <memset>
	_rx_buffer->head = 0;
 8000e7e:	4b03      	ldr	r3, [pc, #12]	@ (8000e8c <Uart_flush+0x20>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2200      	movs	r2, #0
 8000e84:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200003a4 	.word	0x200003a4

08000e90 <Uart_peek>:

int Uart_peek()
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8000e94:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <Uart_peek+0x30>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e9a:	4b09      	ldr	r3, [pc, #36]	@ (8000ec0 <Uart_peek+0x30>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d102      	bne.n	8000eaa <Uart_peek+0x1a>
  {
    return -1;
 8000ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea8:	e005      	b.n	8000eb6 <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8000eaa:	4b05      	ldr	r3, [pc, #20]	@ (8000ec0 <Uart_peek+0x30>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	4b04      	ldr	r3, [pc, #16]	@ (8000ec0 <Uart_peek+0x30>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb4:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	200003a4 	.word	0x200003a4

08000ec4 <Copy_upto>:


int Copy_upto (char *string, char *buffertocopyinto)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff f986 	bl	80001e4 <strlen>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	613b      	str	r3, [r7, #16]

again:
	while (!IsDataAvailable());
 8000ee0:	bf00      	nop
 8000ee2:	f7ff fef5 	bl	8000cd0 <IsDataAvailable>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d0fa      	beq.n	8000ee2 <Copy_upto+0x1e>
	while (Uart_peek() != string[so_far])
 8000eec:	e01b      	b.n	8000f26 <Copy_upto+0x62>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8000eee:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa8 <Copy_upto+0xe4>)
 8000ef0:	6819      	ldr	r1, [r3, #0]
 8000ef2:	4b2d      	ldr	r3, [pc, #180]	@ (8000fa8 <Copy_upto+0xe4>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	6838      	ldr	r0, [r7, #0]
 8000efc:	4403      	add	r3, r0
 8000efe:	5c8a      	ldrb	r2, [r1, r2]
 8000f00:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8000f02:	4b29      	ldr	r3, [pc, #164]	@ (8000fa8 <Copy_upto+0xe4>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	4b27      	ldr	r3, [pc, #156]	@ (8000fa8 <Copy_upto+0xe4>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000f12:	645a      	str	r2, [r3, #68]	@ 0x44
			indx++;
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	3301      	adds	r3, #1
 8000f18:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8000f1a:	bf00      	nop
 8000f1c:	f7ff fed8 	bl	8000cd0 <IsDataAvailable>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d0fa      	beq.n	8000f1c <Copy_upto+0x58>
	while (Uart_peek() != string[so_far])
 8000f26:	f7ff ffb3 	bl	8000e90 <Uart_peek>
 8000f2a:	4601      	mov	r1, r0
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4299      	cmp	r1, r3
 8000f36:	d1da      	bne.n	8000eee <Copy_upto+0x2a>

		}
	while (Uart_peek() == string [so_far])
 8000f38:	e019      	b.n	8000f6e <Copy_upto+0xaa>
	{
		so_far++;
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8000f40:	f7ff fe6a 	bl	8000c18 <Uart_read>
 8000f44:	4601      	mov	r1, r0
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1c5a      	adds	r2, r3, #1
 8000f4a:	613a      	str	r2, [r7, #16]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	4413      	add	r3, r2
 8000f52:	b2ca      	uxtb	r2, r1
 8000f54:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d101      	bne.n	8000f62 <Copy_upto+0x9e>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e01d      	b.n	8000f9e <Copy_upto+0xda>
		while (!IsDataAvailable());
 8000f62:	bf00      	nop
 8000f64:	f7ff feb4 	bl	8000cd0 <IsDataAvailable>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d0fa      	beq.n	8000f64 <Copy_upto+0xa0>
	while (Uart_peek() == string [so_far])
 8000f6e:	f7ff ff8f 	bl	8000e90 <Uart_peek>
 8000f72:	4601      	mov	r1, r0
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4299      	cmp	r1, r3
 8000f7e:	d0dc      	beq.n	8000f3a <Copy_upto+0x76>
	}

	if (so_far != len)
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d002      	beq.n	8000f8e <Copy_upto+0xca>
	{
		so_far = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
		goto again;
 8000f8c:	e7a8      	b.n	8000ee0 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d101      	bne.n	8000f9a <Copy_upto+0xd6>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e001      	b.n	8000f9e <Copy_upto+0xda>
	else return -1;
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200003a4 	.word	0x200003a4

08000fac <Get_after>:

int Get_after (char *string, uint8_t numberofchars, char *buffertosave)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	607a      	str	r2, [r7, #4]
 8000fb8:	72fb      	strb	r3, [r7, #11]

	while (Wait_for(string) != 1);
 8000fba:	bf00      	nop
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f000 f821 	bl	8001004 <Wait_for>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d1f9      	bne.n	8000fbc <Get_after+0x10>
	for (int indx=0; indx<numberofchars; indx++)
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	e010      	b.n	8000ff0 <Get_after+0x44>
	{
		while (!(IsDataAvailable()));
 8000fce:	bf00      	nop
 8000fd0:	f7ff fe7e 	bl	8000cd0 <IsDataAvailable>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0fa      	beq.n	8000fd0 <Get_after+0x24>
		buffertosave[indx] = Uart_read();
 8000fda:	f7ff fe1d 	bl	8000c18 <Uart_read>
 8000fde:	4601      	mov	r1, r0
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	b2ca      	uxtb	r2, r1
 8000fe8:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	3301      	adds	r3, #1
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	7afb      	ldrb	r3, [r7, #11]
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	dbea      	blt.n	8000fce <Get_after+0x22>
	}
	return 1;
 8000ff8:	2301      	movs	r3, #1
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <Wait_for>:


int Wait_for (char *string)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	int so_far =0;
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff f8e7 	bl	80001e4 <strlen>
 8001016:	4603      	mov	r3, r0
 8001018:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable());
 800101a:	bf00      	nop
 800101c:	f7ff fe58 	bl	8000cd0 <IsDataAvailable>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0fa      	beq.n	800101c <Wait_for+0x18>
	while (Uart_peek() != string[so_far]) _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001026:	e008      	b.n	800103a <Wait_for+0x36>
 8001028:	4b1f      	ldr	r3, [pc, #124]	@ (80010a8 <Wait_for+0xa4>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800102e:	1c5a      	adds	r2, r3, #1
 8001030:	4b1d      	ldr	r3, [pc, #116]	@ (80010a8 <Wait_for+0xa4>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001038:	645a      	str	r2, [r3, #68]	@ 0x44
 800103a:	f7ff ff29 	bl	8000e90 <Uart_peek>
 800103e:	4601      	mov	r1, r0
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4299      	cmp	r1, r3
 800104a:	d1ed      	bne.n	8001028 <Wait_for+0x24>
	while (Uart_peek() == string [so_far])
 800104c:	e010      	b.n	8001070 <Wait_for+0x6c>
	{
		so_far++;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	3301      	adds	r3, #1
 8001052:	60fb      	str	r3, [r7, #12]
		Uart_read();
 8001054:	f7ff fde0 	bl	8000c18 <Uart_read>
		if (so_far == len) return 1;
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	429a      	cmp	r2, r3
 800105e:	d101      	bne.n	8001064 <Wait_for+0x60>
 8001060:	2301      	movs	r3, #1
 8001062:	e01d      	b.n	80010a0 <Wait_for+0x9c>
		while (!IsDataAvailable());
 8001064:	bf00      	nop
 8001066:	f7ff fe33 	bl	8000cd0 <IsDataAvailable>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d0fa      	beq.n	8001066 <Wait_for+0x62>
	while (Uart_peek() == string [so_far])
 8001070:	f7ff ff0e 	bl	8000e90 <Uart_peek>
 8001074:	4601      	mov	r1, r0
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	4413      	add	r3, r2
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	4299      	cmp	r1, r3
 8001080:	d0e5      	beq.n	800104e <Wait_for+0x4a>
	}

	if (so_far != len)
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	429a      	cmp	r2, r3
 8001088:	d002      	beq.n	8001090 <Wait_for+0x8c>
	{
		so_far = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
		goto again;
 800108e:	e7c4      	b.n	800101a <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	429a      	cmp	r2, r3
 8001096:	d101      	bne.n	800109c <Wait_for+0x98>
 8001098:	2301      	movs	r3, #1
 800109a:	e001      	b.n	80010a0 <Wait_for+0x9c>
	else return -1;
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200003a4 	.word	0x200003a4

080010ac <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	f003 0320 	and.w	r3, r3, #32
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d013      	beq.n	80010f6 <Uart_isr+0x4a>
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	f003 0320 	and.w	r3, r3, #32
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d00e      	beq.n	80010f6 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80010e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001158 <Uart_isr+0xac>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	4611      	mov	r1, r2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fd20 	bl	8000b34 <store_char>
        return;
 80010f4:	e02c      	b.n	8001150 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d027      	beq.n	8001150 <Uart_isr+0xa4>
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001106:	2b00      	cmp	r3, #0
 8001108:	d022      	beq.n	8001150 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 800110a:	4b14      	ldr	r3, [pc, #80]	@ (800115c <Uart_isr+0xb0>)
 800110c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800110e:	4b13      	ldr	r3, [pc, #76]	@ (800115c <Uart_isr+0xb0>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001112:	429a      	cmp	r2, r3
 8001114:	d108      	bne.n	8001128 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68da      	ldr	r2, [r3, #12]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001124:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8001126:	e012      	b.n	800114e <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001128:	4b0c      	ldr	r3, [pc, #48]	@ (800115c <Uart_isr+0xb0>)
 800112a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112c:	4a0b      	ldr	r2, [pc, #44]	@ (800115c <Uart_isr+0xb0>)
 800112e:	5cd3      	ldrb	r3, [r2, r3]
 8001130:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8001132:	4b0a      	ldr	r3, [pc, #40]	@ (800115c <Uart_isr+0xb0>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001136:	3301      	adds	r3, #1
 8001138:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800113c:	4a07      	ldr	r2, [pc, #28]	@ (800115c <Uart_isr+0xb0>)
 800113e:	6453      	str	r3, [r2, #68]	@ 0x44
    	      huart->Instance->SR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	7bba      	ldrb	r2, [r7, #14]
 800114c:	605a      	str	r2, [r3, #4]
    	return;
 800114e:	bf00      	nop
    }
}
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200003a4 	.word	0x200003a4
 800115c:	2000035c 	.word	0x2000035c

08001160 <Error_Handler>:
 *      Author: fahru
 */
#include "error_handler.h"

void Error_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001164:	b672      	cpsid	i
}
 8001166:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <Error_Handler+0x8>

0800116c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001172:	f107 030c 	add.w	r3, r7, #12
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	4b39      	ldr	r3, [pc, #228]	@ (800126c <MX_GPIO_Init+0x100>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	4a38      	ldr	r2, [pc, #224]	@ (800126c <MX_GPIO_Init+0x100>)
 800118c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001190:	6313      	str	r3, [r2, #48]	@ 0x30
 8001192:	4b36      	ldr	r3, [pc, #216]	@ (800126c <MX_GPIO_Init+0x100>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	4b32      	ldr	r3, [pc, #200]	@ (800126c <MX_GPIO_Init+0x100>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	4a31      	ldr	r2, [pc, #196]	@ (800126c <MX_GPIO_Init+0x100>)
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ae:	4b2f      	ldr	r3, [pc, #188]	@ (800126c <MX_GPIO_Init+0x100>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	603b      	str	r3, [r7, #0]
 80011be:	4b2b      	ldr	r3, [pc, #172]	@ (800126c <MX_GPIO_Init+0x100>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a2a      	ldr	r2, [pc, #168]	@ (800126c <MX_GPIO_Init+0x100>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b28      	ldr	r3, [pc, #160]	@ (800126c <MX_GPIO_Init+0x100>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2104      	movs	r1, #4
 80011da:	4825      	ldr	r0, [pc, #148]	@ (8001270 <MX_GPIO_Init+0x104>)
 80011dc:	f000 fe22 	bl	8001e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Input Level */
  HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80011e0:	2101      	movs	r1, #1
 80011e2:	4824      	ldr	r0, [pc, #144]	@ (8001274 <MX_GPIO_Init+0x108>)
 80011e4:	f000 fe06 	bl	8001df4 <HAL_GPIO_ReadPin>

  /*Configure GPIO pin : PC2 EXTERNAL LED CONNECTED */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011e8:	2304      	movs	r3, #4
 80011ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	4619      	mov	r1, r3
 80011fe:	481c      	ldr	r0, [pc, #112]	@ (8001270 <MX_GPIO_Init+0x104>)
 8001200:	f000 fc5c 	bl	8001abc <HAL_GPIO_Init>

  /* Configure GPIO pin : PA0 USER PUSH BUTTON B1*/
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001204:	2301      	movs	r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001208:	2300      	movs	r3, #0
 800120a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	4619      	mov	r1, r3
 800121a:	4815      	ldr	r0, [pc, #84]	@ (8001270 <MX_GPIO_Init+0x104>)
 800121c:	f000 fc4e 	bl	8001abc <HAL_GPIO_Init>

  /* Configure GPIO pin : PA9 (USART1_TX) */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001220:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001224:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122e:	2303      	movs	r3, #3
 8001230:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001232:	2307      	movs	r3, #7
 8001234:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	4619      	mov	r1, r3
 800123c:	480d      	ldr	r0, [pc, #52]	@ (8001274 <MX_GPIO_Init+0x108>)
 800123e:	f000 fc3d 	bl	8001abc <HAL_GPIO_Init>

  /* Configure GPIO pin : PA10 (USART1_RX) */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001242:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001246:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001250:	2303      	movs	r3, #3
 8001252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001254:	2307      	movs	r3, #7
 8001256:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	4619      	mov	r1, r3
 800125e:	4805      	ldr	r0, [pc, #20]	@ (8001274 <MX_GPIO_Init+0x108>)
 8001260:	f000 fc2c 	bl	8001abc <HAL_GPIO_Init>
}
 8001264:	bf00      	nop
 8001266:	3720      	adds	r7, #32
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40023800 	.word	0x40023800
 8001270:	40020800 	.word	0x40020800
 8001274:	40020000 	.word	0x40020000

08001278 <main>:
#include "ESP_DATA_HANDLER.h"
#include "UartRingbuffer.h"


int main(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  //uint8_t myBuffer[20] = "Hello World!!!\r\n";
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800127c:	f000 f9e4 	bl	8001648 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001280:	f000 f90c 	bl	800149c <SystemClock_Config>

  MX_GPIO_Init();
 8001284:	f7ff ff72 	bl	800116c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001288:	f000 f982 	bl	8001590 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800128c:	f006 fec6 	bl	800801c <MX_USB_DEVICE_Init>
  //UART_CommunicationSetup();
  ESP_Init("601 S Park Apt C", "fahrukh.khan666", "192.168.40.21");
 8001290:	4a05      	ldr	r2, [pc, #20]	@ (80012a8 <main+0x30>)
 8001292:	4906      	ldr	r1, [pc, #24]	@ (80012ac <main+0x34>)
 8001294:	4806      	ldr	r0, [pc, #24]	@ (80012b0 <main+0x38>)
 8001296:	f7ff f997 	bl	80005c8 <ESP_Init>
  HAL_Delay(2000);  // Wait for 2 seconds
 800129a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800129e:	f000 fa45 	bl	800172c <HAL_Delay>
  while (1)
  {
    //CDC_Transmit_FS(myBuffer, strlen((char*)myBuffer));
    //HAL_Delay(500);
    //controlLedWithButton();
	  Server_Start();
 80012a2:	f7ff fb69 	bl	8000978 <Server_Start>
 80012a6:	e7fc      	b.n	80012a2 <main+0x2a>
 80012a8:	08009a6c 	.word	0x08009a6c
 80012ac:	08009a7c 	.word	0x08009a7c
 80012b0:	08009a8c 	.word	0x08009a8c

080012b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	4b10      	ldr	r3, [pc, #64]	@ (8001300 <HAL_MspInit+0x4c>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001300 <HAL_MspInit+0x4c>)
 80012c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001300 <HAL_MspInit+0x4c>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	603b      	str	r3, [r7, #0]
 80012da:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <HAL_MspInit+0x4c>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012de:	4a08      	ldr	r2, [pc, #32]	@ (8001300 <HAL_MspInit+0x4c>)
 80012e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e6:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <HAL_MspInit+0x4c>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012f2:	2007      	movs	r0, #7
 80012f4:	f000 fb0e 	bl	8001914 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40023800 	.word	0x40023800

08001304 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	@ 0x28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a1d      	ldr	r2, [pc, #116]	@ (8001398 <HAL_UART_MspInit+0x94>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d134      	bne.n	8001390 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	4b1c      	ldr	r3, [pc, #112]	@ (800139c <HAL_UART_MspInit+0x98>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132e:	4a1b      	ldr	r2, [pc, #108]	@ (800139c <HAL_UART_MspInit+0x98>)
 8001330:	f043 0310 	orr.w	r3, r3, #16
 8001334:	6453      	str	r3, [r2, #68]	@ 0x44
 8001336:	4b19      	ldr	r3, [pc, #100]	@ (800139c <HAL_UART_MspInit+0x98>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133a:	f003 0310 	and.w	r3, r3, #16
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	4b15      	ldr	r3, [pc, #84]	@ (800139c <HAL_UART_MspInit+0x98>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	4a14      	ldr	r2, [pc, #80]	@ (800139c <HAL_UART_MspInit+0x98>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6313      	str	r3, [r2, #48]	@ 0x30
 8001352:	4b12      	ldr	r3, [pc, #72]	@ (800139c <HAL_UART_MspInit+0x98>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800135e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001370:	2307      	movs	r3, #7
 8001372:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4619      	mov	r1, r3
 800137a:	4809      	ldr	r0, [pc, #36]	@ (80013a0 <HAL_UART_MspInit+0x9c>)
 800137c:	f000 fb9e 	bl	8001abc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001380:	2200      	movs	r2, #0
 8001382:	2100      	movs	r1, #0
 8001384:	2025      	movs	r0, #37	@ 0x25
 8001386:	f000 fad0 	bl	800192a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800138a:	2025      	movs	r0, #37	@ 0x25
 800138c:	f000 fae9 	bl	8001962 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001390:	bf00      	nop
 8001392:	3728      	adds	r7, #40	@ 0x28
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40011000 	.word	0x40011000
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020000 	.word	0x40020000

080013a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <NMI_Handler+0x4>

080013ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b0:	bf00      	nop
 80013b2:	e7fd      	b.n	80013b0 <HardFault_Handler+0x4>

080013b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <MemManage_Handler+0x4>

080013bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c0:	bf00      	nop
 80013c2:	e7fd      	b.n	80013c0 <BusFault_Handler+0x4>

080013c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <UsageFault_Handler+0x4>

080013cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013fa:	f000 f977 	bl	80016ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  Uart_isr (&huart1);
 8001408:	4803      	ldr	r0, [pc, #12]	@ (8001418 <USART1_IRQHandler+0x14>)
 800140a:	f7ff fe4f 	bl	80010ac <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800140e:	4802      	ldr	r0, [pc, #8]	@ (8001418 <USART1_IRQHandler+0x14>)
 8001410:	f002 fc5c 	bl	8003ccc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	200002cc 	.word	0x200002cc

0800141c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001420:	4802      	ldr	r0, [pc, #8]	@ (800142c <OTG_FS_IRQHandler+0x10>)
 8001422:	f000 fe5c 	bl	80020de <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20001894 	.word	0x20001894

08001430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001438:	4a14      	ldr	r2, [pc, #80]	@ (800148c <_sbrk+0x5c>)
 800143a:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <_sbrk+0x60>)
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001444:	4b13      	ldr	r3, [pc, #76]	@ (8001494 <_sbrk+0x64>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d102      	bne.n	8001452 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800144c:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <_sbrk+0x64>)
 800144e:	4a12      	ldr	r2, [pc, #72]	@ (8001498 <_sbrk+0x68>)
 8001450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001452:	4b10      	ldr	r3, [pc, #64]	@ (8001494 <_sbrk+0x64>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	429a      	cmp	r2, r3
 800145e:	d207      	bcs.n	8001470 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001460:	f007 fb08 	bl	8008a74 <__errno>
 8001464:	4603      	mov	r3, r0
 8001466:	220c      	movs	r2, #12
 8001468:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
 800146e:	e009      	b.n	8001484 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001470:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <_sbrk+0x64>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001476:	4b07      	ldr	r3, [pc, #28]	@ (8001494 <_sbrk+0x64>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	4a05      	ldr	r2, [pc, #20]	@ (8001494 <_sbrk+0x64>)
 8001480:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001482:	68fb      	ldr	r3, [r7, #12]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20020000 	.word	0x20020000
 8001490:	00004000 	.word	0x00004000
 8001494:	200003ac 	.word	0x200003ac
 8001498:	200020e0 	.word	0x200020e0

0800149c <SystemClock_Config>:
  * @retval None
  */
#include "system_config.h"
#include "main.h" // Included this for Error handling
void SystemClock_Config(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b094      	sub	sp, #80	@ 0x50
 80014a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a2:	f107 0320 	add.w	r3, r7, #32
 80014a6:	2230      	movs	r2, #48	@ 0x30
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f007 faca 	bl	8008a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	4b27      	ldr	r3, [pc, #156]	@ (8001564 <SystemClock_Config+0xc8>)
 80014c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c8:	4a26      	ldr	r2, [pc, #152]	@ (8001564 <SystemClock_Config+0xc8>)
 80014ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d0:	4b24      	ldr	r3, [pc, #144]	@ (8001564 <SystemClock_Config+0xc8>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014dc:	2300      	movs	r3, #0
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	4b21      	ldr	r3, [pc, #132]	@ (8001568 <SystemClock_Config+0xcc>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a20      	ldr	r2, [pc, #128]	@ (8001568 <SystemClock_Config+0xcc>)
 80014e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001568 <SystemClock_Config+0xcc>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014f8:	2301      	movs	r3, #1
 80014fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001500:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001502:	2302      	movs	r3, #2
 8001504:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001506:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800150a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800150c:	2304      	movs	r3, #4
 800150e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001510:	23a8      	movs	r3, #168	@ 0xa8
 8001512:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001514:	2302      	movs	r3, #2
 8001516:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001518:	2307      	movs	r3, #7
 800151a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800151c:	f107 0320 	add.w	r3, r7, #32
 8001520:	4618      	mov	r0, r3
 8001522:	f001 feeb 	bl	80032fc <HAL_RCC_OscConfig>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800152c:	f7ff fe18 	bl	8001160 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001530:	230f      	movs	r3, #15
 8001532:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001534:	2302      	movs	r3, #2
 8001536:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001538:	2380      	movs	r3, #128	@ 0x80
 800153a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800153c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001540:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001546:	f107 030c 	add.w	r3, r7, #12
 800154a:	2102      	movs	r1, #2
 800154c:	4618      	mov	r0, r3
 800154e:	f002 f94d 	bl	80037ec <HAL_RCC_ClockConfig>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001558:	f7ff fe02 	bl	8001160 <Error_Handler>
  }
}
 800155c:	bf00      	nop
 800155e:	3750      	adds	r7, #80	@ 0x50
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40023800 	.word	0x40023800
 8001568:	40007000 	.word	0x40007000

0800156c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001570:	4b06      	ldr	r3, [pc, #24]	@ (800158c <SystemInit+0x20>)
 8001572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001576:	4a05      	ldr	r2, [pc, #20]	@ (800158c <SystemInit+0x20>)
 8001578:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800157c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <MX_USART1_UART_Init>:
#include "main.h"

//UART_HandleTypeDef huart1; // Now use huart1

void MX_USART1_UART_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;  // Set USART1 instance
 8001594:	4b15      	ldr	r3, [pc, #84]	@ (80015ec <MX_USART1_UART_Init+0x5c>)
 8001596:	4a16      	ldr	r2, [pc, #88]	@ (80015f0 <MX_USART1_UART_Init+0x60>)
 8001598:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800159a:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <MX_USART1_UART_Init+0x5c>)
 800159c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015a2:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <MX_USART1_UART_Init+0x5c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015a8:	4b10      	ldr	r3, [pc, #64]	@ (80015ec <MX_USART1_UART_Init+0x5c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ae:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <MX_USART1_UART_Init+0x5c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015b4:	4b0d      	ldr	r3, [pc, #52]	@ (80015ec <MX_USART1_UART_Init+0x5c>)
 80015b6:	220c      	movs	r2, #12
 80015b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ba:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <MX_USART1_UART_Init+0x5c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c0:	4b0a      	ldr	r3, [pc, #40]	@ (80015ec <MX_USART1_UART_Init+0x5c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	61da      	str	r2, [r3, #28]
  
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015c6:	4809      	ldr	r0, [pc, #36]	@ (80015ec <MX_USART1_UART_Init+0x5c>)
 80015c8:	f002 fb30 	bl	8003c2c <HAL_UART_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015d2:	f7ff fdc5 	bl	8001160 <Error_Handler>
  }
  
  // Enable the USART2 interrupt
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);  // Set priority (adjust as needed)
 80015d6:	2200      	movs	r2, #0
 80015d8:	2100      	movs	r1, #0
 80015da:	2025      	movs	r0, #37	@ 0x25
 80015dc:	f000 f9a5 	bl	800192a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);  // Enable the interrupt in NVIC
 80015e0:	2025      	movs	r0, #37	@ 0x25
 80015e2:	f000 f9be 	bl	8001962 <HAL_NVIC_EnableIRQ>
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200002cc 	.word	0x200002cc
 80015f0:	40011000 	.word	0x40011000

080015f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800162c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015f8:	f7ff ffb8 	bl	800156c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015fc:	480c      	ldr	r0, [pc, #48]	@ (8001630 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015fe:	490d      	ldr	r1, [pc, #52]	@ (8001634 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001600:	4a0d      	ldr	r2, [pc, #52]	@ (8001638 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001604:	e002      	b.n	800160c <LoopCopyDataInit>

08001606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160a:	3304      	adds	r3, #4

0800160c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800160c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001610:	d3f9      	bcc.n	8001606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001612:	4a0a      	ldr	r2, [pc, #40]	@ (800163c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001614:	4c0a      	ldr	r4, [pc, #40]	@ (8001640 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001618:	e001      	b.n	800161e <LoopFillZerobss>

0800161a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800161c:	3204      	adds	r2, #4

0800161e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001620:	d3fb      	bcc.n	800161a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001622:	f007 fa2d 	bl	8008a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001626:	f7ff fe27 	bl	8001278 <main>
  bx  lr    
 800162a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800162c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001634:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8001638:	08009b44 	.word	0x08009b44
  ldr r2, =_sbss
 800163c:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8001640:	200020e0 	.word	0x200020e0

08001644 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001644:	e7fe      	b.n	8001644 <ADC_IRQHandler>
	...

08001648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800164c:	4b0e      	ldr	r3, [pc, #56]	@ (8001688 <HAL_Init+0x40>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0d      	ldr	r2, [pc, #52]	@ (8001688 <HAL_Init+0x40>)
 8001652:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001656:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001658:	4b0b      	ldr	r3, [pc, #44]	@ (8001688 <HAL_Init+0x40>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0a      	ldr	r2, [pc, #40]	@ (8001688 <HAL_Init+0x40>)
 800165e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001662:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001664:	4b08      	ldr	r3, [pc, #32]	@ (8001688 <HAL_Init+0x40>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a07      	ldr	r2, [pc, #28]	@ (8001688 <HAL_Init+0x40>)
 800166a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800166e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001670:	2003      	movs	r0, #3
 8001672:	f000 f94f 	bl	8001914 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001676:	2000      	movs	r0, #0
 8001678:	f000 f808 	bl	800168c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800167c:	f7ff fe1a 	bl	80012b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40023c00 	.word	0x40023c00

0800168c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001694:	4b12      	ldr	r3, [pc, #72]	@ (80016e0 <HAL_InitTick+0x54>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b12      	ldr	r3, [pc, #72]	@ (80016e4 <HAL_InitTick+0x58>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	4619      	mov	r1, r3
 800169e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 f967 	bl	800197e <HAL_SYSTICK_Config>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e00e      	b.n	80016d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b0f      	cmp	r3, #15
 80016be:	d80a      	bhi.n	80016d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c0:	2200      	movs	r2, #0
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295
 80016c8:	f000 f92f 	bl	800192a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016cc:	4a06      	ldr	r2, [pc, #24]	@ (80016e8 <HAL_InitTick+0x5c>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	e000      	b.n	80016d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000014 	.word	0x20000014
 80016e4:	2000001c 	.word	0x2000001c
 80016e8:	20000018 	.word	0x20000018

080016ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f0:	4b06      	ldr	r3, [pc, #24]	@ (800170c <HAL_IncTick+0x20>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b06      	ldr	r3, [pc, #24]	@ (8001710 <HAL_IncTick+0x24>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	4a04      	ldr	r2, [pc, #16]	@ (8001710 <HAL_IncTick+0x24>)
 80016fe:	6013      	str	r3, [r2, #0]
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	2000001c 	.word	0x2000001c
 8001710:	200003b0 	.word	0x200003b0

08001714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return uwTick;
 8001718:	4b03      	ldr	r3, [pc, #12]	@ (8001728 <HAL_GetTick+0x14>)
 800171a:	681b      	ldr	r3, [r3, #0]
}
 800171c:	4618      	mov	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	200003b0 	.word	0x200003b0

0800172c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001734:	f7ff ffee 	bl	8001714 <HAL_GetTick>
 8001738:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001744:	d005      	beq.n	8001752 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001746:	4b0a      	ldr	r3, [pc, #40]	@ (8001770 <HAL_Delay+0x44>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	461a      	mov	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4413      	add	r3, r2
 8001750:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001752:	bf00      	nop
 8001754:	f7ff ffde 	bl	8001714 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	429a      	cmp	r2, r3
 8001762:	d8f7      	bhi.n	8001754 <HAL_Delay+0x28>
  {
  }
}
 8001764:	bf00      	nop
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	2000001c 	.word	0x2000001c

08001774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001784:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001790:	4013      	ands	r3, r2
 8001792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800179c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a6:	4a04      	ldr	r2, [pc, #16]	@ (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	60d3      	str	r3, [r2, #12]
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c0:	4b04      	ldr	r3, [pc, #16]	@ (80017d4 <__NVIC_GetPriorityGrouping+0x18>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	f003 0307 	and.w	r3, r3, #7
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	db0b      	blt.n	8001802 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	f003 021f 	and.w	r2, r3, #31
 80017f0:	4907      	ldr	r1, [pc, #28]	@ (8001810 <__NVIC_EnableIRQ+0x38>)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	095b      	lsrs	r3, r3, #5
 80017f8:	2001      	movs	r0, #1
 80017fa:	fa00 f202 	lsl.w	r2, r0, r2
 80017fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000e100 	.word	0xe000e100

08001814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	6039      	str	r1, [r7, #0]
 800181e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001824:	2b00      	cmp	r3, #0
 8001826:	db0a      	blt.n	800183e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	b2da      	uxtb	r2, r3
 800182c:	490c      	ldr	r1, [pc, #48]	@ (8001860 <__NVIC_SetPriority+0x4c>)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	0112      	lsls	r2, r2, #4
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	440b      	add	r3, r1
 8001838:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800183c:	e00a      	b.n	8001854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4908      	ldr	r1, [pc, #32]	@ (8001864 <__NVIC_SetPriority+0x50>)
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	3b04      	subs	r3, #4
 800184c:	0112      	lsls	r2, r2, #4
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	440b      	add	r3, r1
 8001852:	761a      	strb	r2, [r3, #24]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000e100 	.word	0xe000e100
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001868:	b480      	push	{r7}
 800186a:	b089      	sub	sp, #36	@ 0x24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f1c3 0307 	rsb	r3, r3, #7
 8001882:	2b04      	cmp	r3, #4
 8001884:	bf28      	it	cs
 8001886:	2304      	movcs	r3, #4
 8001888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3304      	adds	r3, #4
 800188e:	2b06      	cmp	r3, #6
 8001890:	d902      	bls.n	8001898 <NVIC_EncodePriority+0x30>
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3b03      	subs	r3, #3
 8001896:	e000      	b.n	800189a <NVIC_EncodePriority+0x32>
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	f04f 32ff 	mov.w	r2, #4294967295
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43da      	mvns	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	401a      	ands	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b0:	f04f 31ff 	mov.w	r1, #4294967295
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ba:	43d9      	mvns	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c0:	4313      	orrs	r3, r2
         );
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3724      	adds	r7, #36	@ 0x24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3b01      	subs	r3, #1
 80018dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018e0:	d301      	bcc.n	80018e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e2:	2301      	movs	r3, #1
 80018e4:	e00f      	b.n	8001906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001910 <SysTick_Config+0x40>)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ee:	210f      	movs	r1, #15
 80018f0:	f04f 30ff 	mov.w	r0, #4294967295
 80018f4:	f7ff ff8e 	bl	8001814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f8:	4b05      	ldr	r3, [pc, #20]	@ (8001910 <SysTick_Config+0x40>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fe:	4b04      	ldr	r3, [pc, #16]	@ (8001910 <SysTick_Config+0x40>)
 8001900:	2207      	movs	r2, #7
 8001902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	e000e010 	.word	0xe000e010

08001914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff ff29 	bl	8001774 <__NVIC_SetPriorityGrouping>
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192a:	b580      	push	{r7, lr}
 800192c:	b086      	sub	sp, #24
 800192e:	af00      	add	r7, sp, #0
 8001930:	4603      	mov	r3, r0
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
 8001936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800193c:	f7ff ff3e 	bl	80017bc <__NVIC_GetPriorityGrouping>
 8001940:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	68b9      	ldr	r1, [r7, #8]
 8001946:	6978      	ldr	r0, [r7, #20]
 8001948:	f7ff ff8e 	bl	8001868 <NVIC_EncodePriority>
 800194c:	4602      	mov	r2, r0
 800194e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff5d 	bl	8001814 <__NVIC_SetPriority>
}
 800195a:	bf00      	nop
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800196c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff31 	bl	80017d8 <__NVIC_EnableIRQ>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff ffa2 	bl	80018d0 <SysTick_Config>
 800198c:	4603      	mov	r3, r0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b084      	sub	sp, #16
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019a4:	f7ff feb6 	bl	8001714 <HAL_GetTick>
 80019a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d008      	beq.n	80019c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2280      	movs	r2, #128	@ 0x80
 80019ba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e052      	b.n	8001a6e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0216 	bic.w	r2, r2, #22
 80019d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	695a      	ldr	r2, [r3, #20]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d103      	bne.n	80019f8 <HAL_DMA_Abort+0x62>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d007      	beq.n	8001a08 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0208 	bic.w	r2, r2, #8
 8001a06:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 0201 	bic.w	r2, r2, #1
 8001a16:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a18:	e013      	b.n	8001a42 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a1a:	f7ff fe7b 	bl	8001714 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b05      	cmp	r3, #5
 8001a26:	d90c      	bls.n	8001a42 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2203      	movs	r2, #3
 8001a32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e015      	b.n	8001a6e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1e4      	bne.n	8001a1a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a54:	223f      	movs	r2, #63	@ 0x3f
 8001a56:	409a      	lsls	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d004      	beq.n	8001a94 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2280      	movs	r2, #128	@ 0x80
 8001a8e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e00c      	b.n	8001aae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2205      	movs	r2, #5
 8001a98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0201 	bic.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b089      	sub	sp, #36	@ 0x24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
 8001ad6:	e16b      	b.n	8001db0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ad8:	2201      	movs	r2, #1
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	f040 815a 	bne.w	8001daa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d005      	beq.n	8001b0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d130      	bne.n	8001b70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	2203      	movs	r2, #3
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4013      	ands	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b44:	2201      	movs	r2, #1
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	091b      	lsrs	r3, r3, #4
 8001b5a:	f003 0201 	and.w	r2, r3, #1
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	d017      	beq.n	8001bac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	2203      	movs	r2, #3
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d123      	bne.n	8001c00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	08da      	lsrs	r2, r3, #3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3208      	adds	r2, #8
 8001bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	220f      	movs	r2, #15
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	691a      	ldr	r2, [r3, #16]
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	08da      	lsrs	r2, r3, #3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3208      	adds	r2, #8
 8001bfa:	69b9      	ldr	r1, [r7, #24]
 8001bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0203 	and.w	r2, r3, #3
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 80b4 	beq.w	8001daa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	4b60      	ldr	r3, [pc, #384]	@ (8001dc8 <HAL_GPIO_Init+0x30c>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4a:	4a5f      	ldr	r2, [pc, #380]	@ (8001dc8 <HAL_GPIO_Init+0x30c>)
 8001c4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c52:	4b5d      	ldr	r3, [pc, #372]	@ (8001dc8 <HAL_GPIO_Init+0x30c>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c5e:	4a5b      	ldr	r2, [pc, #364]	@ (8001dcc <HAL_GPIO_Init+0x310>)
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	089b      	lsrs	r3, r3, #2
 8001c64:	3302      	adds	r3, #2
 8001c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	220f      	movs	r2, #15
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a52      	ldr	r2, [pc, #328]	@ (8001dd0 <HAL_GPIO_Init+0x314>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d02b      	beq.n	8001ce2 <HAL_GPIO_Init+0x226>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a51      	ldr	r2, [pc, #324]	@ (8001dd4 <HAL_GPIO_Init+0x318>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d025      	beq.n	8001cde <HAL_GPIO_Init+0x222>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a50      	ldr	r2, [pc, #320]	@ (8001dd8 <HAL_GPIO_Init+0x31c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d01f      	beq.n	8001cda <HAL_GPIO_Init+0x21e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a4f      	ldr	r2, [pc, #316]	@ (8001ddc <HAL_GPIO_Init+0x320>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d019      	beq.n	8001cd6 <HAL_GPIO_Init+0x21a>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a4e      	ldr	r2, [pc, #312]	@ (8001de0 <HAL_GPIO_Init+0x324>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d013      	beq.n	8001cd2 <HAL_GPIO_Init+0x216>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a4d      	ldr	r2, [pc, #308]	@ (8001de4 <HAL_GPIO_Init+0x328>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d00d      	beq.n	8001cce <HAL_GPIO_Init+0x212>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a4c      	ldr	r2, [pc, #304]	@ (8001de8 <HAL_GPIO_Init+0x32c>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d007      	beq.n	8001cca <HAL_GPIO_Init+0x20e>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a4b      	ldr	r2, [pc, #300]	@ (8001dec <HAL_GPIO_Init+0x330>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d101      	bne.n	8001cc6 <HAL_GPIO_Init+0x20a>
 8001cc2:	2307      	movs	r3, #7
 8001cc4:	e00e      	b.n	8001ce4 <HAL_GPIO_Init+0x228>
 8001cc6:	2308      	movs	r3, #8
 8001cc8:	e00c      	b.n	8001ce4 <HAL_GPIO_Init+0x228>
 8001cca:	2306      	movs	r3, #6
 8001ccc:	e00a      	b.n	8001ce4 <HAL_GPIO_Init+0x228>
 8001cce:	2305      	movs	r3, #5
 8001cd0:	e008      	b.n	8001ce4 <HAL_GPIO_Init+0x228>
 8001cd2:	2304      	movs	r3, #4
 8001cd4:	e006      	b.n	8001ce4 <HAL_GPIO_Init+0x228>
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e004      	b.n	8001ce4 <HAL_GPIO_Init+0x228>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e002      	b.n	8001ce4 <HAL_GPIO_Init+0x228>
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <HAL_GPIO_Init+0x228>
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	69fa      	ldr	r2, [r7, #28]
 8001ce6:	f002 0203 	and.w	r2, r2, #3
 8001cea:	0092      	lsls	r2, r2, #2
 8001cec:	4093      	lsls	r3, r2
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cf4:	4935      	ldr	r1, [pc, #212]	@ (8001dcc <HAL_GPIO_Init+0x310>)
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	089b      	lsrs	r3, r3, #2
 8001cfa:	3302      	adds	r3, #2
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d02:	4b3b      	ldr	r3, [pc, #236]	@ (8001df0 <HAL_GPIO_Init+0x334>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d26:	4a32      	ldr	r2, [pc, #200]	@ (8001df0 <HAL_GPIO_Init+0x334>)
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d2c:	4b30      	ldr	r3, [pc, #192]	@ (8001df0 <HAL_GPIO_Init+0x334>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d50:	4a27      	ldr	r2, [pc, #156]	@ (8001df0 <HAL_GPIO_Init+0x334>)
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d56:	4b26      	ldr	r3, [pc, #152]	@ (8001df0 <HAL_GPIO_Init+0x334>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d7a:	4a1d      	ldr	r2, [pc, #116]	@ (8001df0 <HAL_GPIO_Init+0x334>)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d80:	4b1b      	ldr	r3, [pc, #108]	@ (8001df0 <HAL_GPIO_Init+0x334>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001da4:	4a12      	ldr	r2, [pc, #72]	@ (8001df0 <HAL_GPIO_Init+0x334>)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3301      	adds	r3, #1
 8001dae:	61fb      	str	r3, [r7, #28]
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	2b0f      	cmp	r3, #15
 8001db4:	f67f ae90 	bls.w	8001ad8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
 8001dbc:	3724      	adds	r7, #36	@ 0x24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40013800 	.word	0x40013800
 8001dd0:	40020000 	.word	0x40020000
 8001dd4:	40020400 	.word	0x40020400
 8001dd8:	40020800 	.word	0x40020800
 8001ddc:	40020c00 	.word	0x40020c00
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40021400 	.word	0x40021400
 8001de8:	40021800 	.word	0x40021800
 8001dec:	40021c00 	.word	0x40021c00
 8001df0:	40013c00 	.word	0x40013c00

08001df4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691a      	ldr	r2, [r3, #16]
 8001e04:	887b      	ldrh	r3, [r7, #2]
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	73fb      	strb	r3, [r7, #15]
 8001e10:	e001      	b.n	8001e16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e12:	2300      	movs	r3, #0
 8001e14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	807b      	strh	r3, [r7, #2]
 8001e30:	4613      	mov	r3, r2
 8001e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e34:	787b      	ldrb	r3, [r7, #1]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e3a:	887a      	ldrh	r2, [r7, #2]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e40:	e003      	b.n	8001e4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e42:	887b      	ldrh	r3, [r7, #2]
 8001e44:	041a      	lsls	r2, r3, #16
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	619a      	str	r2, [r3, #24]
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b086      	sub	sp, #24
 8001e5a:	af02      	add	r7, sp, #8
 8001e5c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e101      	b.n	800206c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d106      	bne.n	8001e88 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f006 faaa 	bl	80083dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e96:	d102      	bne.n	8001e9e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f002 fef7 	bl	8004c96 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6818      	ldr	r0, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	7c1a      	ldrb	r2, [r3, #16]
 8001eb0:	f88d 2000 	strb.w	r2, [sp]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eb8:	f002 fdd6 	bl	8004a68 <USB_CoreInit>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d005      	beq.n	8001ece <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e0ce      	b.n	800206c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f002 feef 	bl	8004cb8 <USB_SetCurrentMode>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0bf      	b.n	800206c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eec:	2300      	movs	r3, #0
 8001eee:	73fb      	strb	r3, [r7, #15]
 8001ef0:	e04a      	b.n	8001f88 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ef2:	7bfa      	ldrb	r2, [r7, #15]
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4413      	add	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	440b      	add	r3, r1
 8001f00:	3315      	adds	r3, #21
 8001f02:	2201      	movs	r2, #1
 8001f04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f06:	7bfa      	ldrb	r2, [r7, #15]
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4413      	add	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	3314      	adds	r3, #20
 8001f16:	7bfa      	ldrb	r2, [r7, #15]
 8001f18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f1a:	7bfa      	ldrb	r2, [r7, #15]
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
 8001f1e:	b298      	uxth	r0, r3
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4413      	add	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	332e      	adds	r3, #46	@ 0x2e
 8001f2e:	4602      	mov	r2, r0
 8001f30:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f32:	7bfa      	ldrb	r2, [r7, #15]
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	4413      	add	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	440b      	add	r3, r1
 8001f40:	3318      	adds	r3, #24
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f46:	7bfa      	ldrb	r2, [r7, #15]
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4413      	add	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	440b      	add	r3, r1
 8001f54:	331c      	adds	r3, #28
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f5a:	7bfa      	ldrb	r2, [r7, #15]
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	4413      	add	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	440b      	add	r3, r1
 8001f68:	3320      	adds	r3, #32
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f6e:	7bfa      	ldrb	r2, [r7, #15]
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	4413      	add	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	3324      	adds	r3, #36	@ 0x24
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	3301      	adds	r3, #1
 8001f86:	73fb      	strb	r3, [r7, #15]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	791b      	ldrb	r3, [r3, #4]
 8001f8c:	7bfa      	ldrb	r2, [r7, #15]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d3af      	bcc.n	8001ef2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f92:	2300      	movs	r3, #0
 8001f94:	73fb      	strb	r3, [r7, #15]
 8001f96:	e044      	b.n	8002022 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f98:	7bfa      	ldrb	r2, [r7, #15]
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001faa:	2200      	movs	r2, #0
 8001fac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fae:	7bfa      	ldrb	r2, [r7, #15]
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	440b      	add	r3, r1
 8001fbc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001fc0:	7bfa      	ldrb	r2, [r7, #15]
 8001fc2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fc4:	7bfa      	ldrb	r2, [r7, #15]
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4413      	add	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fda:	7bfa      	ldrb	r2, [r7, #15]
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	4413      	add	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ff0:	7bfa      	ldrb	r2, [r7, #15]
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002006:	7bfa      	ldrb	r2, [r7, #15]
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	4413      	add	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	440b      	add	r3, r1
 8002014:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800201c:	7bfb      	ldrb	r3, [r7, #15]
 800201e:	3301      	adds	r3, #1
 8002020:	73fb      	strb	r3, [r7, #15]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	791b      	ldrb	r3, [r3, #4]
 8002026:	7bfa      	ldrb	r2, [r7, #15]
 8002028:	429a      	cmp	r2, r3
 800202a:	d3b5      	bcc.n	8001f98 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6818      	ldr	r0, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	7c1a      	ldrb	r2, [r3, #16]
 8002034:	f88d 2000 	strb.w	r2, [sp]
 8002038:	3304      	adds	r3, #4
 800203a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800203c:	f002 fe88 	bl	8004d50 <USB_DevInit>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2202      	movs	r2, #2
 800204a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e00c      	b.n	800206c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f003 fed2 	bl	8005e0e <USB_DevDisconnect>

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_PCD_Start+0x1c>
 800208c:	2302      	movs	r3, #2
 800208e:	e022      	b.n	80020d6 <HAL_PCD_Start+0x62>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d009      	beq.n	80020b8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d105      	bne.n	80020b8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020b0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f002 fdd9 	bl	8004c74 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f003 fe80 	bl	8005dcc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020de:	b590      	push	{r4, r7, lr}
 80020e0:	b08d      	sub	sp, #52	@ 0x34
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020ec:	6a3b      	ldr	r3, [r7, #32]
 80020ee:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f003 ff3e 	bl	8005f76 <USB_GetMode>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f040 848c 	bne.w	8002a1a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f003 fea2 	bl	8005e50 <USB_ReadInterrupts>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 8482 	beq.w	8002a18 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	0a1b      	lsrs	r3, r3, #8
 800211e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f003 fe8f 	bl	8005e50 <USB_ReadInterrupts>
 8002132:	4603      	mov	r3, r0
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b02      	cmp	r3, #2
 800213a:	d107      	bne.n	800214c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	695a      	ldr	r2, [r3, #20]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f002 0202 	and.w	r2, r2, #2
 800214a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f003 fe7d 	bl	8005e50 <USB_ReadInterrupts>
 8002156:	4603      	mov	r3, r0
 8002158:	f003 0310 	and.w	r3, r3, #16
 800215c:	2b10      	cmp	r3, #16
 800215e:	d161      	bne.n	8002224 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	699a      	ldr	r2, [r3, #24]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0210 	bic.w	r2, r2, #16
 800216e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	f003 020f 	and.w	r2, r3, #15
 800217c:	4613      	mov	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4413      	add	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	4413      	add	r3, r2
 800218c:	3304      	adds	r3, #4
 800218e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	0c5b      	lsrs	r3, r3, #17
 8002194:	f003 030f 	and.w	r3, r3, #15
 8002198:	2b02      	cmp	r3, #2
 800219a:	d124      	bne.n	80021e6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d035      	beq.n	8002214 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	091b      	lsrs	r3, r3, #4
 80021b0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	461a      	mov	r2, r3
 80021ba:	6a38      	ldr	r0, [r7, #32]
 80021bc:	f003 fcb4 	bl	8005b28 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	091b      	lsrs	r3, r3, #4
 80021c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021cc:	441a      	add	r2, r3
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	695a      	ldr	r2, [r3, #20]
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021de:	441a      	add	r2, r3
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	615a      	str	r2, [r3, #20]
 80021e4:	e016      	b.n	8002214 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	0c5b      	lsrs	r3, r3, #17
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	2b06      	cmp	r3, #6
 80021f0:	d110      	bne.n	8002214 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80021f8:	2208      	movs	r2, #8
 80021fa:	4619      	mov	r1, r3
 80021fc:	6a38      	ldr	r0, [r7, #32]
 80021fe:	f003 fc93 	bl	8005b28 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	695a      	ldr	r2, [r3, #20]
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800220e:	441a      	add	r2, r3
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	699a      	ldr	r2, [r3, #24]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0210 	orr.w	r2, r2, #16
 8002222:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f003 fe11 	bl	8005e50 <USB_ReadInterrupts>
 800222e:	4603      	mov	r3, r0
 8002230:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002234:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002238:	f040 80a7 	bne.w	800238a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800223c:	2300      	movs	r3, #0
 800223e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f003 fe16 	bl	8005e76 <USB_ReadDevAllOutEpInterrupt>
 800224a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800224c:	e099      	b.n	8002382 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800224e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 808e 	beq.w	8002376 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	4611      	mov	r1, r2
 8002264:	4618      	mov	r0, r3
 8002266:	f003 fe3a 	bl	8005ede <USB_ReadDevOutEPInterrupt>
 800226a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00c      	beq.n	8002290 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	4413      	add	r3, r2
 800227e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002282:	461a      	mov	r2, r3
 8002284:	2301      	movs	r3, #1
 8002286:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002288:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 fea4 	bl	8002fd8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00c      	beq.n	80022b4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800229a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229c:	015a      	lsls	r2, r3, #5
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022a6:	461a      	mov	r2, r3
 80022a8:	2308      	movs	r3, #8
 80022aa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80022ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 ff7a 	bl	80031a8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	f003 0310 	and.w	r3, r3, #16
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d008      	beq.n	80022d0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80022be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022ca:	461a      	mov	r2, r3
 80022cc:	2310      	movs	r3, #16
 80022ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d030      	beq.n	800233c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022e2:	2b80      	cmp	r3, #128	@ 0x80
 80022e4:	d109      	bne.n	80022fa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	69fa      	ldr	r2, [r7, #28]
 80022f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022f8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80022fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022fc:	4613      	mov	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	4413      	add	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	4413      	add	r3, r2
 800230c:	3304      	adds	r3, #4
 800230e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	78db      	ldrb	r3, [r3, #3]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d108      	bne.n	800232a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	2200      	movs	r2, #0
 800231c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800231e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002320:	b2db      	uxtb	r3, r3
 8002322:	4619      	mov	r1, r3
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f006 f95f 	bl	80085e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800232a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232c:	015a      	lsls	r2, r3, #5
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	4413      	add	r3, r2
 8002332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002336:	461a      	mov	r2, r3
 8002338:	2302      	movs	r3, #2
 800233a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	f003 0320 	and.w	r3, r3, #32
 8002342:	2b00      	cmp	r3, #0
 8002344:	d008      	beq.n	8002358 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002348:	015a      	lsls	r2, r3, #5
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	4413      	add	r3, r2
 800234e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002352:	461a      	mov	r2, r3
 8002354:	2320      	movs	r3, #32
 8002356:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d009      	beq.n	8002376 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	4413      	add	r3, r2
 800236a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800236e:	461a      	mov	r2, r3
 8002370:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002374:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002378:	3301      	adds	r3, #1
 800237a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800237c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800237e:	085b      	lsrs	r3, r3, #1
 8002380:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002384:	2b00      	cmp	r3, #0
 8002386:	f47f af62 	bne.w	800224e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f003 fd5e 	bl	8005e50 <USB_ReadInterrupts>
 8002394:	4603      	mov	r3, r0
 8002396:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800239a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800239e:	f040 80db 	bne.w	8002558 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f003 fd7f 	bl	8005eaa <USB_ReadDevAllInEpInterrupt>
 80023ac:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80023b2:	e0cd      	b.n	8002550 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80023b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 80c2 	beq.w	8002544 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	4611      	mov	r1, r2
 80023ca:	4618      	mov	r0, r3
 80023cc:	f003 fda5 	bl	8005f1a <USB_ReadDevInEPInterrupt>
 80023d0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d057      	beq.n	800248c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	2201      	movs	r2, #1
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69f9      	ldr	r1, [r7, #28]
 80023f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80023fc:	4013      	ands	r3, r2
 80023fe:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002402:	015a      	lsls	r2, r3, #5
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	4413      	add	r3, r2
 8002408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800240c:	461a      	mov	r2, r3
 800240e:	2301      	movs	r3, #1
 8002410:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	799b      	ldrb	r3, [r3, #6]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d132      	bne.n	8002480 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800241e:	4613      	mov	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	4413      	add	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	440b      	add	r3, r1
 8002428:	3320      	adds	r3, #32
 800242a:	6819      	ldr	r1, [r3, #0]
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002430:	4613      	mov	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	4413      	add	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4403      	add	r3, r0
 800243a:	331c      	adds	r3, #28
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4419      	add	r1, r3
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002444:	4613      	mov	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4413      	add	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4403      	add	r3, r0
 800244e:	3320      	adds	r3, #32
 8002450:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002454:	2b00      	cmp	r3, #0
 8002456:	d113      	bne.n	8002480 <HAL_PCD_IRQHandler+0x3a2>
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800245c:	4613      	mov	r3, r2
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	4413      	add	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	3324      	adds	r3, #36	@ 0x24
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d108      	bne.n	8002480 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002478:	461a      	mov	r2, r3
 800247a:	2101      	movs	r1, #1
 800247c:	f003 fdac 	bl	8005fd8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002482:	b2db      	uxtb	r3, r3
 8002484:	4619      	mov	r1, r3
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f006 f829 	bl	80084de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d008      	beq.n	80024a8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002498:	015a      	lsls	r2, r3, #5
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	4413      	add	r3, r2
 800249e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80024a2:	461a      	mov	r2, r3
 80024a4:	2308      	movs	r3, #8
 80024a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	f003 0310 	and.w	r3, r3, #16
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d008      	beq.n	80024c4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80024b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b4:	015a      	lsls	r2, r3, #5
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	4413      	add	r3, r2
 80024ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80024be:	461a      	mov	r2, r3
 80024c0:	2310      	movs	r3, #16
 80024c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d008      	beq.n	80024e0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80024ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d0:	015a      	lsls	r2, r3, #5
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80024da:	461a      	mov	r2, r3
 80024dc:	2340      	movs	r3, #64	@ 0x40
 80024de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d023      	beq.n	8002532 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80024ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80024ec:	6a38      	ldr	r0, [r7, #32]
 80024ee:	f002 fd93 	bl	8005018 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80024f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024f4:	4613      	mov	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	4413      	add	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	3310      	adds	r3, #16
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	4413      	add	r3, r2
 8002502:	3304      	adds	r3, #4
 8002504:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	78db      	ldrb	r3, [r3, #3]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d108      	bne.n	8002520 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2200      	movs	r2, #0
 8002512:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002516:	b2db      	uxtb	r3, r3
 8002518:	4619      	mov	r1, r3
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f006 f876 	bl	800860c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002522:	015a      	lsls	r2, r3, #5
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	4413      	add	r3, r2
 8002528:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800252c:	461a      	mov	r2, r3
 800252e:	2302      	movs	r3, #2
 8002530:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800253c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 fcbd 	bl	8002ebe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002546:	3301      	adds	r3, #1
 8002548:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800254a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800254c:	085b      	lsrs	r3, r3, #1
 800254e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002552:	2b00      	cmp	r3, #0
 8002554:	f47f af2e 	bne.w	80023b4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f003 fc77 	bl	8005e50 <USB_ReadInterrupts>
 8002562:	4603      	mov	r3, r0
 8002564:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002568:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800256c:	d122      	bne.n	80025b4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	69fa      	ldr	r2, [r7, #28]
 8002578:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800257c:	f023 0301 	bic.w	r3, r3, #1
 8002580:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002588:	2b01      	cmp	r3, #1
 800258a:	d108      	bne.n	800259e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002594:	2100      	movs	r1, #0
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 fea4 	bl	80032e4 <HAL_PCDEx_LPM_Callback>
 800259c:	e002      	b.n	80025a4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f006 f814 	bl	80085cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695a      	ldr	r2, [r3, #20]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80025b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f003 fc49 	bl	8005e50 <USB_ReadInterrupts>
 80025be:	4603      	mov	r3, r0
 80025c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80025c8:	d112      	bne.n	80025f0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d102      	bne.n	80025e0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f005 ffd0 	bl	8008580 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	695a      	ldr	r2, [r3, #20]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80025ee:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f003 fc2b 	bl	8005e50 <USB_ReadInterrupts>
 80025fa:	4603      	mov	r3, r0
 80025fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002600:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002604:	f040 80b7 	bne.w	8002776 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	69fa      	ldr	r2, [r7, #28]
 8002612:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002616:	f023 0301 	bic.w	r3, r3, #1
 800261a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2110      	movs	r1, #16
 8002622:	4618      	mov	r0, r3
 8002624:	f002 fcf8 	bl	8005018 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002628:	2300      	movs	r3, #0
 800262a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800262c:	e046      	b.n	80026bc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800262e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	4413      	add	r3, r2
 8002636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800263a:	461a      	mov	r2, r3
 800263c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002640:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	4413      	add	r3, r2
 800264a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002652:	0151      	lsls	r1, r2, #5
 8002654:	69fa      	ldr	r2, [r7, #28]
 8002656:	440a      	add	r2, r1
 8002658:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800265c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002660:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002664:	015a      	lsls	r2, r3, #5
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	4413      	add	r3, r2
 800266a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800266e:	461a      	mov	r2, r3
 8002670:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002674:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	4413      	add	r3, r2
 800267e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002686:	0151      	lsls	r1, r2, #5
 8002688:	69fa      	ldr	r2, [r7, #28]
 800268a:	440a      	add	r2, r1
 800268c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002690:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002694:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002698:	015a      	lsls	r2, r3, #5
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	4413      	add	r3, r2
 800269e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026a6:	0151      	lsls	r1, r2, #5
 80026a8:	69fa      	ldr	r2, [r7, #28]
 80026aa:	440a      	add	r2, r1
 80026ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80026b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80026b4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026b8:	3301      	adds	r3, #1
 80026ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	791b      	ldrb	r3, [r3, #4]
 80026c0:	461a      	mov	r2, r3
 80026c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d3b2      	bcc.n	800262e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026d6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80026da:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	7bdb      	ldrb	r3, [r3, #15]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d016      	beq.n	8002712 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026ee:	69fa      	ldr	r2, [r7, #28]
 80026f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026f4:	f043 030b 	orr.w	r3, r3, #11
 80026f8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002704:	69fa      	ldr	r2, [r7, #28]
 8002706:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800270a:	f043 030b 	orr.w	r3, r3, #11
 800270e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002710:	e015      	b.n	800273e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	69fa      	ldr	r2, [r7, #28]
 800271c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002720:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002724:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002728:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002738:	f043 030b 	orr.w	r3, r3, #11
 800273c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	69fa      	ldr	r2, [r7, #28]
 8002748:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800274c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002750:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002760:	461a      	mov	r2, r3
 8002762:	f003 fc39 	bl	8005fd8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695a      	ldr	r2, [r3, #20]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002774:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f003 fb68 	bl	8005e50 <USB_ReadInterrupts>
 8002780:	4603      	mov	r3, r0
 8002782:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002786:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800278a:	d123      	bne.n	80027d4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f003 fbfe 	bl	8005f92 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f002 fcb5 	bl	800510a <USB_GetDevSpeed>
 80027a0:	4603      	mov	r3, r0
 80027a2:	461a      	mov	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681c      	ldr	r4, [r3, #0]
 80027ac:	f001 fa0a 	bl	8003bc4 <HAL_RCC_GetHCLKFreq>
 80027b0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027b6:	461a      	mov	r2, r3
 80027b8:	4620      	mov	r0, r4
 80027ba:	f002 f9b9 	bl	8004b30 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f005 feb5 	bl	800852e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695a      	ldr	r2, [r3, #20]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80027d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f003 fb39 	bl	8005e50 <USB_ReadInterrupts>
 80027de:	4603      	mov	r3, r0
 80027e0:	f003 0308 	and.w	r3, r3, #8
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d10a      	bne.n	80027fe <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f005 fe92 	bl	8008512 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695a      	ldr	r2, [r3, #20]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f002 0208 	and.w	r2, r2, #8
 80027fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f003 fb24 	bl	8005e50 <USB_ReadInterrupts>
 8002808:	4603      	mov	r3, r0
 800280a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800280e:	2b80      	cmp	r3, #128	@ 0x80
 8002810:	d123      	bne.n	800285a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002812:	6a3b      	ldr	r3, [r7, #32]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800281e:	2301      	movs	r3, #1
 8002820:	627b      	str	r3, [r7, #36]	@ 0x24
 8002822:	e014      	b.n	800284e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002828:	4613      	mov	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	4413      	add	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d105      	bne.n	8002848 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800283c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283e:	b2db      	uxtb	r3, r3
 8002840:	4619      	mov	r1, r3
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 fb0a 	bl	8002e5c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284a:	3301      	adds	r3, #1
 800284c:	627b      	str	r3, [r7, #36]	@ 0x24
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	791b      	ldrb	r3, [r3, #4]
 8002852:	461a      	mov	r2, r3
 8002854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002856:	4293      	cmp	r3, r2
 8002858:	d3e4      	bcc.n	8002824 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f003 faf6 	bl	8005e50 <USB_ReadInterrupts>
 8002864:	4603      	mov	r3, r0
 8002866:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800286a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800286e:	d13c      	bne.n	80028ea <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002870:	2301      	movs	r3, #1
 8002872:	627b      	str	r3, [r7, #36]	@ 0x24
 8002874:	e02b      	b.n	80028ce <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002878:	015a      	lsls	r2, r3, #5
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	4413      	add	r3, r2
 800287e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800288a:	4613      	mov	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	4413      	add	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	440b      	add	r3, r1
 8002894:	3318      	adds	r3, #24
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d115      	bne.n	80028c8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800289c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800289e:	2b00      	cmp	r3, #0
 80028a0:	da12      	bge.n	80028c8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028a6:	4613      	mov	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	4413      	add	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	440b      	add	r3, r1
 80028b0:	3317      	adds	r3, #23
 80028b2:	2201      	movs	r2, #1
 80028b4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80028b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	4619      	mov	r1, r3
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 faca 	bl	8002e5c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ca:	3301      	adds	r3, #1
 80028cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	791b      	ldrb	r3, [r3, #4]
 80028d2:	461a      	mov	r2, r3
 80028d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d3cd      	bcc.n	8002876 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695a      	ldr	r2, [r3, #20]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80028e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f003 faae 	bl	8005e50 <USB_ReadInterrupts>
 80028f4:	4603      	mov	r3, r0
 80028f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80028fe:	d156      	bne.n	80029ae <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002900:	2301      	movs	r3, #1
 8002902:	627b      	str	r3, [r7, #36]	@ 0x24
 8002904:	e045      	b.n	8002992 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	015a      	lsls	r2, r3, #5
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	4413      	add	r3, r2
 800290e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800291a:	4613      	mov	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4413      	add	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d12e      	bne.n	800298c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800292e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002930:	2b00      	cmp	r3, #0
 8002932:	da2b      	bge.n	800298c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002940:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002944:	429a      	cmp	r2, r3
 8002946:	d121      	bne.n	800298c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800294c:	4613      	mov	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800295a:	2201      	movs	r2, #1
 800295c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10a      	bne.n	800298c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	69fa      	ldr	r2, [r7, #28]
 8002980:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002984:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002988:	6053      	str	r3, [r2, #4]
            break;
 800298a:	e008      	b.n	800299e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800298c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298e:	3301      	adds	r3, #1
 8002990:	627b      	str	r3, [r7, #36]	@ 0x24
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	791b      	ldrb	r3, [r3, #4]
 8002996:	461a      	mov	r2, r3
 8002998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299a:	4293      	cmp	r3, r2
 800299c:	d3b3      	bcc.n	8002906 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695a      	ldr	r2, [r3, #20]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80029ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f003 fa4c 	bl	8005e50 <USB_ReadInterrupts>
 80029b8:	4603      	mov	r3, r0
 80029ba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80029be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029c2:	d10a      	bne.n	80029da <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f005 fe33 	bl	8008630 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695a      	ldr	r2, [r3, #20]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80029d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f003 fa36 	bl	8005e50 <USB_ReadInterrupts>
 80029e4:	4603      	mov	r3, r0
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d115      	bne.n	8002a1a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d002      	beq.n	8002a06 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f005 fe23 	bl	800864c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6859      	ldr	r1, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	e000      	b.n	8002a1a <HAL_PCD_IRQHandler+0x93c>
      return;
 8002a18:	bf00      	nop
    }
  }
}
 8002a1a:	3734      	adds	r7, #52	@ 0x34
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd90      	pop	{r4, r7, pc}

08002a20 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_PCD_SetAddress+0x1a>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e012      	b.n	8002a60 <HAL_PCD_SetAddress+0x40>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	78fa      	ldrb	r2, [r7, #3]
 8002a46:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	78fa      	ldrb	r2, [r7, #3]
 8002a4e:	4611      	mov	r1, r2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f003 f995 	bl	8005d80 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	4608      	mov	r0, r1
 8002a72:	4611      	mov	r1, r2
 8002a74:	461a      	mov	r2, r3
 8002a76:	4603      	mov	r3, r0
 8002a78:	70fb      	strb	r3, [r7, #3]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	803b      	strh	r3, [r7, #0]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002a82:	2300      	movs	r3, #0
 8002a84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	da0f      	bge.n	8002aae <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a8e:	78fb      	ldrb	r3, [r7, #3]
 8002a90:	f003 020f 	and.w	r2, r3, #15
 8002a94:	4613      	mov	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	3310      	adds	r3, #16
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	705a      	strb	r2, [r3, #1]
 8002aac:	e00f      	b.n	8002ace <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aae:	78fb      	ldrb	r3, [r7, #3]
 8002ab0:	f003 020f 	and.w	r2, r3, #15
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	4413      	add	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ace:	78fb      	ldrb	r3, [r7, #3]
 8002ad0:	f003 030f 	and.w	r3, r3, #15
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002ada:	883b      	ldrh	r3, [r7, #0]
 8002adc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	78ba      	ldrb	r2, [r7, #2]
 8002ae8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	785b      	ldrb	r3, [r3, #1]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d004      	beq.n	8002afc <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	461a      	mov	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002afc:	78bb      	ldrb	r3, [r7, #2]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d102      	bne.n	8002b08 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d101      	bne.n	8002b16 <HAL_PCD_EP_Open+0xae>
 8002b12:	2302      	movs	r3, #2
 8002b14:	e00e      	b.n	8002b34 <HAL_PCD_EP_Open+0xcc>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68f9      	ldr	r1, [r7, #12]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f002 fb15 	bl	8005154 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002b32:	7afb      	ldrb	r3, [r7, #11]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	da0f      	bge.n	8002b70 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	f003 020f 	and.w	r2, r3, #15
 8002b56:	4613      	mov	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	3310      	adds	r3, #16
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	4413      	add	r3, r2
 8002b64:	3304      	adds	r3, #4
 8002b66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	705a      	strb	r2, [r3, #1]
 8002b6e:	e00f      	b.n	8002b90 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b70:	78fb      	ldrb	r3, [r7, #3]
 8002b72:	f003 020f 	and.w	r2, r3, #15
 8002b76:	4613      	mov	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	4413      	add	r3, r2
 8002b86:	3304      	adds	r3, #4
 8002b88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b90:	78fb      	ldrb	r3, [r7, #3]
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_PCD_EP_Close+0x6e>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e00e      	b.n	8002bc8 <HAL_PCD_EP_Close+0x8c>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68f9      	ldr	r1, [r7, #12]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f002 fb53 	bl	8005264 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	607a      	str	r2, [r7, #4]
 8002bda:	603b      	str	r3, [r7, #0]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002be0:	7afb      	ldrb	r3, [r7, #11]
 8002be2:	f003 020f 	and.w	r2, r3, #15
 8002be6:	4613      	mov	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	4413      	add	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3304      	adds	r3, #4
 8002bf8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c12:	7afb      	ldrb	r3, [r7, #11]
 8002c14:	f003 030f 	and.w	r3, r3, #15
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	799b      	ldrb	r3, [r3, #6]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d102      	bne.n	8002c2c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6818      	ldr	r0, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	799b      	ldrb	r3, [r3, #6]
 8002c34:	461a      	mov	r2, r3
 8002c36:	6979      	ldr	r1, [r7, #20]
 8002c38:	f002 fbf0 	bl	800541c <USB_EPStartXfer>

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	460b      	mov	r3, r1
 8002c50:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c52:	78fb      	ldrb	r3, [r7, #3]
 8002c54:	f003 020f 	and.w	r2, r3, #15
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002c68:	681b      	ldr	r3, [r3, #0]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b086      	sub	sp, #24
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	60f8      	str	r0, [r7, #12]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	603b      	str	r3, [r7, #0]
 8002c82:	460b      	mov	r3, r1
 8002c84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c86:	7afb      	ldrb	r3, [r7, #11]
 8002c88:	f003 020f 	and.w	r2, r3, #15
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4413      	add	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	3310      	adds	r3, #16
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4413      	add	r3, r2
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2200      	movs	r2, #0
 8002cae:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cb6:	7afb      	ldrb	r3, [r7, #11]
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	799b      	ldrb	r3, [r3, #6]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d102      	bne.n	8002cd0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6818      	ldr	r0, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	799b      	ldrb	r3, [r3, #6]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	6979      	ldr	r1, [r7, #20]
 8002cdc:	f002 fb9e 	bl	800541c <USB_EPStartXfer>

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b084      	sub	sp, #16
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002cf6:	78fb      	ldrb	r3, [r7, #3]
 8002cf8:	f003 030f 	and.w	r3, r3, #15
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	7912      	ldrb	r2, [r2, #4]
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d901      	bls.n	8002d08 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e04f      	b.n	8002da8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	da0f      	bge.n	8002d30 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d10:	78fb      	ldrb	r3, [r7, #3]
 8002d12:	f003 020f 	and.w	r2, r3, #15
 8002d16:	4613      	mov	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	3310      	adds	r3, #16
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	4413      	add	r3, r2
 8002d24:	3304      	adds	r3, #4
 8002d26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	705a      	strb	r2, [r3, #1]
 8002d2e:	e00d      	b.n	8002d4c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d30:	78fa      	ldrb	r2, [r7, #3]
 8002d32:	4613      	mov	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	4413      	add	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	4413      	add	r3, r2
 8002d42:	3304      	adds	r3, #4
 8002d44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d52:	78fb      	ldrb	r3, [r7, #3]
 8002d54:	f003 030f 	and.w	r3, r3, #15
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <HAL_PCD_EP_SetStall+0x82>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	e01d      	b.n	8002da8 <HAL_PCD_EP_SetStall+0xbe>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68f9      	ldr	r1, [r7, #12]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f002 ff2c 	bl	8005bd8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d80:	78fb      	ldrb	r3, [r7, #3]
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d109      	bne.n	8002d9e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	7999      	ldrb	r1, [r3, #6]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d98:	461a      	mov	r2, r3
 8002d9a:	f003 f91d 	bl	8005fd8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	460b      	mov	r3, r1
 8002dba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002dbc:	78fb      	ldrb	r3, [r7, #3]
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	7912      	ldrb	r2, [r2, #4]
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d901      	bls.n	8002dce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e042      	b.n	8002e54 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	da0f      	bge.n	8002df6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dd6:	78fb      	ldrb	r3, [r7, #3]
 8002dd8:	f003 020f 	and.w	r2, r3, #15
 8002ddc:	4613      	mov	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	3310      	adds	r3, #16
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	4413      	add	r3, r2
 8002dea:	3304      	adds	r3, #4
 8002dec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2201      	movs	r2, #1
 8002df2:	705a      	strb	r2, [r3, #1]
 8002df4:	e00f      	b.n	8002e16 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002df6:	78fb      	ldrb	r3, [r7, #3]
 8002df8:	f003 020f 	and.w	r2, r3, #15
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4413      	add	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_PCD_EP_ClrStall+0x86>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e00e      	b.n	8002e54 <HAL_PCD_EP_ClrStall+0xa4>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68f9      	ldr	r1, [r7, #12]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f002 ff35 	bl	8005cb4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002e68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	da0c      	bge.n	8002e8a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e70:	78fb      	ldrb	r3, [r7, #3]
 8002e72:	f003 020f 	and.w	r2, r3, #15
 8002e76:	4613      	mov	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	3310      	adds	r3, #16
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	4413      	add	r3, r2
 8002e84:	3304      	adds	r3, #4
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	e00c      	b.n	8002ea4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e8a:	78fb      	ldrb	r3, [r7, #3]
 8002e8c:	f003 020f 	and.w	r2, r3, #15
 8002e90:	4613      	mov	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68f9      	ldr	r1, [r7, #12]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f002 fd54 	bl	8005958 <USB_EPStopXfer>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002eb4:	7afb      	ldrb	r3, [r7, #11]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b08a      	sub	sp, #40	@ 0x28
 8002ec2:	af02      	add	r7, sp, #8
 8002ec4:	6078      	str	r0, [r7, #4]
 8002ec6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	4413      	add	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	3310      	adds	r3, #16
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	695a      	ldr	r2, [r3, #20]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d901      	bls.n	8002ef6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e06b      	b.n	8002fce <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	691a      	ldr	r2, [r3, #16]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	69fa      	ldr	r2, [r7, #28]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d902      	bls.n	8002f12 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	3303      	adds	r3, #3
 8002f16:	089b      	lsrs	r3, r3, #2
 8002f18:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f1a:	e02a      	b.n	8002f72 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	691a      	ldr	r2, [r3, #16]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	69fa      	ldr	r2, [r7, #28]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d902      	bls.n	8002f38 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	3303      	adds	r3, #3
 8002f3c:	089b      	lsrs	r3, r3, #2
 8002f3e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	68d9      	ldr	r1, [r3, #12]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	4603      	mov	r3, r0
 8002f54:	6978      	ldr	r0, [r7, #20]
 8002f56:	f002 fda9 	bl	8005aac <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	441a      	add	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	695a      	ldr	r2, [r3, #20]
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	441a      	add	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d809      	bhi.n	8002f9c <PCD_WriteEmptyTxFifo+0xde>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	695a      	ldr	r2, [r3, #20]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d203      	bcs.n	8002f9c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1bf      	bne.n	8002f1c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d811      	bhi.n	8002fcc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	2201      	movs	r2, #1
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	6939      	ldr	r1, [r7, #16]
 8002fc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002fc8:	4013      	ands	r3, r2
 8002fca:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3720      	adds	r7, #32
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b088      	sub	sp, #32
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	333c      	adds	r3, #60	@ 0x3c
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	015a      	lsls	r2, r3, #5
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	799b      	ldrb	r3, [r3, #6]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d17b      	bne.n	8003106 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b00      	cmp	r3, #0
 8003016:	d015      	beq.n	8003044 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	4a61      	ldr	r2, [pc, #388]	@ (80031a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800301c:	4293      	cmp	r3, r2
 800301e:	f240 80b9 	bls.w	8003194 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 80b3 	beq.w	8003194 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	4413      	add	r3, r2
 8003036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800303a:	461a      	mov	r2, r3
 800303c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003040:	6093      	str	r3, [r2, #8]
 8003042:	e0a7      	b.n	8003194 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	f003 0320 	and.w	r3, r3, #32
 800304a:	2b00      	cmp	r3, #0
 800304c:	d009      	beq.n	8003062 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	4413      	add	r3, r2
 8003056:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800305a:	461a      	mov	r2, r3
 800305c:	2320      	movs	r3, #32
 800305e:	6093      	str	r3, [r2, #8]
 8003060:	e098      	b.n	8003194 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003068:	2b00      	cmp	r3, #0
 800306a:	f040 8093 	bne.w	8003194 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	4a4b      	ldr	r2, [pc, #300]	@ (80031a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d90f      	bls.n	8003096 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00a      	beq.n	8003096 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	015a      	lsls	r2, r3, #5
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	4413      	add	r3, r2
 8003088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800308c:	461a      	mov	r2, r3
 800308e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003092:	6093      	str	r3, [r2, #8]
 8003094:	e07e      	b.n	8003194 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	4613      	mov	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	4413      	add	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	4413      	add	r3, r2
 80030a8:	3304      	adds	r3, #4
 80030aa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a1a      	ldr	r2, [r3, #32]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	0159      	lsls	r1, r3, #5
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	440b      	add	r3, r1
 80030b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c2:	1ad2      	subs	r2, r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d114      	bne.n	80030f8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d109      	bne.n	80030ea <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80030e0:	461a      	mov	r2, r3
 80030e2:	2101      	movs	r1, #1
 80030e4:	f002 ff78 	bl	8005fd8 <USB_EP0_OutStart>
 80030e8:	e006      	b.n	80030f8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	441a      	add	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	4619      	mov	r1, r3
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f005 f9d2 	bl	80084a8 <HAL_PCD_DataOutStageCallback>
 8003104:	e046      	b.n	8003194 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	4a26      	ldr	r2, [pc, #152]	@ (80031a4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d124      	bne.n	8003158 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	015a      	lsls	r2, r3, #5
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	4413      	add	r3, r2
 8003120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003124:	461a      	mov	r2, r3
 8003126:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800312a:	6093      	str	r3, [r2, #8]
 800312c:	e032      	b.n	8003194 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f003 0320 	and.w	r3, r3, #32
 8003134:	2b00      	cmp	r3, #0
 8003136:	d008      	beq.n	800314a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	4413      	add	r3, r2
 8003140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003144:	461a      	mov	r2, r3
 8003146:	2320      	movs	r3, #32
 8003148:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	b2db      	uxtb	r3, r3
 800314e:	4619      	mov	r1, r3
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f005 f9a9 	bl	80084a8 <HAL_PCD_DataOutStageCallback>
 8003156:	e01d      	b.n	8003194 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d114      	bne.n	8003188 <PCD_EP_OutXfrComplete_int+0x1b0>
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	4613      	mov	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	4413      	add	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d108      	bne.n	8003188 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6818      	ldr	r0, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003180:	461a      	mov	r2, r3
 8003182:	2100      	movs	r1, #0
 8003184:	f002 ff28 	bl	8005fd8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	b2db      	uxtb	r3, r3
 800318c:	4619      	mov	r1, r3
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f005 f98a 	bl	80084a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3720      	adds	r7, #32
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	4f54300a 	.word	0x4f54300a
 80031a4:	4f54310a 	.word	0x4f54310a

080031a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	333c      	adds	r3, #60	@ 0x3c
 80031c0:	3304      	adds	r3, #4
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	015a      	lsls	r2, r3, #5
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	4413      	add	r3, r2
 80031ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4a15      	ldr	r2, [pc, #84]	@ (8003230 <PCD_EP_OutSetupPacket_int+0x88>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d90e      	bls.n	80031fc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d009      	beq.n	80031fc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	015a      	lsls	r2, r3, #5
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4413      	add	r3, r2
 80031f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031f4:	461a      	mov	r2, r3
 80031f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031fa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f005 f941 	bl	8008484 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4a0a      	ldr	r2, [pc, #40]	@ (8003230 <PCD_EP_OutSetupPacket_int+0x88>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d90c      	bls.n	8003224 <PCD_EP_OutSetupPacket_int+0x7c>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	799b      	ldrb	r3, [r3, #6]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d108      	bne.n	8003224 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6818      	ldr	r0, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800321c:	461a      	mov	r2, r3
 800321e:	2101      	movs	r1, #1
 8003220:	f002 feda 	bl	8005fd8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	4f54300a 	.word	0x4f54300a

08003234 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	70fb      	strb	r3, [r7, #3]
 8003240:	4613      	mov	r3, r2
 8003242:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800324c:	78fb      	ldrb	r3, [r7, #3]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d107      	bne.n	8003262 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003252:	883b      	ldrh	r3, [r7, #0]
 8003254:	0419      	lsls	r1, r3, #16
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	430a      	orrs	r2, r1
 800325e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003260:	e028      	b.n	80032b4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003268:	0c1b      	lsrs	r3, r3, #16
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	4413      	add	r3, r2
 800326e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003270:	2300      	movs	r3, #0
 8003272:	73fb      	strb	r3, [r7, #15]
 8003274:	e00d      	b.n	8003292 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	3340      	adds	r3, #64	@ 0x40
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	0c1b      	lsrs	r3, r3, #16
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	4413      	add	r3, r2
 800328a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800328c:	7bfb      	ldrb	r3, [r7, #15]
 800328e:	3301      	adds	r3, #1
 8003290:	73fb      	strb	r3, [r7, #15]
 8003292:	7bfa      	ldrb	r2, [r7, #15]
 8003294:	78fb      	ldrb	r3, [r7, #3]
 8003296:	3b01      	subs	r3, #1
 8003298:	429a      	cmp	r2, r3
 800329a:	d3ec      	bcc.n	8003276 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800329c:	883b      	ldrh	r3, [r7, #0]
 800329e:	0418      	lsls	r0, r3, #16
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6819      	ldr	r1, [r3, #0]
 80032a4:	78fb      	ldrb	r3, [r7, #3]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	4302      	orrs	r2, r0
 80032ac:	3340      	adds	r3, #64	@ 0x40
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	460b      	mov	r3, r1
 80032cc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	887a      	ldrh	r2, [r7, #2]
 80032d4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e267      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d075      	beq.n	8003406 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800331a:	4b88      	ldr	r3, [pc, #544]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 030c 	and.w	r3, r3, #12
 8003322:	2b04      	cmp	r3, #4
 8003324:	d00c      	beq.n	8003340 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003326:	4b85      	ldr	r3, [pc, #532]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800332e:	2b08      	cmp	r3, #8
 8003330:	d112      	bne.n	8003358 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003332:	4b82      	ldr	r3, [pc, #520]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800333a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800333e:	d10b      	bne.n	8003358 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003340:	4b7e      	ldr	r3, [pc, #504]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d05b      	beq.n	8003404 <HAL_RCC_OscConfig+0x108>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d157      	bne.n	8003404 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e242      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003360:	d106      	bne.n	8003370 <HAL_RCC_OscConfig+0x74>
 8003362:	4b76      	ldr	r3, [pc, #472]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a75      	ldr	r2, [pc, #468]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 8003368:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	e01d      	b.n	80033ac <HAL_RCC_OscConfig+0xb0>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003378:	d10c      	bne.n	8003394 <HAL_RCC_OscConfig+0x98>
 800337a:	4b70      	ldr	r3, [pc, #448]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a6f      	ldr	r2, [pc, #444]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 8003380:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	4b6d      	ldr	r3, [pc, #436]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a6c      	ldr	r2, [pc, #432]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 800338c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	e00b      	b.n	80033ac <HAL_RCC_OscConfig+0xb0>
 8003394:	4b69      	ldr	r3, [pc, #420]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a68      	ldr	r2, [pc, #416]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 800339a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	4b66      	ldr	r3, [pc, #408]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a65      	ldr	r2, [pc, #404]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 80033a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d013      	beq.n	80033dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b4:	f7fe f9ae 	bl	8001714 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033bc:	f7fe f9aa 	bl	8001714 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b64      	cmp	r3, #100	@ 0x64
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e207      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ce:	4b5b      	ldr	r3, [pc, #364]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCC_OscConfig+0xc0>
 80033da:	e014      	b.n	8003406 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033dc:	f7fe f99a 	bl	8001714 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e4:	f7fe f996 	bl	8001714 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b64      	cmp	r3, #100	@ 0x64
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e1f3      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f6:	4b51      	ldr	r3, [pc, #324]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f0      	bne.n	80033e4 <HAL_RCC_OscConfig+0xe8>
 8003402:	e000      	b.n	8003406 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d063      	beq.n	80034da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003412:	4b4a      	ldr	r3, [pc, #296]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 030c 	and.w	r3, r3, #12
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00b      	beq.n	8003436 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800341e:	4b47      	ldr	r3, [pc, #284]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003426:	2b08      	cmp	r3, #8
 8003428:	d11c      	bne.n	8003464 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800342a:	4b44      	ldr	r3, [pc, #272]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d116      	bne.n	8003464 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003436:	4b41      	ldr	r3, [pc, #260]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d005      	beq.n	800344e <HAL_RCC_OscConfig+0x152>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d001      	beq.n	800344e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e1c7      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800344e:	4b3b      	ldr	r3, [pc, #236]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	4937      	ldr	r1, [pc, #220]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 800345e:	4313      	orrs	r3, r2
 8003460:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003462:	e03a      	b.n	80034da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d020      	beq.n	80034ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800346c:	4b34      	ldr	r3, [pc, #208]	@ (8003540 <HAL_RCC_OscConfig+0x244>)
 800346e:	2201      	movs	r2, #1
 8003470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003472:	f7fe f94f 	bl	8001714 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800347a:	f7fe f94b 	bl	8001714 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e1a8      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348c:	4b2b      	ldr	r3, [pc, #172]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0f0      	beq.n	800347a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003498:	4b28      	ldr	r3, [pc, #160]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	4925      	ldr	r1, [pc, #148]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	600b      	str	r3, [r1, #0]
 80034ac:	e015      	b.n	80034da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ae:	4b24      	ldr	r3, [pc, #144]	@ (8003540 <HAL_RCC_OscConfig+0x244>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b4:	f7fe f92e 	bl	8001714 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034bc:	f7fe f92a 	bl	8001714 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e187      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ce:	4b1b      	ldr	r3, [pc, #108]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d036      	beq.n	8003554 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d016      	beq.n	800351c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ee:	4b15      	ldr	r3, [pc, #84]	@ (8003544 <HAL_RCC_OscConfig+0x248>)
 80034f0:	2201      	movs	r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f4:	f7fe f90e 	bl	8001714 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034fc:	f7fe f90a 	bl	8001714 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e167      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800350e:	4b0b      	ldr	r3, [pc, #44]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 8003510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f0      	beq.n	80034fc <HAL_RCC_OscConfig+0x200>
 800351a:	e01b      	b.n	8003554 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800351c:	4b09      	ldr	r3, [pc, #36]	@ (8003544 <HAL_RCC_OscConfig+0x248>)
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003522:	f7fe f8f7 	bl	8001714 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003528:	e00e      	b.n	8003548 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800352a:	f7fe f8f3 	bl	8001714 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d907      	bls.n	8003548 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e150      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
 800353c:	40023800 	.word	0x40023800
 8003540:	42470000 	.word	0x42470000
 8003544:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003548:	4b88      	ldr	r3, [pc, #544]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 800354a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1ea      	bne.n	800352a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 8097 	beq.w	8003690 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003562:	2300      	movs	r3, #0
 8003564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003566:	4b81      	ldr	r3, [pc, #516]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 8003568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10f      	bne.n	8003592 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	60bb      	str	r3, [r7, #8]
 8003576:	4b7d      	ldr	r3, [pc, #500]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357a:	4a7c      	ldr	r2, [pc, #496]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 800357c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003580:	6413      	str	r3, [r2, #64]	@ 0x40
 8003582:	4b7a      	ldr	r3, [pc, #488]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800358a:	60bb      	str	r3, [r7, #8]
 800358c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800358e:	2301      	movs	r3, #1
 8003590:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003592:	4b77      	ldr	r3, [pc, #476]	@ (8003770 <HAL_RCC_OscConfig+0x474>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800359a:	2b00      	cmp	r3, #0
 800359c:	d118      	bne.n	80035d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800359e:	4b74      	ldr	r3, [pc, #464]	@ (8003770 <HAL_RCC_OscConfig+0x474>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a73      	ldr	r2, [pc, #460]	@ (8003770 <HAL_RCC_OscConfig+0x474>)
 80035a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035aa:	f7fe f8b3 	bl	8001714 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b2:	f7fe f8af 	bl	8001714 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e10c      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c4:	4b6a      	ldr	r3, [pc, #424]	@ (8003770 <HAL_RCC_OscConfig+0x474>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0f0      	beq.n	80035b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d106      	bne.n	80035e6 <HAL_RCC_OscConfig+0x2ea>
 80035d8:	4b64      	ldr	r3, [pc, #400]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 80035da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035dc:	4a63      	ldr	r2, [pc, #396]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 80035de:	f043 0301 	orr.w	r3, r3, #1
 80035e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80035e4:	e01c      	b.n	8003620 <HAL_RCC_OscConfig+0x324>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	2b05      	cmp	r3, #5
 80035ec:	d10c      	bne.n	8003608 <HAL_RCC_OscConfig+0x30c>
 80035ee:	4b5f      	ldr	r3, [pc, #380]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 80035f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f2:	4a5e      	ldr	r2, [pc, #376]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 80035f4:	f043 0304 	orr.w	r3, r3, #4
 80035f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80035fa:	4b5c      	ldr	r3, [pc, #368]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035fe:	4a5b      	ldr	r2, [pc, #364]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	6713      	str	r3, [r2, #112]	@ 0x70
 8003606:	e00b      	b.n	8003620 <HAL_RCC_OscConfig+0x324>
 8003608:	4b58      	ldr	r3, [pc, #352]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 800360a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800360c:	4a57      	ldr	r2, [pc, #348]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 800360e:	f023 0301 	bic.w	r3, r3, #1
 8003612:	6713      	str	r3, [r2, #112]	@ 0x70
 8003614:	4b55      	ldr	r3, [pc, #340]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003618:	4a54      	ldr	r2, [pc, #336]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 800361a:	f023 0304 	bic.w	r3, r3, #4
 800361e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d015      	beq.n	8003654 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003628:	f7fe f874 	bl	8001714 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800362e:	e00a      	b.n	8003646 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003630:	f7fe f870 	bl	8001714 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800363e:	4293      	cmp	r3, r2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e0cb      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003646:	4b49      	ldr	r3, [pc, #292]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0ee      	beq.n	8003630 <HAL_RCC_OscConfig+0x334>
 8003652:	e014      	b.n	800367e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003654:	f7fe f85e 	bl	8001714 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800365a:	e00a      	b.n	8003672 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800365c:	f7fe f85a 	bl	8001714 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800366a:	4293      	cmp	r3, r2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e0b5      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003672:	4b3e      	ldr	r3, [pc, #248]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1ee      	bne.n	800365c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800367e:	7dfb      	ldrb	r3, [r7, #23]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d105      	bne.n	8003690 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003684:	4b39      	ldr	r3, [pc, #228]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 8003686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003688:	4a38      	ldr	r2, [pc, #224]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 800368a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800368e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80a1 	beq.w	80037dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800369a:	4b34      	ldr	r3, [pc, #208]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	d05c      	beq.n	8003760 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d141      	bne.n	8003732 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ae:	4b31      	ldr	r3, [pc, #196]	@ (8003774 <HAL_RCC_OscConfig+0x478>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b4:	f7fe f82e 	bl	8001714 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036bc:	f7fe f82a 	bl	8001714 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e087      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ce:	4b27      	ldr	r3, [pc, #156]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f0      	bne.n	80036bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69da      	ldr	r2, [r3, #28]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e8:	019b      	lsls	r3, r3, #6
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f0:	085b      	lsrs	r3, r3, #1
 80036f2:	3b01      	subs	r3, #1
 80036f4:	041b      	lsls	r3, r3, #16
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036fc:	061b      	lsls	r3, r3, #24
 80036fe:	491b      	ldr	r1, [pc, #108]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 8003700:	4313      	orrs	r3, r2
 8003702:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003704:	4b1b      	ldr	r3, [pc, #108]	@ (8003774 <HAL_RCC_OscConfig+0x478>)
 8003706:	2201      	movs	r2, #1
 8003708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370a:	f7fe f803 	bl	8001714 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003712:	f7fd ffff 	bl	8001714 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e05c      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003724:	4b11      	ldr	r3, [pc, #68]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0f0      	beq.n	8003712 <HAL_RCC_OscConfig+0x416>
 8003730:	e054      	b.n	80037dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003732:	4b10      	ldr	r3, [pc, #64]	@ (8003774 <HAL_RCC_OscConfig+0x478>)
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003738:	f7fd ffec 	bl	8001714 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003740:	f7fd ffe8 	bl	8001714 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e045      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003752:	4b06      	ldr	r3, [pc, #24]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f0      	bne.n	8003740 <HAL_RCC_OscConfig+0x444>
 800375e:	e03d      	b.n	80037dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d107      	bne.n	8003778 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e038      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
 800376c:	40023800 	.word	0x40023800
 8003770:	40007000 	.word	0x40007000
 8003774:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003778:	4b1b      	ldr	r3, [pc, #108]	@ (80037e8 <HAL_RCC_OscConfig+0x4ec>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d028      	beq.n	80037d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003790:	429a      	cmp	r2, r3
 8003792:	d121      	bne.n	80037d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800379e:	429a      	cmp	r2, r3
 80037a0:	d11a      	bne.n	80037d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80037a8:	4013      	ands	r3, r2
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80037ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d111      	bne.n	80037d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037be:	085b      	lsrs	r3, r3, #1
 80037c0:	3b01      	subs	r3, #1
 80037c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d107      	bne.n	80037d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d001      	beq.n	80037dc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e000      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40023800 	.word	0x40023800

080037ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e0cc      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003800:	4b68      	ldr	r3, [pc, #416]	@ (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d90c      	bls.n	8003828 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380e:	4b65      	ldr	r3, [pc, #404]	@ (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003816:	4b63      	ldr	r3, [pc, #396]	@ (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	429a      	cmp	r2, r3
 8003822:	d001      	beq.n	8003828 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e0b8      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d020      	beq.n	8003876 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003840:	4b59      	ldr	r3, [pc, #356]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	4a58      	ldr	r2, [pc, #352]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800384a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0308 	and.w	r3, r3, #8
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003858:	4b53      	ldr	r3, [pc, #332]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	4a52      	ldr	r2, [pc, #328]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003862:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003864:	4b50      	ldr	r3, [pc, #320]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	494d      	ldr	r1, [pc, #308]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	4313      	orrs	r3, r2
 8003874:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d044      	beq.n	800390c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d107      	bne.n	800389a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388a:	4b47      	ldr	r3, [pc, #284]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d119      	bne.n	80038ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e07f      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d003      	beq.n	80038aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038a6:	2b03      	cmp	r3, #3
 80038a8:	d107      	bne.n	80038ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038aa:	4b3f      	ldr	r3, [pc, #252]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d109      	bne.n	80038ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e06f      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ba:	4b3b      	ldr	r3, [pc, #236]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e067      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ca:	4b37      	ldr	r3, [pc, #220]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f023 0203 	bic.w	r2, r3, #3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	4934      	ldr	r1, [pc, #208]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038dc:	f7fd ff1a 	bl	8001714 <HAL_GetTick>
 80038e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e2:	e00a      	b.n	80038fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e4:	f7fd ff16 	bl	8001714 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e04f      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fa:	4b2b      	ldr	r3, [pc, #172]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 020c 	and.w	r2, r3, #12
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	429a      	cmp	r2, r3
 800390a:	d1eb      	bne.n	80038e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800390c:	4b25      	ldr	r3, [pc, #148]	@ (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	429a      	cmp	r2, r3
 8003918:	d20c      	bcs.n	8003934 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800391a:	4b22      	ldr	r3, [pc, #136]	@ (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003922:	4b20      	ldr	r3, [pc, #128]	@ (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d001      	beq.n	8003934 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e032      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d008      	beq.n	8003952 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003940:	4b19      	ldr	r3, [pc, #100]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	4916      	ldr	r1, [pc, #88]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	4313      	orrs	r3, r2
 8003950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b00      	cmp	r3, #0
 800395c:	d009      	beq.n	8003972 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800395e:	4b12      	ldr	r3, [pc, #72]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	490e      	ldr	r1, [pc, #56]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	4313      	orrs	r3, r2
 8003970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003972:	f000 f821 	bl	80039b8 <HAL_RCC_GetSysClockFreq>
 8003976:	4602      	mov	r2, r0
 8003978:	4b0b      	ldr	r3, [pc, #44]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	091b      	lsrs	r3, r3, #4
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	490a      	ldr	r1, [pc, #40]	@ (80039ac <HAL_RCC_ClockConfig+0x1c0>)
 8003984:	5ccb      	ldrb	r3, [r1, r3]
 8003986:	fa22 f303 	lsr.w	r3, r2, r3
 800398a:	4a09      	ldr	r2, [pc, #36]	@ (80039b0 <HAL_RCC_ClockConfig+0x1c4>)
 800398c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800398e:	4b09      	ldr	r3, [pc, #36]	@ (80039b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f7fd fe7a 	bl	800168c <HAL_InitTick>

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40023c00 	.word	0x40023c00
 80039a8:	40023800 	.word	0x40023800
 80039ac:	08009ae8 	.word	0x08009ae8
 80039b0:	20000014 	.word	0x20000014
 80039b4:	20000018 	.word	0x20000018

080039b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039bc:	b094      	sub	sp, #80	@ 0x50
 80039be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039d0:	4b79      	ldr	r3, [pc, #484]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 030c 	and.w	r3, r3, #12
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d00d      	beq.n	80039f8 <HAL_RCC_GetSysClockFreq+0x40>
 80039dc:	2b08      	cmp	r3, #8
 80039de:	f200 80e1 	bhi.w	8003ba4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d002      	beq.n	80039ec <HAL_RCC_GetSysClockFreq+0x34>
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d003      	beq.n	80039f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80039ea:	e0db      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039ec:	4b73      	ldr	r3, [pc, #460]	@ (8003bbc <HAL_RCC_GetSysClockFreq+0x204>)
 80039ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039f0:	e0db      	b.n	8003baa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039f2:	4b73      	ldr	r3, [pc, #460]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0x208>)
 80039f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039f6:	e0d8      	b.n	8003baa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039f8:	4b6f      	ldr	r3, [pc, #444]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a00:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a02:	4b6d      	ldr	r3, [pc, #436]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d063      	beq.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a0e:	4b6a      	ldr	r3, [pc, #424]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	099b      	lsrs	r3, r3, #6
 8003a14:	2200      	movs	r2, #0
 8003a16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a18:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a20:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a22:	2300      	movs	r3, #0
 8003a24:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a2a:	4622      	mov	r2, r4
 8003a2c:	462b      	mov	r3, r5
 8003a2e:	f04f 0000 	mov.w	r0, #0
 8003a32:	f04f 0100 	mov.w	r1, #0
 8003a36:	0159      	lsls	r1, r3, #5
 8003a38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a3c:	0150      	lsls	r0, r2, #5
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	4621      	mov	r1, r4
 8003a44:	1a51      	subs	r1, r2, r1
 8003a46:	6139      	str	r1, [r7, #16]
 8003a48:	4629      	mov	r1, r5
 8003a4a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a4e:	617b      	str	r3, [r7, #20]
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	f04f 0300 	mov.w	r3, #0
 8003a58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a5c:	4659      	mov	r1, fp
 8003a5e:	018b      	lsls	r3, r1, #6
 8003a60:	4651      	mov	r1, sl
 8003a62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a66:	4651      	mov	r1, sl
 8003a68:	018a      	lsls	r2, r1, #6
 8003a6a:	4651      	mov	r1, sl
 8003a6c:	ebb2 0801 	subs.w	r8, r2, r1
 8003a70:	4659      	mov	r1, fp
 8003a72:	eb63 0901 	sbc.w	r9, r3, r1
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a8a:	4690      	mov	r8, r2
 8003a8c:	4699      	mov	r9, r3
 8003a8e:	4623      	mov	r3, r4
 8003a90:	eb18 0303 	adds.w	r3, r8, r3
 8003a94:	60bb      	str	r3, [r7, #8]
 8003a96:	462b      	mov	r3, r5
 8003a98:	eb49 0303 	adc.w	r3, r9, r3
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	f04f 0300 	mov.w	r3, #0
 8003aa6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003aaa:	4629      	mov	r1, r5
 8003aac:	024b      	lsls	r3, r1, #9
 8003aae:	4621      	mov	r1, r4
 8003ab0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ab4:	4621      	mov	r1, r4
 8003ab6:	024a      	lsls	r2, r1, #9
 8003ab8:	4610      	mov	r0, r2
 8003aba:	4619      	mov	r1, r3
 8003abc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003abe:	2200      	movs	r2, #0
 8003ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ac2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ac4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ac8:	f7fc fbea 	bl	80002a0 <__aeabi_uldivmod>
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ad4:	e058      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ad6:	4b38      	ldr	r3, [pc, #224]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	099b      	lsrs	r3, r3, #6
 8003adc:	2200      	movs	r2, #0
 8003ade:	4618      	mov	r0, r3
 8003ae0:	4611      	mov	r1, r2
 8003ae2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ae6:	623b      	str	r3, [r7, #32]
 8003ae8:	2300      	movs	r3, #0
 8003aea:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003af0:	4642      	mov	r2, r8
 8003af2:	464b      	mov	r3, r9
 8003af4:	f04f 0000 	mov.w	r0, #0
 8003af8:	f04f 0100 	mov.w	r1, #0
 8003afc:	0159      	lsls	r1, r3, #5
 8003afe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b02:	0150      	lsls	r0, r2, #5
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4641      	mov	r1, r8
 8003b0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b0e:	4649      	mov	r1, r9
 8003b10:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b28:	ebb2 040a 	subs.w	r4, r2, sl
 8003b2c:	eb63 050b 	sbc.w	r5, r3, fp
 8003b30:	f04f 0200 	mov.w	r2, #0
 8003b34:	f04f 0300 	mov.w	r3, #0
 8003b38:	00eb      	lsls	r3, r5, #3
 8003b3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b3e:	00e2      	lsls	r2, r4, #3
 8003b40:	4614      	mov	r4, r2
 8003b42:	461d      	mov	r5, r3
 8003b44:	4643      	mov	r3, r8
 8003b46:	18e3      	adds	r3, r4, r3
 8003b48:	603b      	str	r3, [r7, #0]
 8003b4a:	464b      	mov	r3, r9
 8003b4c:	eb45 0303 	adc.w	r3, r5, r3
 8003b50:	607b      	str	r3, [r7, #4]
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	f04f 0300 	mov.w	r3, #0
 8003b5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b5e:	4629      	mov	r1, r5
 8003b60:	028b      	lsls	r3, r1, #10
 8003b62:	4621      	mov	r1, r4
 8003b64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b68:	4621      	mov	r1, r4
 8003b6a:	028a      	lsls	r2, r1, #10
 8003b6c:	4610      	mov	r0, r2
 8003b6e:	4619      	mov	r1, r3
 8003b70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b72:	2200      	movs	r2, #0
 8003b74:	61bb      	str	r3, [r7, #24]
 8003b76:	61fa      	str	r2, [r7, #28]
 8003b78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b7c:	f7fc fb90 	bl	80002a0 <__aeabi_uldivmod>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4613      	mov	r3, r2
 8003b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003b88:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	0c1b      	lsrs	r3, r3, #16
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	3301      	adds	r3, #1
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003b98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ba2:	e002      	b.n	8003baa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ba4:	4b05      	ldr	r3, [pc, #20]	@ (8003bbc <HAL_RCC_GetSysClockFreq+0x204>)
 8003ba6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ba8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003baa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3750      	adds	r7, #80	@ 0x50
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	00f42400 	.word	0x00f42400
 8003bc0:	007a1200 	.word	0x007a1200

08003bc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bc8:	4b03      	ldr	r3, [pc, #12]	@ (8003bd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bca:	681b      	ldr	r3, [r3, #0]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	20000014 	.word	0x20000014

08003bdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003be0:	f7ff fff0 	bl	8003bc4 <HAL_RCC_GetHCLKFreq>
 8003be4:	4602      	mov	r2, r0
 8003be6:	4b05      	ldr	r3, [pc, #20]	@ (8003bfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	0a9b      	lsrs	r3, r3, #10
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	4903      	ldr	r1, [pc, #12]	@ (8003c00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bf2:	5ccb      	ldrb	r3, [r1, r3]
 8003bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	08009af8 	.word	0x08009af8

08003c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c08:	f7ff ffdc 	bl	8003bc4 <HAL_RCC_GetHCLKFreq>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	4b05      	ldr	r3, [pc, #20]	@ (8003c24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	0b5b      	lsrs	r3, r3, #13
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	4903      	ldr	r1, [pc, #12]	@ (8003c28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c1a:	5ccb      	ldrb	r3, [r1, r3]
 8003c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40023800 	.word	0x40023800
 8003c28:	08009af8 	.word	0x08009af8

08003c2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e042      	b.n	8003cc4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d106      	bne.n	8003c58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7fd fb56 	bl	8001304 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2224      	movs	r2, #36	@ 0x24
 8003c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 fc85 	bl	8004580 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	691a      	ldr	r2, [r3, #16]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695a      	ldr	r2, [r3, #20]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68da      	ldr	r2, [r3, #12]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ca4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b0ba      	sub	sp, #232	@ 0xe8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003d0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10f      	bne.n	8003d32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d16:	f003 0320 	and.w	r3, r3, #32
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d009      	beq.n	8003d32 <HAL_UART_IRQHandler+0x66>
 8003d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d22:	f003 0320 	and.w	r3, r3, #32
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 fb69 	bl	8004402 <UART_Receive_IT>
      return;
 8003d30:	e25b      	b.n	80041ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 80de 	beq.w	8003ef8 <HAL_UART_IRQHandler+0x22c>
 8003d3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d106      	bne.n	8003d56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d4c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 80d1 	beq.w	8003ef8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00b      	beq.n	8003d7a <HAL_UART_IRQHandler+0xae>
 8003d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d005      	beq.n	8003d7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d72:	f043 0201 	orr.w	r2, r3, #1
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d7e:	f003 0304 	and.w	r3, r3, #4
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00b      	beq.n	8003d9e <HAL_UART_IRQHandler+0xd2>
 8003d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d005      	beq.n	8003d9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d96:	f043 0202 	orr.w	r2, r3, #2
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00b      	beq.n	8003dc2 <HAL_UART_IRQHandler+0xf6>
 8003daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d005      	beq.n	8003dc2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dba:	f043 0204 	orr.w	r2, r3, #4
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d011      	beq.n	8003df2 <HAL_UART_IRQHandler+0x126>
 8003dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dd2:	f003 0320 	and.w	r3, r3, #32
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d105      	bne.n	8003de6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003dda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d005      	beq.n	8003df2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dea:	f043 0208 	orr.w	r2, r3, #8
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 81f2 	beq.w	80041e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e00:	f003 0320 	and.w	r3, r3, #32
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d008      	beq.n	8003e1a <HAL_UART_IRQHandler+0x14e>
 8003e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e0c:	f003 0320 	and.w	r3, r3, #32
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 faf4 	bl	8004402 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e24:	2b40      	cmp	r3, #64	@ 0x40
 8003e26:	bf0c      	ite	eq
 8003e28:	2301      	moveq	r3, #1
 8003e2a:	2300      	movne	r3, #0
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d103      	bne.n	8003e46 <HAL_UART_IRQHandler+0x17a>
 8003e3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d04f      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f9fc 	bl	8004244 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e56:	2b40      	cmp	r3, #64	@ 0x40
 8003e58:	d141      	bne.n	8003ede <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	3314      	adds	r3, #20
 8003e60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e68:	e853 3f00 	ldrex	r3, [r3]
 8003e6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003e70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	3314      	adds	r3, #20
 8003e82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003e86:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003e8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003e92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003e96:	e841 2300 	strex	r3, r2, [r1]
 8003e9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003e9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1d9      	bne.n	8003e5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d013      	beq.n	8003ed6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb2:	4a7e      	ldr	r2, [pc, #504]	@ (80040ac <HAL_UART_IRQHandler+0x3e0>)
 8003eb4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fd fddb 	bl	8001a76 <HAL_DMA_Abort_IT>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d016      	beq.n	8003ef4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ed0:	4610      	mov	r0, r2
 8003ed2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed4:	e00e      	b.n	8003ef4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f99e 	bl	8004218 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003edc:	e00a      	b.n	8003ef4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f99a 	bl	8004218 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee4:	e006      	b.n	8003ef4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f996 	bl	8004218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003ef2:	e175      	b.n	80041e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef4:	bf00      	nop
    return;
 8003ef6:	e173      	b.n	80041e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	f040 814f 	bne.w	80041a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f06:	f003 0310 	and.w	r3, r3, #16
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 8148 	beq.w	80041a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 8141 	beq.w	80041a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60bb      	str	r3, [r7, #8]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	60bb      	str	r3, [r7, #8]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	60bb      	str	r3, [r7, #8]
 8003f32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f3e:	2b40      	cmp	r3, #64	@ 0x40
 8003f40:	f040 80b6 	bne.w	80040b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 8145 	beq.w	80041e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f62:	429a      	cmp	r2, r3
 8003f64:	f080 813e 	bcs.w	80041e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f6e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f7a:	f000 8088 	beq.w	800408e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	330c      	adds	r3, #12
 8003f84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f8c:	e853 3f00 	ldrex	r3, [r3]
 8003f90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003f94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	330c      	adds	r3, #12
 8003fa6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003faa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003fae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003fb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003fba:	e841 2300 	strex	r3, r2, [r1]
 8003fbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003fc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1d9      	bne.n	8003f7e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	3314      	adds	r3, #20
 8003fd0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fd4:	e853 3f00 	ldrex	r3, [r3]
 8003fd8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003fda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fdc:	f023 0301 	bic.w	r3, r3, #1
 8003fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3314      	adds	r3, #20
 8003fea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003fee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003ff2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ff6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003ffa:	e841 2300 	strex	r3, r2, [r1]
 8003ffe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004000:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1e1      	bne.n	8003fca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	3314      	adds	r3, #20
 800400c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004010:	e853 3f00 	ldrex	r3, [r3]
 8004014:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004016:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004018:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800401c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3314      	adds	r3, #20
 8004026:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800402a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800402c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004030:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004032:	e841 2300 	strex	r3, r2, [r1]
 8004036:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004038:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1e3      	bne.n	8004006 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	330c      	adds	r3, #12
 8004052:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004054:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004056:	e853 3f00 	ldrex	r3, [r3]
 800405a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800405c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800405e:	f023 0310 	bic.w	r3, r3, #16
 8004062:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	330c      	adds	r3, #12
 800406c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004070:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004072:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004074:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004076:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004078:	e841 2300 	strex	r3, r2, [r1]
 800407c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800407e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1e3      	bne.n	800404c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004088:	4618      	mov	r0, r3
 800408a:	f7fd fc84 	bl	8001996 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2202      	movs	r2, #2
 8004092:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800409c:	b29b      	uxth	r3, r3
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	4619      	mov	r1, r3
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f8c1 	bl	800422c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040aa:	e09b      	b.n	80041e4 <HAL_UART_IRQHandler+0x518>
 80040ac:	0800430b 	.word	0x0800430b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 808e 	beq.w	80041e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80040cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 8089 	beq.w	80041e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	330c      	adds	r3, #12
 80040dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e0:	e853 3f00 	ldrex	r3, [r3]
 80040e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	330c      	adds	r3, #12
 80040f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80040fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80040fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004100:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004102:	e841 2300 	strex	r3, r2, [r1]
 8004106:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1e3      	bne.n	80040d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3314      	adds	r3, #20
 8004114:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004118:	e853 3f00 	ldrex	r3, [r3]
 800411c:	623b      	str	r3, [r7, #32]
   return(result);
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	f023 0301 	bic.w	r3, r3, #1
 8004124:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3314      	adds	r3, #20
 800412e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004132:	633a      	str	r2, [r7, #48]	@ 0x30
 8004134:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004136:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004138:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800413a:	e841 2300 	strex	r3, r2, [r1]
 800413e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1e3      	bne.n	800410e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2220      	movs	r2, #32
 800414a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	330c      	adds	r3, #12
 800415a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	e853 3f00 	ldrex	r3, [r3]
 8004162:	60fb      	str	r3, [r7, #12]
   return(result);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f023 0310 	bic.w	r3, r3, #16
 800416a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	330c      	adds	r3, #12
 8004174:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004178:	61fa      	str	r2, [r7, #28]
 800417a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417c:	69b9      	ldr	r1, [r7, #24]
 800417e:	69fa      	ldr	r2, [r7, #28]
 8004180:	e841 2300 	strex	r3, r2, [r1]
 8004184:	617b      	str	r3, [r7, #20]
   return(result);
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1e3      	bne.n	8004154 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004192:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004196:	4619      	mov	r1, r3
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f847 	bl	800422c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800419e:	e023      	b.n	80041e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80041a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d009      	beq.n	80041c0 <HAL_UART_IRQHandler+0x4f4>
 80041ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f8ba 	bl	8004332 <UART_Transmit_IT>
    return;
 80041be:	e014      	b.n	80041ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00e      	beq.n	80041ea <HAL_UART_IRQHandler+0x51e>
 80041cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d008      	beq.n	80041ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 f8fa 	bl	80043d2 <UART_EndTransmit_IT>
    return;
 80041de:	e004      	b.n	80041ea <HAL_UART_IRQHandler+0x51e>
    return;
 80041e0:	bf00      	nop
 80041e2:	e002      	b.n	80041ea <HAL_UART_IRQHandler+0x51e>
      return;
 80041e4:	bf00      	nop
 80041e6:	e000      	b.n	80041ea <HAL_UART_IRQHandler+0x51e>
      return;
 80041e8:	bf00      	nop
  }
}
 80041ea:	37e8      	adds	r7, #232	@ 0xe8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	460b      	mov	r3, r1
 8004236:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004244:	b480      	push	{r7}
 8004246:	b095      	sub	sp, #84	@ 0x54
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	330c      	adds	r3, #12
 8004252:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004256:	e853 3f00 	ldrex	r3, [r3]
 800425a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800425c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004262:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	330c      	adds	r3, #12
 800426a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800426c:	643a      	str	r2, [r7, #64]	@ 0x40
 800426e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004270:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004272:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004274:	e841 2300 	strex	r3, r2, [r1]
 8004278:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800427a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1e5      	bne.n	800424c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3314      	adds	r3, #20
 8004286:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	e853 3f00 	ldrex	r3, [r3]
 800428e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	f023 0301 	bic.w	r3, r3, #1
 8004296:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3314      	adds	r3, #20
 800429e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042a8:	e841 2300 	strex	r3, r2, [r1]
 80042ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1e5      	bne.n	8004280 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d119      	bne.n	80042f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	330c      	adds	r3, #12
 80042c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	e853 3f00 	ldrex	r3, [r3]
 80042ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f023 0310 	bic.w	r3, r3, #16
 80042d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	330c      	adds	r3, #12
 80042da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042dc:	61ba      	str	r2, [r7, #24]
 80042de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e0:	6979      	ldr	r1, [r7, #20]
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	e841 2300 	strex	r3, r2, [r1]
 80042e8:	613b      	str	r3, [r7, #16]
   return(result);
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1e5      	bne.n	80042bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80042fe:	bf00      	nop
 8004300:	3754      	adds	r7, #84	@ 0x54
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004316:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f7ff ff77 	bl	8004218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800432a:	bf00      	nop
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004332:	b480      	push	{r7}
 8004334:	b085      	sub	sp, #20
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b21      	cmp	r3, #33	@ 0x21
 8004344:	d13e      	bne.n	80043c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800434e:	d114      	bne.n	800437a <UART_Transmit_IT+0x48>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d110      	bne.n	800437a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	461a      	mov	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800436c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	1c9a      	adds	r2, r3, #2
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	621a      	str	r2, [r3, #32]
 8004378:	e008      	b.n	800438c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	1c59      	adds	r1, r3, #1
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6211      	str	r1, [r2, #32]
 8004384:	781a      	ldrb	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004390:	b29b      	uxth	r3, r3
 8004392:	3b01      	subs	r3, #1
 8004394:	b29b      	uxth	r3, r3
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	4619      	mov	r1, r3
 800439a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10f      	bne.n	80043c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043c0:	2300      	movs	r3, #0
 80043c2:	e000      	b.n	80043c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043c4:	2302      	movs	r3, #2
  }
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68da      	ldr	r2, [r3, #12]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2220      	movs	r2, #32
 80043ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7ff fefc 	bl	80041f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b08c      	sub	sp, #48	@ 0x30
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b22      	cmp	r3, #34	@ 0x22
 8004414:	f040 80ae 	bne.w	8004574 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004420:	d117      	bne.n	8004452 <UART_Receive_IT+0x50>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d113      	bne.n	8004452 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800442a:	2300      	movs	r3, #0
 800442c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004432:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	b29b      	uxth	r3, r3
 800443c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004440:	b29a      	uxth	r2, r3
 8004442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004444:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444a:	1c9a      	adds	r2, r3, #2
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004450:	e026      	b.n	80044a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004456:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004458:	2300      	movs	r3, #0
 800445a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004464:	d007      	beq.n	8004476 <UART_Receive_IT+0x74>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10a      	bne.n	8004484 <UART_Receive_IT+0x82>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	b2da      	uxtb	r2, r3
 800447e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004480:	701a      	strb	r2, [r3, #0]
 8004482:	e008      	b.n	8004496 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	b2db      	uxtb	r3, r3
 800448c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004490:	b2da      	uxtb	r2, r3
 8004492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004494:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800449a:	1c5a      	adds	r2, r3, #1
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	3b01      	subs	r3, #1
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	4619      	mov	r1, r3
 80044ae:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d15d      	bne.n	8004570 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68da      	ldr	r2, [r3, #12]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0220 	bic.w	r2, r2, #32
 80044c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695a      	ldr	r2, [r3, #20]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0201 	bic.w	r2, r2, #1
 80044e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d135      	bne.n	8004566 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	330c      	adds	r3, #12
 8004506:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	e853 3f00 	ldrex	r3, [r3]
 800450e:	613b      	str	r3, [r7, #16]
   return(result);
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f023 0310 	bic.w	r3, r3, #16
 8004516:	627b      	str	r3, [r7, #36]	@ 0x24
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	330c      	adds	r3, #12
 800451e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004520:	623a      	str	r2, [r7, #32]
 8004522:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004524:	69f9      	ldr	r1, [r7, #28]
 8004526:	6a3a      	ldr	r2, [r7, #32]
 8004528:	e841 2300 	strex	r3, r2, [r1]
 800452c:	61bb      	str	r3, [r7, #24]
   return(result);
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1e5      	bne.n	8004500 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0310 	and.w	r3, r3, #16
 800453e:	2b10      	cmp	r3, #16
 8004540:	d10a      	bne.n	8004558 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004542:	2300      	movs	r3, #0
 8004544:	60fb      	str	r3, [r7, #12]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	60fb      	str	r3, [r7, #12]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	60fb      	str	r3, [r7, #12]
 8004556:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800455c:	4619      	mov	r1, r3
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7ff fe64 	bl	800422c <HAL_UARTEx_RxEventCallback>
 8004564:	e002      	b.n	800456c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7ff fe4c 	bl	8004204 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800456c:	2300      	movs	r3, #0
 800456e:	e002      	b.n	8004576 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004570:	2300      	movs	r3, #0
 8004572:	e000      	b.n	8004576 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004574:	2302      	movs	r3, #2
  }
}
 8004576:	4618      	mov	r0, r3
 8004578:	3730      	adds	r7, #48	@ 0x30
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
	...

08004580 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004584:	b0c0      	sub	sp, #256	@ 0x100
 8004586:	af00      	add	r7, sp, #0
 8004588:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800458c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800459c:	68d9      	ldr	r1, [r3, #12]
 800459e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	ea40 0301 	orr.w	r3, r0, r1
 80045a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	431a      	orrs	r2, r3
 80045b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	431a      	orrs	r2, r3
 80045c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80045d8:	f021 010c 	bic.w	r1, r1, #12
 80045dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80045e6:	430b      	orrs	r3, r1
 80045e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80045f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045fa:	6999      	ldr	r1, [r3, #24]
 80045fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	ea40 0301 	orr.w	r3, r0, r1
 8004606:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	4b8f      	ldr	r3, [pc, #572]	@ (800484c <UART_SetConfig+0x2cc>)
 8004610:	429a      	cmp	r2, r3
 8004612:	d005      	beq.n	8004620 <UART_SetConfig+0xa0>
 8004614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4b8d      	ldr	r3, [pc, #564]	@ (8004850 <UART_SetConfig+0x2d0>)
 800461c:	429a      	cmp	r2, r3
 800461e:	d104      	bne.n	800462a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004620:	f7ff faf0 	bl	8003c04 <HAL_RCC_GetPCLK2Freq>
 8004624:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004628:	e003      	b.n	8004632 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800462a:	f7ff fad7 	bl	8003bdc <HAL_RCC_GetPCLK1Freq>
 800462e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004636:	69db      	ldr	r3, [r3, #28]
 8004638:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800463c:	f040 810c 	bne.w	8004858 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004640:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004644:	2200      	movs	r2, #0
 8004646:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800464a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800464e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004652:	4622      	mov	r2, r4
 8004654:	462b      	mov	r3, r5
 8004656:	1891      	adds	r1, r2, r2
 8004658:	65b9      	str	r1, [r7, #88]	@ 0x58
 800465a:	415b      	adcs	r3, r3
 800465c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800465e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004662:	4621      	mov	r1, r4
 8004664:	eb12 0801 	adds.w	r8, r2, r1
 8004668:	4629      	mov	r1, r5
 800466a:	eb43 0901 	adc.w	r9, r3, r1
 800466e:	f04f 0200 	mov.w	r2, #0
 8004672:	f04f 0300 	mov.w	r3, #0
 8004676:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800467a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800467e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004682:	4690      	mov	r8, r2
 8004684:	4699      	mov	r9, r3
 8004686:	4623      	mov	r3, r4
 8004688:	eb18 0303 	adds.w	r3, r8, r3
 800468c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004690:	462b      	mov	r3, r5
 8004692:	eb49 0303 	adc.w	r3, r9, r3
 8004696:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800469a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80046a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80046aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80046ae:	460b      	mov	r3, r1
 80046b0:	18db      	adds	r3, r3, r3
 80046b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80046b4:	4613      	mov	r3, r2
 80046b6:	eb42 0303 	adc.w	r3, r2, r3
 80046ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80046bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80046c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80046c4:	f7fb fdec 	bl	80002a0 <__aeabi_uldivmod>
 80046c8:	4602      	mov	r2, r0
 80046ca:	460b      	mov	r3, r1
 80046cc:	4b61      	ldr	r3, [pc, #388]	@ (8004854 <UART_SetConfig+0x2d4>)
 80046ce:	fba3 2302 	umull	r2, r3, r3, r2
 80046d2:	095b      	lsrs	r3, r3, #5
 80046d4:	011c      	lsls	r4, r3, #4
 80046d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046da:	2200      	movs	r2, #0
 80046dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80046e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80046e8:	4642      	mov	r2, r8
 80046ea:	464b      	mov	r3, r9
 80046ec:	1891      	adds	r1, r2, r2
 80046ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80046f0:	415b      	adcs	r3, r3
 80046f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80046f8:	4641      	mov	r1, r8
 80046fa:	eb12 0a01 	adds.w	sl, r2, r1
 80046fe:	4649      	mov	r1, r9
 8004700:	eb43 0b01 	adc.w	fp, r3, r1
 8004704:	f04f 0200 	mov.w	r2, #0
 8004708:	f04f 0300 	mov.w	r3, #0
 800470c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004710:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004714:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004718:	4692      	mov	sl, r2
 800471a:	469b      	mov	fp, r3
 800471c:	4643      	mov	r3, r8
 800471e:	eb1a 0303 	adds.w	r3, sl, r3
 8004722:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004726:	464b      	mov	r3, r9
 8004728:	eb4b 0303 	adc.w	r3, fp, r3
 800472c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800473c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004740:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004744:	460b      	mov	r3, r1
 8004746:	18db      	adds	r3, r3, r3
 8004748:	643b      	str	r3, [r7, #64]	@ 0x40
 800474a:	4613      	mov	r3, r2
 800474c:	eb42 0303 	adc.w	r3, r2, r3
 8004750:	647b      	str	r3, [r7, #68]	@ 0x44
 8004752:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004756:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800475a:	f7fb fda1 	bl	80002a0 <__aeabi_uldivmod>
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	4611      	mov	r1, r2
 8004764:	4b3b      	ldr	r3, [pc, #236]	@ (8004854 <UART_SetConfig+0x2d4>)
 8004766:	fba3 2301 	umull	r2, r3, r3, r1
 800476a:	095b      	lsrs	r3, r3, #5
 800476c:	2264      	movs	r2, #100	@ 0x64
 800476e:	fb02 f303 	mul.w	r3, r2, r3
 8004772:	1acb      	subs	r3, r1, r3
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800477a:	4b36      	ldr	r3, [pc, #216]	@ (8004854 <UART_SetConfig+0x2d4>)
 800477c:	fba3 2302 	umull	r2, r3, r3, r2
 8004780:	095b      	lsrs	r3, r3, #5
 8004782:	005b      	lsls	r3, r3, #1
 8004784:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004788:	441c      	add	r4, r3
 800478a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800478e:	2200      	movs	r2, #0
 8004790:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004794:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004798:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800479c:	4642      	mov	r2, r8
 800479e:	464b      	mov	r3, r9
 80047a0:	1891      	adds	r1, r2, r2
 80047a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80047a4:	415b      	adcs	r3, r3
 80047a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80047ac:	4641      	mov	r1, r8
 80047ae:	1851      	adds	r1, r2, r1
 80047b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80047b2:	4649      	mov	r1, r9
 80047b4:	414b      	adcs	r3, r1
 80047b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80047b8:	f04f 0200 	mov.w	r2, #0
 80047bc:	f04f 0300 	mov.w	r3, #0
 80047c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80047c4:	4659      	mov	r1, fp
 80047c6:	00cb      	lsls	r3, r1, #3
 80047c8:	4651      	mov	r1, sl
 80047ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047ce:	4651      	mov	r1, sl
 80047d0:	00ca      	lsls	r2, r1, #3
 80047d2:	4610      	mov	r0, r2
 80047d4:	4619      	mov	r1, r3
 80047d6:	4603      	mov	r3, r0
 80047d8:	4642      	mov	r2, r8
 80047da:	189b      	adds	r3, r3, r2
 80047dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047e0:	464b      	mov	r3, r9
 80047e2:	460a      	mov	r2, r1
 80047e4:	eb42 0303 	adc.w	r3, r2, r3
 80047e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80047f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80047fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004800:	460b      	mov	r3, r1
 8004802:	18db      	adds	r3, r3, r3
 8004804:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004806:	4613      	mov	r3, r2
 8004808:	eb42 0303 	adc.w	r3, r2, r3
 800480c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800480e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004812:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004816:	f7fb fd43 	bl	80002a0 <__aeabi_uldivmod>
 800481a:	4602      	mov	r2, r0
 800481c:	460b      	mov	r3, r1
 800481e:	4b0d      	ldr	r3, [pc, #52]	@ (8004854 <UART_SetConfig+0x2d4>)
 8004820:	fba3 1302 	umull	r1, r3, r3, r2
 8004824:	095b      	lsrs	r3, r3, #5
 8004826:	2164      	movs	r1, #100	@ 0x64
 8004828:	fb01 f303 	mul.w	r3, r1, r3
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	3332      	adds	r3, #50	@ 0x32
 8004832:	4a08      	ldr	r2, [pc, #32]	@ (8004854 <UART_SetConfig+0x2d4>)
 8004834:	fba2 2303 	umull	r2, r3, r2, r3
 8004838:	095b      	lsrs	r3, r3, #5
 800483a:	f003 0207 	and.w	r2, r3, #7
 800483e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4422      	add	r2, r4
 8004846:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004848:	e106      	b.n	8004a58 <UART_SetConfig+0x4d8>
 800484a:	bf00      	nop
 800484c:	40011000 	.word	0x40011000
 8004850:	40011400 	.word	0x40011400
 8004854:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800485c:	2200      	movs	r2, #0
 800485e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004862:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004866:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800486a:	4642      	mov	r2, r8
 800486c:	464b      	mov	r3, r9
 800486e:	1891      	adds	r1, r2, r2
 8004870:	6239      	str	r1, [r7, #32]
 8004872:	415b      	adcs	r3, r3
 8004874:	627b      	str	r3, [r7, #36]	@ 0x24
 8004876:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800487a:	4641      	mov	r1, r8
 800487c:	1854      	adds	r4, r2, r1
 800487e:	4649      	mov	r1, r9
 8004880:	eb43 0501 	adc.w	r5, r3, r1
 8004884:	f04f 0200 	mov.w	r2, #0
 8004888:	f04f 0300 	mov.w	r3, #0
 800488c:	00eb      	lsls	r3, r5, #3
 800488e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004892:	00e2      	lsls	r2, r4, #3
 8004894:	4614      	mov	r4, r2
 8004896:	461d      	mov	r5, r3
 8004898:	4643      	mov	r3, r8
 800489a:	18e3      	adds	r3, r4, r3
 800489c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80048a0:	464b      	mov	r3, r9
 80048a2:	eb45 0303 	adc.w	r3, r5, r3
 80048a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80048aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048ba:	f04f 0200 	mov.w	r2, #0
 80048be:	f04f 0300 	mov.w	r3, #0
 80048c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80048c6:	4629      	mov	r1, r5
 80048c8:	008b      	lsls	r3, r1, #2
 80048ca:	4621      	mov	r1, r4
 80048cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048d0:	4621      	mov	r1, r4
 80048d2:	008a      	lsls	r2, r1, #2
 80048d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80048d8:	f7fb fce2 	bl	80002a0 <__aeabi_uldivmod>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4b60      	ldr	r3, [pc, #384]	@ (8004a64 <UART_SetConfig+0x4e4>)
 80048e2:	fba3 2302 	umull	r2, r3, r3, r2
 80048e6:	095b      	lsrs	r3, r3, #5
 80048e8:	011c      	lsls	r4, r3, #4
 80048ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048ee:	2200      	movs	r2, #0
 80048f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80048f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80048fc:	4642      	mov	r2, r8
 80048fe:	464b      	mov	r3, r9
 8004900:	1891      	adds	r1, r2, r2
 8004902:	61b9      	str	r1, [r7, #24]
 8004904:	415b      	adcs	r3, r3
 8004906:	61fb      	str	r3, [r7, #28]
 8004908:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800490c:	4641      	mov	r1, r8
 800490e:	1851      	adds	r1, r2, r1
 8004910:	6139      	str	r1, [r7, #16]
 8004912:	4649      	mov	r1, r9
 8004914:	414b      	adcs	r3, r1
 8004916:	617b      	str	r3, [r7, #20]
 8004918:	f04f 0200 	mov.w	r2, #0
 800491c:	f04f 0300 	mov.w	r3, #0
 8004920:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004924:	4659      	mov	r1, fp
 8004926:	00cb      	lsls	r3, r1, #3
 8004928:	4651      	mov	r1, sl
 800492a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800492e:	4651      	mov	r1, sl
 8004930:	00ca      	lsls	r2, r1, #3
 8004932:	4610      	mov	r0, r2
 8004934:	4619      	mov	r1, r3
 8004936:	4603      	mov	r3, r0
 8004938:	4642      	mov	r2, r8
 800493a:	189b      	adds	r3, r3, r2
 800493c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004940:	464b      	mov	r3, r9
 8004942:	460a      	mov	r2, r1
 8004944:	eb42 0303 	adc.w	r3, r2, r3
 8004948:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800494c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004956:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004958:	f04f 0200 	mov.w	r2, #0
 800495c:	f04f 0300 	mov.w	r3, #0
 8004960:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004964:	4649      	mov	r1, r9
 8004966:	008b      	lsls	r3, r1, #2
 8004968:	4641      	mov	r1, r8
 800496a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800496e:	4641      	mov	r1, r8
 8004970:	008a      	lsls	r2, r1, #2
 8004972:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004976:	f7fb fc93 	bl	80002a0 <__aeabi_uldivmod>
 800497a:	4602      	mov	r2, r0
 800497c:	460b      	mov	r3, r1
 800497e:	4611      	mov	r1, r2
 8004980:	4b38      	ldr	r3, [pc, #224]	@ (8004a64 <UART_SetConfig+0x4e4>)
 8004982:	fba3 2301 	umull	r2, r3, r3, r1
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	2264      	movs	r2, #100	@ 0x64
 800498a:	fb02 f303 	mul.w	r3, r2, r3
 800498e:	1acb      	subs	r3, r1, r3
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	3332      	adds	r3, #50	@ 0x32
 8004994:	4a33      	ldr	r2, [pc, #204]	@ (8004a64 <UART_SetConfig+0x4e4>)
 8004996:	fba2 2303 	umull	r2, r3, r2, r3
 800499a:	095b      	lsrs	r3, r3, #5
 800499c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049a0:	441c      	add	r4, r3
 80049a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049a6:	2200      	movs	r2, #0
 80049a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80049aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80049ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80049b0:	4642      	mov	r2, r8
 80049b2:	464b      	mov	r3, r9
 80049b4:	1891      	adds	r1, r2, r2
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	415b      	adcs	r3, r3
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049c0:	4641      	mov	r1, r8
 80049c2:	1851      	adds	r1, r2, r1
 80049c4:	6039      	str	r1, [r7, #0]
 80049c6:	4649      	mov	r1, r9
 80049c8:	414b      	adcs	r3, r1
 80049ca:	607b      	str	r3, [r7, #4]
 80049cc:	f04f 0200 	mov.w	r2, #0
 80049d0:	f04f 0300 	mov.w	r3, #0
 80049d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049d8:	4659      	mov	r1, fp
 80049da:	00cb      	lsls	r3, r1, #3
 80049dc:	4651      	mov	r1, sl
 80049de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049e2:	4651      	mov	r1, sl
 80049e4:	00ca      	lsls	r2, r1, #3
 80049e6:	4610      	mov	r0, r2
 80049e8:	4619      	mov	r1, r3
 80049ea:	4603      	mov	r3, r0
 80049ec:	4642      	mov	r2, r8
 80049ee:	189b      	adds	r3, r3, r2
 80049f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049f2:	464b      	mov	r3, r9
 80049f4:	460a      	mov	r2, r1
 80049f6:	eb42 0303 	adc.w	r3, r2, r3
 80049fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a06:	667a      	str	r2, [r7, #100]	@ 0x64
 8004a08:	f04f 0200 	mov.w	r2, #0
 8004a0c:	f04f 0300 	mov.w	r3, #0
 8004a10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004a14:	4649      	mov	r1, r9
 8004a16:	008b      	lsls	r3, r1, #2
 8004a18:	4641      	mov	r1, r8
 8004a1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a1e:	4641      	mov	r1, r8
 8004a20:	008a      	lsls	r2, r1, #2
 8004a22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a26:	f7fb fc3b 	bl	80002a0 <__aeabi_uldivmod>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a64 <UART_SetConfig+0x4e4>)
 8004a30:	fba3 1302 	umull	r1, r3, r3, r2
 8004a34:	095b      	lsrs	r3, r3, #5
 8004a36:	2164      	movs	r1, #100	@ 0x64
 8004a38:	fb01 f303 	mul.w	r3, r1, r3
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	3332      	adds	r3, #50	@ 0x32
 8004a42:	4a08      	ldr	r2, [pc, #32]	@ (8004a64 <UART_SetConfig+0x4e4>)
 8004a44:	fba2 2303 	umull	r2, r3, r2, r3
 8004a48:	095b      	lsrs	r3, r3, #5
 8004a4a:	f003 020f 	and.w	r2, r3, #15
 8004a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4422      	add	r2, r4
 8004a56:	609a      	str	r2, [r3, #8]
}
 8004a58:	bf00      	nop
 8004a5a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a64:	51eb851f 	.word	0x51eb851f

08004a68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a68:	b084      	sub	sp, #16
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b084      	sub	sp, #16
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	f107 001c 	add.w	r0, r7, #28
 8004a76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a7a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d123      	bne.n	8004aca <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a86:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004a96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004aaa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d105      	bne.n	8004abe <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f001 fae8 	bl	8006094 <USB_CoreReset>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	73fb      	strb	r3, [r7, #15]
 8004ac8:	e01b      	b.n	8004b02 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f001 fadc 	bl	8006094 <USB_CoreReset>
 8004adc:	4603      	mov	r3, r0
 8004ade:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ae0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d106      	bne.n	8004af6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	639a      	str	r2, [r3, #56]	@ 0x38
 8004af4:	e005      	b.n	8004b02 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004afa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004b02:	7fbb      	ldrb	r3, [r7, #30]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d10b      	bne.n	8004b20 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f043 0206 	orr.w	r2, r3, #6
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f043 0220 	orr.w	r2, r3, #32
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b2c:	b004      	add	sp, #16
 8004b2e:	4770      	bx	lr

08004b30 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004b3e:	79fb      	ldrb	r3, [r7, #7]
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d165      	bne.n	8004c10 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	4a41      	ldr	r2, [pc, #260]	@ (8004c4c <USB_SetTurnaroundTime+0x11c>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d906      	bls.n	8004b5a <USB_SetTurnaroundTime+0x2a>
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4a40      	ldr	r2, [pc, #256]	@ (8004c50 <USB_SetTurnaroundTime+0x120>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d202      	bcs.n	8004b5a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004b54:	230f      	movs	r3, #15
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	e062      	b.n	8004c20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	4a3c      	ldr	r2, [pc, #240]	@ (8004c50 <USB_SetTurnaroundTime+0x120>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d306      	bcc.n	8004b70 <USB_SetTurnaroundTime+0x40>
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	4a3b      	ldr	r2, [pc, #236]	@ (8004c54 <USB_SetTurnaroundTime+0x124>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d202      	bcs.n	8004b70 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004b6a:	230e      	movs	r3, #14
 8004b6c:	617b      	str	r3, [r7, #20]
 8004b6e:	e057      	b.n	8004c20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	4a38      	ldr	r2, [pc, #224]	@ (8004c54 <USB_SetTurnaroundTime+0x124>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d306      	bcc.n	8004b86 <USB_SetTurnaroundTime+0x56>
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	4a37      	ldr	r2, [pc, #220]	@ (8004c58 <USB_SetTurnaroundTime+0x128>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d202      	bcs.n	8004b86 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004b80:	230d      	movs	r3, #13
 8004b82:	617b      	str	r3, [r7, #20]
 8004b84:	e04c      	b.n	8004c20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	4a33      	ldr	r2, [pc, #204]	@ (8004c58 <USB_SetTurnaroundTime+0x128>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d306      	bcc.n	8004b9c <USB_SetTurnaroundTime+0x6c>
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	4a32      	ldr	r2, [pc, #200]	@ (8004c5c <USB_SetTurnaroundTime+0x12c>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d802      	bhi.n	8004b9c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004b96:	230c      	movs	r3, #12
 8004b98:	617b      	str	r3, [r7, #20]
 8004b9a:	e041      	b.n	8004c20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	4a2f      	ldr	r2, [pc, #188]	@ (8004c5c <USB_SetTurnaroundTime+0x12c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d906      	bls.n	8004bb2 <USB_SetTurnaroundTime+0x82>
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	4a2e      	ldr	r2, [pc, #184]	@ (8004c60 <USB_SetTurnaroundTime+0x130>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d802      	bhi.n	8004bb2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004bac:	230b      	movs	r3, #11
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	e036      	b.n	8004c20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	4a2a      	ldr	r2, [pc, #168]	@ (8004c60 <USB_SetTurnaroundTime+0x130>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d906      	bls.n	8004bc8 <USB_SetTurnaroundTime+0x98>
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	4a29      	ldr	r2, [pc, #164]	@ (8004c64 <USB_SetTurnaroundTime+0x134>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d802      	bhi.n	8004bc8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004bc2:	230a      	movs	r3, #10
 8004bc4:	617b      	str	r3, [r7, #20]
 8004bc6:	e02b      	b.n	8004c20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	4a26      	ldr	r2, [pc, #152]	@ (8004c64 <USB_SetTurnaroundTime+0x134>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d906      	bls.n	8004bde <USB_SetTurnaroundTime+0xae>
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	4a25      	ldr	r2, [pc, #148]	@ (8004c68 <USB_SetTurnaroundTime+0x138>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d202      	bcs.n	8004bde <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004bd8:	2309      	movs	r3, #9
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	e020      	b.n	8004c20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	4a21      	ldr	r2, [pc, #132]	@ (8004c68 <USB_SetTurnaroundTime+0x138>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d306      	bcc.n	8004bf4 <USB_SetTurnaroundTime+0xc4>
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	4a20      	ldr	r2, [pc, #128]	@ (8004c6c <USB_SetTurnaroundTime+0x13c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d802      	bhi.n	8004bf4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004bee:	2308      	movs	r3, #8
 8004bf0:	617b      	str	r3, [r7, #20]
 8004bf2:	e015      	b.n	8004c20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	4a1d      	ldr	r2, [pc, #116]	@ (8004c6c <USB_SetTurnaroundTime+0x13c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d906      	bls.n	8004c0a <USB_SetTurnaroundTime+0xda>
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	4a1c      	ldr	r2, [pc, #112]	@ (8004c70 <USB_SetTurnaroundTime+0x140>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d202      	bcs.n	8004c0a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004c04:	2307      	movs	r3, #7
 8004c06:	617b      	str	r3, [r7, #20]
 8004c08:	e00a      	b.n	8004c20 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004c0a:	2306      	movs	r3, #6
 8004c0c:	617b      	str	r3, [r7, #20]
 8004c0e:	e007      	b.n	8004c20 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004c10:	79fb      	ldrb	r3, [r7, #7]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d102      	bne.n	8004c1c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004c16:	2309      	movs	r3, #9
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	e001      	b.n	8004c20 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004c1c:	2309      	movs	r3, #9
 8004c1e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	68da      	ldr	r2, [r3, #12]
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	029b      	lsls	r3, r3, #10
 8004c34:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	371c      	adds	r7, #28
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	00d8acbf 	.word	0x00d8acbf
 8004c50:	00e4e1c0 	.word	0x00e4e1c0
 8004c54:	00f42400 	.word	0x00f42400
 8004c58:	01067380 	.word	0x01067380
 8004c5c:	011a499f 	.word	0x011a499f
 8004c60:	01312cff 	.word	0x01312cff
 8004c64:	014ca43f 	.word	0x014ca43f
 8004c68:	016e3600 	.word	0x016e3600
 8004c6c:	01a6ab1f 	.word	0x01a6ab1f
 8004c70:	01e84800 	.word	0x01e84800

08004c74 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f043 0201 	orr.w	r2, r3, #1
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f023 0201 	bic.w	r2, r3, #1
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004cd4:	78fb      	ldrb	r3, [r7, #3]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d115      	bne.n	8004d06 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004ce6:	200a      	movs	r0, #10
 8004ce8:	f7fc fd20 	bl	800172c <HAL_Delay>
      ms += 10U;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	330a      	adds	r3, #10
 8004cf0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f001 f93f 	bl	8005f76 <USB_GetMode>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d01e      	beq.n	8004d3c <USB_SetCurrentMode+0x84>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2bc7      	cmp	r3, #199	@ 0xc7
 8004d02:	d9f0      	bls.n	8004ce6 <USB_SetCurrentMode+0x2e>
 8004d04:	e01a      	b.n	8004d3c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d06:	78fb      	ldrb	r3, [r7, #3]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d115      	bne.n	8004d38 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004d18:	200a      	movs	r0, #10
 8004d1a:	f7fc fd07 	bl	800172c <HAL_Delay>
      ms += 10U;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	330a      	adds	r3, #10
 8004d22:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f001 f926 	bl	8005f76 <USB_GetMode>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d005      	beq.n	8004d3c <USB_SetCurrentMode+0x84>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2bc7      	cmp	r3, #199	@ 0xc7
 8004d34:	d9f0      	bls.n	8004d18 <USB_SetCurrentMode+0x60>
 8004d36:	e001      	b.n	8004d3c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e005      	b.n	8004d48 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2bc8      	cmp	r3, #200	@ 0xc8
 8004d40:	d101      	bne.n	8004d46 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e000      	b.n	8004d48 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d50:	b084      	sub	sp, #16
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b086      	sub	sp, #24
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
 8004d5a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004d5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d62:	2300      	movs	r3, #0
 8004d64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	613b      	str	r3, [r7, #16]
 8004d6e:	e009      	b.n	8004d84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	3340      	adds	r3, #64	@ 0x40
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	3301      	adds	r3, #1
 8004d82:	613b      	str	r3, [r7, #16]
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	2b0e      	cmp	r3, #14
 8004d88:	d9f2      	bls.n	8004d70 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d8a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d11c      	bne.n	8004dcc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004da0:	f043 0302 	orr.w	r3, r3, #2
 8004da4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004daa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	639a      	str	r2, [r3, #56]	@ 0x38
 8004dca:	e00b      	b.n	8004de4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ddc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004dea:	461a      	mov	r2, r3
 8004dec:	2300      	movs	r3, #0
 8004dee:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004df0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d10d      	bne.n	8004e14 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004df8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d104      	bne.n	8004e0a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004e00:	2100      	movs	r1, #0
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f968 	bl	80050d8 <USB_SetDevSpeed>
 8004e08:	e008      	b.n	8004e1c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f963 	bl	80050d8 <USB_SetDevSpeed>
 8004e12:	e003      	b.n	8004e1c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e14:	2103      	movs	r1, #3
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f95e 	bl	80050d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e1c:	2110      	movs	r1, #16
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f8fa 	bl	8005018 <USB_FlushTxFifo>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f924 	bl	800507c <USB_FlushRxFifo>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e44:	461a      	mov	r2, r3
 8004e46:	2300      	movs	r3, #0
 8004e48:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e50:	461a      	mov	r2, r3
 8004e52:	2300      	movs	r3, #0
 8004e54:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	2300      	movs	r3, #0
 8004e60:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e62:	2300      	movs	r3, #0
 8004e64:	613b      	str	r3, [r7, #16]
 8004e66:	e043      	b.n	8004ef0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e7e:	d118      	bne.n	8004eb2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10a      	bne.n	8004e9c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	015a      	lsls	r2, r3, #5
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e92:	461a      	mov	r2, r3
 8004e94:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004e98:	6013      	str	r3, [r2, #0]
 8004e9a:	e013      	b.n	8004ec4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004eae:	6013      	str	r3, [r2, #0]
 8004eb0:	e008      	b.n	8004ec4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	015a      	lsls	r2, r3, #5
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	4413      	add	r3, r2
 8004ede:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004ee8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	3301      	adds	r3, #1
 8004eee:	613b      	str	r3, [r7, #16]
 8004ef0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d3b5      	bcc.n	8004e68 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004efc:	2300      	movs	r3, #0
 8004efe:	613b      	str	r3, [r7, #16]
 8004f00:	e043      	b.n	8004f8a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f18:	d118      	bne.n	8004f4c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10a      	bne.n	8004f36 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004f32:	6013      	str	r3, [r2, #0]
 8004f34:	e013      	b.n	8004f5e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f42:	461a      	mov	r2, r3
 8004f44:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004f48:	6013      	str	r3, [r2, #0]
 8004f4a:	e008      	b.n	8004f5e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f58:	461a      	mov	r2, r3
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004f82:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	3301      	adds	r3, #1
 8004f88:	613b      	str	r3, [r7, #16]
 8004f8a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004f8e:	461a      	mov	r2, r3
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d3b5      	bcc.n	8004f02 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fa8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004fb6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004fb8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d105      	bne.n	8004fcc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	f043 0210 	orr.w	r2, r3, #16
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	699a      	ldr	r2, [r3, #24]
 8004fd0:	4b10      	ldr	r3, [pc, #64]	@ (8005014 <USB_DevInit+0x2c4>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004fd8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d005      	beq.n	8004fec <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	f043 0208 	orr.w	r2, r3, #8
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004fec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d107      	bne.n	8005004 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ffc:	f043 0304 	orr.w	r3, r3, #4
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005004:	7dfb      	ldrb	r3, [r7, #23]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3718      	adds	r7, #24
 800500a:	46bd      	mov	sp, r7
 800500c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005010:	b004      	add	sp, #16
 8005012:	4770      	bx	lr
 8005014:	803c3800 	.word	0x803c3800

08005018 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005022:	2300      	movs	r3, #0
 8005024:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	3301      	adds	r3, #1
 800502a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005032:	d901      	bls.n	8005038 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e01b      	b.n	8005070 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	2b00      	cmp	r3, #0
 800503e:	daf2      	bge.n	8005026 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	019b      	lsls	r3, r3, #6
 8005048:	f043 0220 	orr.w	r2, r3, #32
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	3301      	adds	r3, #1
 8005054:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800505c:	d901      	bls.n	8005062 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e006      	b.n	8005070 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	f003 0320 	and.w	r3, r3, #32
 800506a:	2b20      	cmp	r3, #32
 800506c:	d0f0      	beq.n	8005050 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3714      	adds	r7, #20
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005084:	2300      	movs	r3, #0
 8005086:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	3301      	adds	r3, #1
 800508c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005094:	d901      	bls.n	800509a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e018      	b.n	80050cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	daf2      	bge.n	8005088 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2210      	movs	r2, #16
 80050aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	3301      	adds	r3, #1
 80050b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050b8:	d901      	bls.n	80050be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e006      	b.n	80050cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	f003 0310 	and.w	r3, r3, #16
 80050c6:	2b10      	cmp	r3, #16
 80050c8:	d0f0      	beq.n	80050ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	460b      	mov	r3, r1
 80050e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	68f9      	ldr	r1, [r7, #12]
 80050f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050f8:	4313      	orrs	r3, r2
 80050fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800510a:	b480      	push	{r7}
 800510c:	b087      	sub	sp, #28
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 0306 	and.w	r3, r3, #6
 8005122:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d102      	bne.n	8005130 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800512a:	2300      	movs	r3, #0
 800512c:	75fb      	strb	r3, [r7, #23]
 800512e:	e00a      	b.n	8005146 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2b02      	cmp	r3, #2
 8005134:	d002      	beq.n	800513c <USB_GetDevSpeed+0x32>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2b06      	cmp	r3, #6
 800513a:	d102      	bne.n	8005142 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800513c:	2302      	movs	r3, #2
 800513e:	75fb      	strb	r3, [r7, #23]
 8005140:	e001      	b.n	8005146 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005142:	230f      	movs	r3, #15
 8005144:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005146:	7dfb      	ldrb	r3, [r7, #23]
}
 8005148:	4618      	mov	r0, r3
 800514a:	371c      	adds	r7, #28
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	785b      	ldrb	r3, [r3, #1]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d13a      	bne.n	80051e6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005176:	69da      	ldr	r2, [r3, #28]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	f003 030f 	and.w	r3, r3, #15
 8005180:	2101      	movs	r1, #1
 8005182:	fa01 f303 	lsl.w	r3, r1, r3
 8005186:	b29b      	uxth	r3, r3
 8005188:	68f9      	ldr	r1, [r7, #12]
 800518a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800518e:	4313      	orrs	r3, r2
 8005190:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4413      	add	r3, r2
 800519a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d155      	bne.n	8005254 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	791b      	ldrb	r3, [r3, #4]
 80051c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	059b      	lsls	r3, r3, #22
 80051ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051cc:	4313      	orrs	r3, r2
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	0151      	lsls	r1, r2, #5
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	440a      	add	r2, r1
 80051d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051e2:	6013      	str	r3, [r2, #0]
 80051e4:	e036      	b.n	8005254 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051ec:	69da      	ldr	r2, [r3, #28]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	f003 030f 	and.w	r3, r3, #15
 80051f6:	2101      	movs	r1, #1
 80051f8:	fa01 f303 	lsl.w	r3, r1, r3
 80051fc:	041b      	lsls	r3, r3, #16
 80051fe:	68f9      	ldr	r1, [r7, #12]
 8005200:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005204:	4313      	orrs	r3, r2
 8005206:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d11a      	bne.n	8005254 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4413      	add	r3, r2
 8005226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	791b      	ldrb	r3, [r3, #4]
 8005238:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800523a:	430b      	orrs	r3, r1
 800523c:	4313      	orrs	r3, r2
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	0151      	lsls	r1, r2, #5
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	440a      	add	r2, r1
 8005246:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800524a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800524e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005252:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3714      	adds	r7, #20
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
	...

08005264 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	785b      	ldrb	r3, [r3, #1]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d161      	bne.n	8005344 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4413      	add	r3, r2
 8005288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005292:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005296:	d11f      	bne.n	80052d8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	0151      	lsls	r1, r2, #5
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	440a      	add	r2, r1
 80052ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052b2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80052b6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	0151      	lsls	r1, r2, #5
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	440a      	add	r2, r1
 80052ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	f003 030f 	and.w	r3, r3, #15
 80052e8:	2101      	movs	r1, #1
 80052ea:	fa01 f303 	lsl.w	r3, r1, r3
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	43db      	mvns	r3, r3
 80052f2:	68f9      	ldr	r1, [r7, #12]
 80052f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052f8:	4013      	ands	r3, r2
 80052fa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005302:	69da      	ldr	r2, [r3, #28]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	f003 030f 	and.w	r3, r3, #15
 800530c:	2101      	movs	r1, #1
 800530e:	fa01 f303 	lsl.w	r3, r1, r3
 8005312:	b29b      	uxth	r3, r3
 8005314:	43db      	mvns	r3, r3
 8005316:	68f9      	ldr	r1, [r7, #12]
 8005318:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800531c:	4013      	ands	r3, r2
 800531e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4413      	add	r3, r2
 8005328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	0159      	lsls	r1, r3, #5
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	440b      	add	r3, r1
 8005336:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800533a:	4619      	mov	r1, r3
 800533c:	4b35      	ldr	r3, [pc, #212]	@ (8005414 <USB_DeactivateEndpoint+0x1b0>)
 800533e:	4013      	ands	r3, r2
 8005340:	600b      	str	r3, [r1, #0]
 8005342:	e060      	b.n	8005406 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4413      	add	r3, r2
 800534c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005356:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800535a:	d11f      	bne.n	800539c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	0151      	lsls	r1, r2, #5
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	440a      	add	r2, r1
 8005372:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005376:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800537a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	0151      	lsls	r1, r2, #5
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	440a      	add	r2, r1
 8005392:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005396:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800539a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	f003 030f 	and.w	r3, r3, #15
 80053ac:	2101      	movs	r1, #1
 80053ae:	fa01 f303 	lsl.w	r3, r1, r3
 80053b2:	041b      	lsls	r3, r3, #16
 80053b4:	43db      	mvns	r3, r3
 80053b6:	68f9      	ldr	r1, [r7, #12]
 80053b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053bc:	4013      	ands	r3, r2
 80053be:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053c6:	69da      	ldr	r2, [r3, #28]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	f003 030f 	and.w	r3, r3, #15
 80053d0:	2101      	movs	r1, #1
 80053d2:	fa01 f303 	lsl.w	r3, r1, r3
 80053d6:	041b      	lsls	r3, r3, #16
 80053d8:	43db      	mvns	r3, r3
 80053da:	68f9      	ldr	r1, [r7, #12]
 80053dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053e0:	4013      	ands	r3, r2
 80053e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	015a      	lsls	r2, r3, #5
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	0159      	lsls	r1, r3, #5
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	440b      	add	r3, r1
 80053fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053fe:	4619      	mov	r1, r3
 8005400:	4b05      	ldr	r3, [pc, #20]	@ (8005418 <USB_DeactivateEndpoint+0x1b4>)
 8005402:	4013      	ands	r3, r2
 8005404:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	ec337800 	.word	0xec337800
 8005418:	eff37800 	.word	0xeff37800

0800541c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b08a      	sub	sp, #40	@ 0x28
 8005420:	af02      	add	r7, sp, #8
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	4613      	mov	r3, r2
 8005428:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	785b      	ldrb	r3, [r3, #1]
 8005438:	2b01      	cmp	r3, #1
 800543a:	f040 817f 	bne.w	800573c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d132      	bne.n	80054ac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	4413      	add	r3, r2
 800544e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	0151      	lsls	r1, r2, #5
 8005458:	69fa      	ldr	r2, [r7, #28]
 800545a:	440a      	add	r2, r1
 800545c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005460:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005464:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005468:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	4413      	add	r3, r2
 8005472:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	0151      	lsls	r1, r2, #5
 800547c:	69fa      	ldr	r2, [r7, #28]
 800547e:	440a      	add	r2, r1
 8005480:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005484:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005488:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	4413      	add	r3, r2
 8005492:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	0151      	lsls	r1, r2, #5
 800549c:	69fa      	ldr	r2, [r7, #28]
 800549e:	440a      	add	r2, r1
 80054a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054a4:	0cdb      	lsrs	r3, r3, #19
 80054a6:	04db      	lsls	r3, r3, #19
 80054a8:	6113      	str	r3, [r2, #16]
 80054aa:	e097      	b.n	80055dc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	0151      	lsls	r1, r2, #5
 80054be:	69fa      	ldr	r2, [r7, #28]
 80054c0:	440a      	add	r2, r1
 80054c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054c6:	0cdb      	lsrs	r3, r3, #19
 80054c8:	04db      	lsls	r3, r3, #19
 80054ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	69ba      	ldr	r2, [r7, #24]
 80054dc:	0151      	lsls	r1, r2, #5
 80054de:	69fa      	ldr	r2, [r7, #28]
 80054e0:	440a      	add	r2, r1
 80054e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054e6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80054ea:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80054ee:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d11a      	bne.n	800552c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	691a      	ldr	r2, [r3, #16]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d903      	bls.n	800550a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	689a      	ldr	r2, [r3, #8]
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	015a      	lsls	r2, r3, #5
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	4413      	add	r3, r2
 8005512:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	0151      	lsls	r1, r2, #5
 800551c:	69fa      	ldr	r2, [r7, #28]
 800551e:	440a      	add	r2, r1
 8005520:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005524:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005528:	6113      	str	r3, [r2, #16]
 800552a:	e044      	b.n	80055b6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	691a      	ldr	r2, [r3, #16]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	4413      	add	r3, r2
 8005536:	1e5a      	subs	r2, r3, #1
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005540:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	8afb      	ldrh	r3, [r7, #22]
 8005552:	04d9      	lsls	r1, r3, #19
 8005554:	4ba4      	ldr	r3, [pc, #656]	@ (80057e8 <USB_EPStartXfer+0x3cc>)
 8005556:	400b      	ands	r3, r1
 8005558:	69b9      	ldr	r1, [r7, #24]
 800555a:	0148      	lsls	r0, r1, #5
 800555c:	69f9      	ldr	r1, [r7, #28]
 800555e:	4401      	add	r1, r0
 8005560:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005564:	4313      	orrs	r3, r2
 8005566:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	791b      	ldrb	r3, [r3, #4]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d122      	bne.n	80055b6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	4413      	add	r3, r2
 8005578:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	0151      	lsls	r1, r2, #5
 8005582:	69fa      	ldr	r2, [r7, #28]
 8005584:	440a      	add	r2, r1
 8005586:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800558a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800558e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800559c:	691a      	ldr	r2, [r3, #16]
 800559e:	8afb      	ldrh	r3, [r7, #22]
 80055a0:	075b      	lsls	r3, r3, #29
 80055a2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80055a6:	69b9      	ldr	r1, [r7, #24]
 80055a8:	0148      	lsls	r0, r1, #5
 80055aa:	69f9      	ldr	r1, [r7, #28]
 80055ac:	4401      	add	r1, r0
 80055ae:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80055b2:	4313      	orrs	r3, r2
 80055b4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055c2:	691a      	ldr	r2, [r3, #16]
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055cc:	69b9      	ldr	r1, [r7, #24]
 80055ce:	0148      	lsls	r0, r1, #5
 80055d0:	69f9      	ldr	r1, [r7, #28]
 80055d2:	4401      	add	r1, r0
 80055d4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80055d8:	4313      	orrs	r3, r2
 80055da:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80055dc:	79fb      	ldrb	r3, [r7, #7]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d14b      	bne.n	800567a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d009      	beq.n	80055fe <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055f6:	461a      	mov	r2, r3
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	69db      	ldr	r3, [r3, #28]
 80055fc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	791b      	ldrb	r3, [r3, #4]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d128      	bne.n	8005658 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005612:	2b00      	cmp	r3, #0
 8005614:	d110      	bne.n	8005638 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	015a      	lsls	r2, r3, #5
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	4413      	add	r3, r2
 800561e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	0151      	lsls	r1, r2, #5
 8005628:	69fa      	ldr	r2, [r7, #28]
 800562a:	440a      	add	r2, r1
 800562c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005630:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005634:	6013      	str	r3, [r2, #0]
 8005636:	e00f      	b.n	8005658 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	0151      	lsls	r1, r2, #5
 800564a:	69fa      	ldr	r2, [r7, #28]
 800564c:	440a      	add	r2, r1
 800564e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005656:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	4413      	add	r3, r2
 8005660:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	0151      	lsls	r1, r2, #5
 800566a:	69fa      	ldr	r2, [r7, #28]
 800566c:	440a      	add	r2, r1
 800566e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005672:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005676:	6013      	str	r3, [r2, #0]
 8005678:	e166      	b.n	8005948 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	4413      	add	r3, r2
 8005682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	0151      	lsls	r1, r2, #5
 800568c:	69fa      	ldr	r2, [r7, #28]
 800568e:	440a      	add	r2, r1
 8005690:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005694:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005698:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	791b      	ldrb	r3, [r3, #4]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d015      	beq.n	80056ce <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 814e 	beq.w	8005948 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	f003 030f 	and.w	r3, r3, #15
 80056bc:	2101      	movs	r1, #1
 80056be:	fa01 f303 	lsl.w	r3, r1, r3
 80056c2:	69f9      	ldr	r1, [r7, #28]
 80056c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056c8:	4313      	orrs	r3, r2
 80056ca:	634b      	str	r3, [r1, #52]	@ 0x34
 80056cc:	e13c      	b.n	8005948 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d110      	bne.n	8005700 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	015a      	lsls	r2, r3, #5
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	4413      	add	r3, r2
 80056e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	0151      	lsls	r1, r2, #5
 80056f0:	69fa      	ldr	r2, [r7, #28]
 80056f2:	440a      	add	r2, r1
 80056f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80056fc:	6013      	str	r3, [r2, #0]
 80056fe:	e00f      	b.n	8005720 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	4413      	add	r3, r2
 8005708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	0151      	lsls	r1, r2, #5
 8005712:	69fa      	ldr	r2, [r7, #28]
 8005714:	440a      	add	r2, r1
 8005716:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800571a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800571e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	68d9      	ldr	r1, [r3, #12]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	781a      	ldrb	r2, [r3, #0]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	b298      	uxth	r0, r3
 800572e:	79fb      	ldrb	r3, [r7, #7]
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	4603      	mov	r3, r0
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f000 f9b9 	bl	8005aac <USB_WritePacket>
 800573a:	e105      	b.n	8005948 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	0151      	lsls	r1, r2, #5
 800574e:	69fa      	ldr	r2, [r7, #28]
 8005750:	440a      	add	r2, r1
 8005752:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005756:	0cdb      	lsrs	r3, r3, #19
 8005758:	04db      	lsls	r3, r3, #19
 800575a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	015a      	lsls	r2, r3, #5
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	4413      	add	r3, r2
 8005764:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	0151      	lsls	r1, r2, #5
 800576e:	69fa      	ldr	r2, [r7, #28]
 8005770:	440a      	add	r2, r1
 8005772:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005776:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800577a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800577e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d132      	bne.n	80057ec <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	689a      	ldr	r2, [r3, #8]
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	689a      	ldr	r2, [r3, #8]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	015a      	lsls	r2, r3, #5
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057aa:	691a      	ldr	r2, [r3, #16]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057b4:	69b9      	ldr	r1, [r7, #24]
 80057b6:	0148      	lsls	r0, r1, #5
 80057b8:	69f9      	ldr	r1, [r7, #28]
 80057ba:	4401      	add	r1, r0
 80057bc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80057c0:	4313      	orrs	r3, r2
 80057c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	0151      	lsls	r1, r2, #5
 80057d6:	69fa      	ldr	r2, [r7, #28]
 80057d8:	440a      	add	r2, r1
 80057da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80057e2:	6113      	str	r3, [r2, #16]
 80057e4:	e062      	b.n	80058ac <USB_EPStartXfer+0x490>
 80057e6:	bf00      	nop
 80057e8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d123      	bne.n	800583c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005800:	691a      	ldr	r2, [r3, #16]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800580a:	69b9      	ldr	r1, [r7, #24]
 800580c:	0148      	lsls	r0, r1, #5
 800580e:	69f9      	ldr	r1, [r7, #28]
 8005810:	4401      	add	r1, r0
 8005812:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005816:	4313      	orrs	r3, r2
 8005818:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	4413      	add	r3, r2
 8005822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	0151      	lsls	r1, r2, #5
 800582c:	69fa      	ldr	r2, [r7, #28]
 800582e:	440a      	add	r2, r1
 8005830:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005834:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005838:	6113      	str	r3, [r2, #16]
 800583a:	e037      	b.n	80058ac <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	691a      	ldr	r2, [r3, #16]
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	4413      	add	r3, r2
 8005846:	1e5a      	subs	r2, r3, #1
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005850:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	8afa      	ldrh	r2, [r7, #22]
 8005858:	fb03 f202 	mul.w	r2, r3, r2
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	4413      	add	r3, r2
 8005868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800586c:	691a      	ldr	r2, [r3, #16]
 800586e:	8afb      	ldrh	r3, [r7, #22]
 8005870:	04d9      	lsls	r1, r3, #19
 8005872:	4b38      	ldr	r3, [pc, #224]	@ (8005954 <USB_EPStartXfer+0x538>)
 8005874:	400b      	ands	r3, r1
 8005876:	69b9      	ldr	r1, [r7, #24]
 8005878:	0148      	lsls	r0, r1, #5
 800587a:	69f9      	ldr	r1, [r7, #28]
 800587c:	4401      	add	r1, r0
 800587e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005882:	4313      	orrs	r3, r2
 8005884:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005892:	691a      	ldr	r2, [r3, #16]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800589c:	69b9      	ldr	r1, [r7, #24]
 800589e:	0148      	lsls	r0, r1, #5
 80058a0:	69f9      	ldr	r1, [r7, #28]
 80058a2:	4401      	add	r1, r0
 80058a4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80058a8:	4313      	orrs	r3, r2
 80058aa:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80058ac:	79fb      	ldrb	r3, [r7, #7]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d10d      	bne.n	80058ce <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d009      	beq.n	80058ce <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	68d9      	ldr	r1, [r3, #12]
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058ca:	460a      	mov	r2, r1
 80058cc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	791b      	ldrb	r3, [r3, #4]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d128      	bne.n	8005928 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d110      	bne.n	8005908 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	0151      	lsls	r1, r2, #5
 80058f8:	69fa      	ldr	r2, [r7, #28]
 80058fa:	440a      	add	r2, r1
 80058fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005900:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005904:	6013      	str	r3, [r2, #0]
 8005906:	e00f      	b.n	8005928 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	015a      	lsls	r2, r3, #5
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	4413      	add	r3, r2
 8005910:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	69ba      	ldr	r2, [r7, #24]
 8005918:	0151      	lsls	r1, r2, #5
 800591a:	69fa      	ldr	r2, [r7, #28]
 800591c:	440a      	add	r2, r1
 800591e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005922:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005926:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	0151      	lsls	r1, r2, #5
 800593a:	69fa      	ldr	r2, [r7, #28]
 800593c:	440a      	add	r2, r1
 800593e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005942:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005946:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3720      	adds	r7, #32
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	1ff80000 	.word	0x1ff80000

08005958 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005958:	b480      	push	{r7}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005962:	2300      	movs	r3, #0
 8005964:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005966:	2300      	movs	r3, #0
 8005968:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	785b      	ldrb	r3, [r3, #1]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d14a      	bne.n	8005a0c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	015a      	lsls	r2, r3, #5
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	4413      	add	r3, r2
 8005980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800598a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800598e:	f040 8086 	bne.w	8005a9e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	4413      	add	r3, r2
 800599c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	7812      	ldrb	r2, [r2, #0]
 80059a6:	0151      	lsls	r1, r2, #5
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	440a      	add	r2, r1
 80059ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80059b4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	7812      	ldrb	r2, [r2, #0]
 80059ca:	0151      	lsls	r1, r2, #5
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	440a      	add	r2, r1
 80059d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80059d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	3301      	adds	r3, #1
 80059de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d902      	bls.n	80059f0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	75fb      	strb	r3, [r7, #23]
          break;
 80059ee:	e056      	b.n	8005a9e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	015a      	lsls	r2, r3, #5
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a08:	d0e7      	beq.n	80059da <USB_EPStopXfer+0x82>
 8005a0a:	e048      	b.n	8005a9e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a24:	d13b      	bne.n	8005a9e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	7812      	ldrb	r2, [r2, #0]
 8005a3a:	0151      	lsls	r1, r2, #5
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	440a      	add	r2, r1
 8005a40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a44:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005a48:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	015a      	lsls	r2, r3, #5
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	4413      	add	r3, r2
 8005a54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	7812      	ldrb	r2, [r2, #0]
 8005a5e:	0151      	lsls	r1, r2, #5
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	440a      	add	r2, r1
 8005a64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a68:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a6c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	3301      	adds	r3, #1
 8005a72:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d902      	bls.n	8005a84 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	75fb      	strb	r3, [r7, #23]
          break;
 8005a82:	e00c      	b.n	8005a9e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a9c:	d0e7      	beq.n	8005a6e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	371c      	adds	r7, #28
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b089      	sub	sp, #36	@ 0x24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	4611      	mov	r1, r2
 8005ab8:	461a      	mov	r2, r3
 8005aba:	460b      	mov	r3, r1
 8005abc:	71fb      	strb	r3, [r7, #7]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005aca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d123      	bne.n	8005b1a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ad2:	88bb      	ldrh	r3, [r7, #4]
 8005ad4:	3303      	adds	r3, #3
 8005ad6:	089b      	lsrs	r3, r3, #2
 8005ad8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005ada:	2300      	movs	r3, #0
 8005adc:	61bb      	str	r3, [r7, #24]
 8005ade:	e018      	b.n	8005b12 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ae0:	79fb      	ldrb	r3, [r7, #7]
 8005ae2:	031a      	lsls	r2, r3, #12
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005aec:	461a      	mov	r2, r3
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	3301      	adds	r3, #1
 8005af8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	3301      	adds	r3, #1
 8005afe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	3301      	adds	r3, #1
 8005b04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	61bb      	str	r3, [r7, #24]
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d3e2      	bcc.n	8005ae0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3724      	adds	r7, #36	@ 0x24
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b08b      	sub	sp, #44	@ 0x2c
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	4613      	mov	r3, r2
 8005b34:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005b3e:	88fb      	ldrh	r3, [r7, #6]
 8005b40:	089b      	lsrs	r3, r3, #2
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005b46:	88fb      	ldrh	r3, [r7, #6]
 8005b48:	f003 0303 	and.w	r3, r3, #3
 8005b4c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b4e:	2300      	movs	r3, #0
 8005b50:	623b      	str	r3, [r7, #32]
 8005b52:	e014      	b.n	8005b7e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b62:	3301      	adds	r3, #1
 8005b64:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b68:	3301      	adds	r3, #1
 8005b6a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6e:	3301      	adds	r3, #1
 8005b70:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b74:	3301      	adds	r3, #1
 8005b76:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	623b      	str	r3, [r7, #32]
 8005b7e:	6a3a      	ldr	r2, [r7, #32]
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d3e6      	bcc.n	8005b54 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005b86:	8bfb      	ldrh	r3, [r7, #30]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d01e      	beq.n	8005bca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b96:	461a      	mov	r2, r3
 8005b98:	f107 0310 	add.w	r3, r7, #16
 8005b9c:	6812      	ldr	r2, [r2, #0]
 8005b9e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	00db      	lsls	r3, r3, #3
 8005ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb0:	701a      	strb	r2, [r3, #0]
      i++;
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	623b      	str	r3, [r7, #32]
      pDest++;
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bba:	3301      	adds	r3, #1
 8005bbc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005bbe:	8bfb      	ldrh	r3, [r7, #30]
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005bc4:	8bfb      	ldrh	r3, [r7, #30]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1ea      	bne.n	8005ba0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	372c      	adds	r7, #44	@ 0x2c
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	785b      	ldrb	r3, [r3, #1]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d12c      	bne.n	8005c4e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	db12      	blt.n	8005c2c <USB_EPSetStall+0x54>
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00f      	beq.n	8005c2c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	0151      	lsls	r1, r2, #5
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	440a      	add	r2, r1
 8005c22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c26:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005c2a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	0151      	lsls	r1, r2, #5
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	440a      	add	r2, r1
 8005c42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c46:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005c4a:	6013      	str	r3, [r2, #0]
 8005c4c:	e02b      	b.n	8005ca6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	db12      	blt.n	8005c86 <USB_EPSetStall+0xae>
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00f      	beq.n	8005c86 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	0151      	lsls	r1, r2, #5
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	440a      	add	r2, r1
 8005c7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c80:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005c84:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	015a      	lsls	r2, r3, #5
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	0151      	lsls	r1, r2, #5
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	440a      	add	r2, r1
 8005c9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ca0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005ca4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	785b      	ldrb	r3, [r3, #1]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d128      	bne.n	8005d22 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	0151      	lsls	r1, r2, #5
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	440a      	add	r2, r1
 8005ce6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005cee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	791b      	ldrb	r3, [r3, #4]
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d003      	beq.n	8005d00 <USB_EPClearStall+0x4c>
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	791b      	ldrb	r3, [r3, #4]
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d138      	bne.n	8005d72 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	0151      	lsls	r1, r2, #5
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	440a      	add	r2, r1
 8005d16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d1e:	6013      	str	r3, [r2, #0]
 8005d20:	e027      	b.n	8005d72 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	0151      	lsls	r1, r2, #5
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	440a      	add	r2, r1
 8005d38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d3c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d40:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	791b      	ldrb	r3, [r3, #4]
 8005d46:	2b03      	cmp	r3, #3
 8005d48:	d003      	beq.n	8005d52 <USB_EPClearStall+0x9e>
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	791b      	ldrb	r3, [r3, #4]
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d10f      	bne.n	8005d72 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	015a      	lsls	r2, r3, #5
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	0151      	lsls	r1, r2, #5
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	440a      	add	r2, r1
 8005d68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d70:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	460b      	mov	r3, r1
 8005d8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d9e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005da2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	78fb      	ldrb	r3, [r7, #3]
 8005dae:	011b      	lsls	r3, r3, #4
 8005db0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005db4:	68f9      	ldr	r1, [r7, #12]
 8005db6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3714      	adds	r7, #20
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005de6:	f023 0303 	bic.w	r3, r3, #3
 8005dea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005dfa:	f023 0302 	bic.w	r3, r3, #2
 8005dfe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b085      	sub	sp, #20
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005e28:	f023 0303 	bic.w	r3, r3, #3
 8005e2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e3c:	f043 0302 	orr.w	r3, r3, #2
 8005e40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	4013      	ands	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e68:	68fb      	ldr	r3, [r7, #12]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b085      	sub	sp, #20
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e92:	69db      	ldr	r3, [r3, #28]
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	4013      	ands	r3, r2
 8005e98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	0c1b      	lsrs	r3, r3, #16
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b085      	sub	sp, #20
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ec6:	69db      	ldr	r3, [r3, #28]
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	4013      	ands	r3, r2
 8005ecc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	b29b      	uxth	r3, r3
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b085      	sub	sp, #20
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005eee:	78fb      	ldrb	r3, [r7, #3]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	4013      	ands	r3, r2
 8005f0a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f0c:	68bb      	ldr	r3, [r7, #8]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b087      	sub	sp, #28
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	460b      	mov	r3, r1
 8005f24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f3c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005f3e:	78fb      	ldrb	r3, [r7, #3]
 8005f40:	f003 030f 	and.w	r3, r3, #15
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	fa22 f303 	lsr.w	r3, r2, r3
 8005f4a:	01db      	lsls	r3, r3, #7
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005f54:	78fb      	ldrb	r3, [r7, #3]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	4013      	ands	r3, r2
 8005f66:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f68:	68bb      	ldr	r3, [r7, #8]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	371c      	adds	r7, #28
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b083      	sub	sp, #12
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	f003 0301 	and.w	r3, r3, #1
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b085      	sub	sp, #20
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fac:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005fb0:	f023 0307 	bic.w	r3, r3, #7
 8005fb4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fc8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3714      	adds	r7, #20
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b087      	sub	sp, #28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	607a      	str	r2, [r7, #4]
 8005fe4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	333c      	adds	r3, #60	@ 0x3c
 8005fee:	3304      	adds	r3, #4
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	4a26      	ldr	r2, [pc, #152]	@ (8006090 <USB_EP0_OutStart+0xb8>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d90a      	bls.n	8006012 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006008:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800600c:	d101      	bne.n	8006012 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800600e:	2300      	movs	r3, #0
 8006010:	e037      	b.n	8006082 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006018:	461a      	mov	r2, r3
 800601a:	2300      	movs	r3, #0
 800601c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800602c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006030:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006040:	f043 0318 	orr.w	r3, r3, #24
 8006044:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006054:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006058:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800605a:	7afb      	ldrb	r3, [r7, #11]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d10f      	bne.n	8006080 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006066:	461a      	mov	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800607a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800607e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	371c      	adds	r7, #28
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	4f54300a 	.word	0x4f54300a

08006094 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800609c:	2300      	movs	r3, #0
 800609e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	3301      	adds	r3, #1
 80060a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060ac:	d901      	bls.n	80060b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e01b      	b.n	80060ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	daf2      	bge.n	80060a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	f043 0201 	orr.w	r2, r3, #1
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	3301      	adds	r3, #1
 80060ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060d6:	d901      	bls.n	80060dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e006      	b.n	80060ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	f003 0301 	and.w	r3, r3, #1
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d0f0      	beq.n	80060ca <USB_CoreReset+0x36>

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3714      	adds	r7, #20
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
	...

080060f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	460b      	mov	r3, r1
 8006102:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006104:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006108:	f002 fc38 	bl	800897c <USBD_static_malloc>
 800610c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d109      	bne.n	8006128 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	32b0      	adds	r2, #176	@ 0xb0
 800611e:	2100      	movs	r1, #0
 8006120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006124:	2302      	movs	r3, #2
 8006126:	e0d4      	b.n	80062d2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006128:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800612c:	2100      	movs	r1, #0
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f002 fc88 	bl	8008a44 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	32b0      	adds	r2, #176	@ 0xb0
 800613e:	68f9      	ldr	r1, [r7, #12]
 8006140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	32b0      	adds	r2, #176	@ 0xb0
 800614e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	7c1b      	ldrb	r3, [r3, #16]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d138      	bne.n	80061d2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006160:	4b5e      	ldr	r3, [pc, #376]	@ (80062dc <USBD_CDC_Init+0x1e4>)
 8006162:	7819      	ldrb	r1, [r3, #0]
 8006164:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006168:	2202      	movs	r2, #2
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f002 fae3 	bl	8008736 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006170:	4b5a      	ldr	r3, [pc, #360]	@ (80062dc <USBD_CDC_Init+0x1e4>)
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	f003 020f 	and.w	r2, r3, #15
 8006178:	6879      	ldr	r1, [r7, #4]
 800617a:	4613      	mov	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	440b      	add	r3, r1
 8006184:	3324      	adds	r3, #36	@ 0x24
 8006186:	2201      	movs	r2, #1
 8006188:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800618a:	4b55      	ldr	r3, [pc, #340]	@ (80062e0 <USBD_CDC_Init+0x1e8>)
 800618c:	7819      	ldrb	r1, [r3, #0]
 800618e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006192:	2202      	movs	r2, #2
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f002 face 	bl	8008736 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800619a:	4b51      	ldr	r3, [pc, #324]	@ (80062e0 <USBD_CDC_Init+0x1e8>)
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	f003 020f 	and.w	r2, r3, #15
 80061a2:	6879      	ldr	r1, [r7, #4]
 80061a4:	4613      	mov	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	440b      	add	r3, r1
 80061ae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80061b2:	2201      	movs	r2, #1
 80061b4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80061b6:	4b4b      	ldr	r3, [pc, #300]	@ (80062e4 <USBD_CDC_Init+0x1ec>)
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	f003 020f 	and.w	r2, r3, #15
 80061be:	6879      	ldr	r1, [r7, #4]
 80061c0:	4613      	mov	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	4413      	add	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	440b      	add	r3, r1
 80061ca:	3326      	adds	r3, #38	@ 0x26
 80061cc:	2210      	movs	r2, #16
 80061ce:	801a      	strh	r2, [r3, #0]
 80061d0:	e035      	b.n	800623e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80061d2:	4b42      	ldr	r3, [pc, #264]	@ (80062dc <USBD_CDC_Init+0x1e4>)
 80061d4:	7819      	ldrb	r1, [r3, #0]
 80061d6:	2340      	movs	r3, #64	@ 0x40
 80061d8:	2202      	movs	r2, #2
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f002 faab 	bl	8008736 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80061e0:	4b3e      	ldr	r3, [pc, #248]	@ (80062dc <USBD_CDC_Init+0x1e4>)
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	f003 020f 	and.w	r2, r3, #15
 80061e8:	6879      	ldr	r1, [r7, #4]
 80061ea:	4613      	mov	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4413      	add	r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	440b      	add	r3, r1
 80061f4:	3324      	adds	r3, #36	@ 0x24
 80061f6:	2201      	movs	r2, #1
 80061f8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80061fa:	4b39      	ldr	r3, [pc, #228]	@ (80062e0 <USBD_CDC_Init+0x1e8>)
 80061fc:	7819      	ldrb	r1, [r3, #0]
 80061fe:	2340      	movs	r3, #64	@ 0x40
 8006200:	2202      	movs	r2, #2
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f002 fa97 	bl	8008736 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006208:	4b35      	ldr	r3, [pc, #212]	@ (80062e0 <USBD_CDC_Init+0x1e8>)
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	f003 020f 	and.w	r2, r3, #15
 8006210:	6879      	ldr	r1, [r7, #4]
 8006212:	4613      	mov	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4413      	add	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	440b      	add	r3, r1
 800621c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006220:	2201      	movs	r2, #1
 8006222:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006224:	4b2f      	ldr	r3, [pc, #188]	@ (80062e4 <USBD_CDC_Init+0x1ec>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	f003 020f 	and.w	r2, r3, #15
 800622c:	6879      	ldr	r1, [r7, #4]
 800622e:	4613      	mov	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	440b      	add	r3, r1
 8006238:	3326      	adds	r3, #38	@ 0x26
 800623a:	2210      	movs	r2, #16
 800623c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800623e:	4b29      	ldr	r3, [pc, #164]	@ (80062e4 <USBD_CDC_Init+0x1ec>)
 8006240:	7819      	ldrb	r1, [r3, #0]
 8006242:	2308      	movs	r3, #8
 8006244:	2203      	movs	r2, #3
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f002 fa75 	bl	8008736 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800624c:	4b25      	ldr	r3, [pc, #148]	@ (80062e4 <USBD_CDC_Init+0x1ec>)
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	f003 020f 	and.w	r2, r3, #15
 8006254:	6879      	ldr	r1, [r7, #4]
 8006256:	4613      	mov	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	4413      	add	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	440b      	add	r3, r1
 8006260:	3324      	adds	r3, #36	@ 0x24
 8006262:	2201      	movs	r2, #1
 8006264:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	33b0      	adds	r3, #176	@ 0xb0
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4413      	add	r3, r2
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800629c:	2302      	movs	r3, #2
 800629e:	e018      	b.n	80062d2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	7c1b      	ldrb	r3, [r3, #16]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10a      	bne.n	80062be <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80062a8:	4b0d      	ldr	r3, [pc, #52]	@ (80062e0 <USBD_CDC_Init+0x1e8>)
 80062aa:	7819      	ldrb	r1, [r3, #0]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80062b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f002 fb2c 	bl	8008914 <USBD_LL_PrepareReceive>
 80062bc:	e008      	b.n	80062d0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80062be:	4b08      	ldr	r3, [pc, #32]	@ (80062e0 <USBD_CDC_Init+0x1e8>)
 80062c0:	7819      	ldrb	r1, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80062c8:	2340      	movs	r3, #64	@ 0x40
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f002 fb22 	bl	8008914 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	200000a7 	.word	0x200000a7
 80062e0:	200000a8 	.word	0x200000a8
 80062e4:	200000a9 	.word	0x200000a9

080062e8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	460b      	mov	r3, r1
 80062f2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80062f4:	4b3a      	ldr	r3, [pc, #232]	@ (80063e0 <USBD_CDC_DeInit+0xf8>)
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	4619      	mov	r1, r3
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f002 fa41 	bl	8008782 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006300:	4b37      	ldr	r3, [pc, #220]	@ (80063e0 <USBD_CDC_DeInit+0xf8>)
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	f003 020f 	and.w	r2, r3, #15
 8006308:	6879      	ldr	r1, [r7, #4]
 800630a:	4613      	mov	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	440b      	add	r3, r1
 8006314:	3324      	adds	r3, #36	@ 0x24
 8006316:	2200      	movs	r2, #0
 8006318:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800631a:	4b32      	ldr	r3, [pc, #200]	@ (80063e4 <USBD_CDC_DeInit+0xfc>)
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	4619      	mov	r1, r3
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f002 fa2e 	bl	8008782 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006326:	4b2f      	ldr	r3, [pc, #188]	@ (80063e4 <USBD_CDC_DeInit+0xfc>)
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	f003 020f 	and.w	r2, r3, #15
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	4613      	mov	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	4413      	add	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	440b      	add	r3, r1
 800633a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800633e:	2200      	movs	r2, #0
 8006340:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006342:	4b29      	ldr	r3, [pc, #164]	@ (80063e8 <USBD_CDC_DeInit+0x100>)
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	4619      	mov	r1, r3
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f002 fa1a 	bl	8008782 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800634e:	4b26      	ldr	r3, [pc, #152]	@ (80063e8 <USBD_CDC_DeInit+0x100>)
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	f003 020f 	and.w	r2, r3, #15
 8006356:	6879      	ldr	r1, [r7, #4]
 8006358:	4613      	mov	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4413      	add	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	440b      	add	r3, r1
 8006362:	3324      	adds	r3, #36	@ 0x24
 8006364:	2200      	movs	r2, #0
 8006366:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006368:	4b1f      	ldr	r3, [pc, #124]	@ (80063e8 <USBD_CDC_DeInit+0x100>)
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	f003 020f 	and.w	r2, r3, #15
 8006370:	6879      	ldr	r1, [r7, #4]
 8006372:	4613      	mov	r3, r2
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4413      	add	r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	440b      	add	r3, r1
 800637c:	3326      	adds	r3, #38	@ 0x26
 800637e:	2200      	movs	r2, #0
 8006380:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	32b0      	adds	r2, #176	@ 0xb0
 800638c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d01f      	beq.n	80063d4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	33b0      	adds	r3, #176	@ 0xb0
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	32b0      	adds	r2, #176	@ 0xb0
 80063b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f002 faee 	bl	8008998 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	32b0      	adds	r2, #176	@ 0xb0
 80063c6:	2100      	movs	r1, #0
 80063c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3708      	adds	r7, #8
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	200000a7 	.word	0x200000a7
 80063e4:	200000a8 	.word	0x200000a8
 80063e8:	200000a9 	.word	0x200000a9

080063ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	32b0      	adds	r2, #176	@ 0xb0
 8006400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006404:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006406:	2300      	movs	r3, #0
 8006408:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800640a:	2300      	movs	r3, #0
 800640c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800640e:	2300      	movs	r3, #0
 8006410:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d101      	bne.n	800641c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006418:	2303      	movs	r3, #3
 800641a:	e0bf      	b.n	800659c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006424:	2b00      	cmp	r3, #0
 8006426:	d050      	beq.n	80064ca <USBD_CDC_Setup+0xde>
 8006428:	2b20      	cmp	r3, #32
 800642a:	f040 80af 	bne.w	800658c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	88db      	ldrh	r3, [r3, #6]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d03a      	beq.n	80064ac <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	b25b      	sxtb	r3, r3
 800643c:	2b00      	cmp	r3, #0
 800643e:	da1b      	bge.n	8006478 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	33b0      	adds	r3, #176	@ 0xb0
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006456:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	88d2      	ldrh	r2, [r2, #6]
 800645c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	88db      	ldrh	r3, [r3, #6]
 8006462:	2b07      	cmp	r3, #7
 8006464:	bf28      	it	cs
 8006466:	2307      	movcs	r3, #7
 8006468:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	89fa      	ldrh	r2, [r7, #14]
 800646e:	4619      	mov	r1, r3
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f001 fd53 	bl	8007f1c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006476:	e090      	b.n	800659a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	785a      	ldrb	r2, [r3, #1]
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	88db      	ldrh	r3, [r3, #6]
 8006486:	2b3f      	cmp	r3, #63	@ 0x3f
 8006488:	d803      	bhi.n	8006492 <USBD_CDC_Setup+0xa6>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	88db      	ldrh	r3, [r3, #6]
 800648e:	b2da      	uxtb	r2, r3
 8006490:	e000      	b.n	8006494 <USBD_CDC_Setup+0xa8>
 8006492:	2240      	movs	r2, #64	@ 0x40
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800649a:	6939      	ldr	r1, [r7, #16]
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80064a2:	461a      	mov	r2, r3
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f001 fd65 	bl	8007f74 <USBD_CtlPrepareRx>
      break;
 80064aa:	e076      	b.n	800659a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	33b0      	adds	r3, #176	@ 0xb0
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4413      	add	r3, r2
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	7850      	ldrb	r0, [r2, #1]
 80064c2:	2200      	movs	r2, #0
 80064c4:	6839      	ldr	r1, [r7, #0]
 80064c6:	4798      	blx	r3
      break;
 80064c8:	e067      	b.n	800659a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	785b      	ldrb	r3, [r3, #1]
 80064ce:	2b0b      	cmp	r3, #11
 80064d0:	d851      	bhi.n	8006576 <USBD_CDC_Setup+0x18a>
 80064d2:	a201      	add	r2, pc, #4	@ (adr r2, 80064d8 <USBD_CDC_Setup+0xec>)
 80064d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d8:	08006509 	.word	0x08006509
 80064dc:	08006585 	.word	0x08006585
 80064e0:	08006577 	.word	0x08006577
 80064e4:	08006577 	.word	0x08006577
 80064e8:	08006577 	.word	0x08006577
 80064ec:	08006577 	.word	0x08006577
 80064f0:	08006577 	.word	0x08006577
 80064f4:	08006577 	.word	0x08006577
 80064f8:	08006577 	.word	0x08006577
 80064fc:	08006577 	.word	0x08006577
 8006500:	08006533 	.word	0x08006533
 8006504:	0800655d 	.word	0x0800655d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b03      	cmp	r3, #3
 8006512:	d107      	bne.n	8006524 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006514:	f107 030a 	add.w	r3, r7, #10
 8006518:	2202      	movs	r2, #2
 800651a:	4619      	mov	r1, r3
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f001 fcfd 	bl	8007f1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006522:	e032      	b.n	800658a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006524:	6839      	ldr	r1, [r7, #0]
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f001 fc7b 	bl	8007e22 <USBD_CtlError>
            ret = USBD_FAIL;
 800652c:	2303      	movs	r3, #3
 800652e:	75fb      	strb	r3, [r7, #23]
          break;
 8006530:	e02b      	b.n	800658a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b03      	cmp	r3, #3
 800653c:	d107      	bne.n	800654e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800653e:	f107 030d 	add.w	r3, r7, #13
 8006542:	2201      	movs	r2, #1
 8006544:	4619      	mov	r1, r3
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f001 fce8 	bl	8007f1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800654c:	e01d      	b.n	800658a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800654e:	6839      	ldr	r1, [r7, #0]
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f001 fc66 	bl	8007e22 <USBD_CtlError>
            ret = USBD_FAIL;
 8006556:	2303      	movs	r3, #3
 8006558:	75fb      	strb	r3, [r7, #23]
          break;
 800655a:	e016      	b.n	800658a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b03      	cmp	r3, #3
 8006566:	d00f      	beq.n	8006588 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f001 fc59 	bl	8007e22 <USBD_CtlError>
            ret = USBD_FAIL;
 8006570:	2303      	movs	r3, #3
 8006572:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006574:	e008      	b.n	8006588 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006576:	6839      	ldr	r1, [r7, #0]
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f001 fc52 	bl	8007e22 <USBD_CtlError>
          ret = USBD_FAIL;
 800657e:	2303      	movs	r3, #3
 8006580:	75fb      	strb	r3, [r7, #23]
          break;
 8006582:	e002      	b.n	800658a <USBD_CDC_Setup+0x19e>
          break;
 8006584:	bf00      	nop
 8006586:	e008      	b.n	800659a <USBD_CDC_Setup+0x1ae>
          break;
 8006588:	bf00      	nop
      }
      break;
 800658a:	e006      	b.n	800659a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800658c:	6839      	ldr	r1, [r7, #0]
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f001 fc47 	bl	8007e22 <USBD_CtlError>
      ret = USBD_FAIL;
 8006594:	2303      	movs	r3, #3
 8006596:	75fb      	strb	r3, [r7, #23]
      break;
 8006598:	bf00      	nop
  }

  return (uint8_t)ret;
 800659a:	7dfb      	ldrb	r3, [r7, #23]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3718      	adds	r7, #24
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	460b      	mov	r3, r1
 80065ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80065b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	32b0      	adds	r2, #176	@ 0xb0
 80065c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e065      	b.n	800669a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	32b0      	adds	r2, #176	@ 0xb0
 80065d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065dc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80065de:	78fb      	ldrb	r3, [r7, #3]
 80065e0:	f003 020f 	and.w	r2, r3, #15
 80065e4:	6879      	ldr	r1, [r7, #4]
 80065e6:	4613      	mov	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4413      	add	r3, r2
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	440b      	add	r3, r1
 80065f0:	3318      	adds	r3, #24
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d02f      	beq.n	8006658 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80065f8:	78fb      	ldrb	r3, [r7, #3]
 80065fa:	f003 020f 	and.w	r2, r3, #15
 80065fe:	6879      	ldr	r1, [r7, #4]
 8006600:	4613      	mov	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4413      	add	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	440b      	add	r3, r1
 800660a:	3318      	adds	r3, #24
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	78fb      	ldrb	r3, [r7, #3]
 8006610:	f003 010f 	and.w	r1, r3, #15
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	460b      	mov	r3, r1
 8006618:	00db      	lsls	r3, r3, #3
 800661a:	440b      	add	r3, r1
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4403      	add	r3, r0
 8006620:	331c      	adds	r3, #28
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	fbb2 f1f3 	udiv	r1, r2, r3
 8006628:	fb01 f303 	mul.w	r3, r1, r3
 800662c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800662e:	2b00      	cmp	r3, #0
 8006630:	d112      	bne.n	8006658 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006632:	78fb      	ldrb	r3, [r7, #3]
 8006634:	f003 020f 	and.w	r2, r3, #15
 8006638:	6879      	ldr	r1, [r7, #4]
 800663a:	4613      	mov	r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4413      	add	r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	440b      	add	r3, r1
 8006644:	3318      	adds	r3, #24
 8006646:	2200      	movs	r2, #0
 8006648:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800664a:	78f9      	ldrb	r1, [r7, #3]
 800664c:	2300      	movs	r3, #0
 800664e:	2200      	movs	r2, #0
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f002 f93e 	bl	80088d2 <USBD_LL_Transmit>
 8006656:	e01f      	b.n	8006698 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	2200      	movs	r2, #0
 800665c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	33b0      	adds	r3, #176	@ 0xb0
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4413      	add	r3, r2
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d010      	beq.n	8006698 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	33b0      	adds	r3, #176	@ 0xb0
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006694:	78fa      	ldrb	r2, [r7, #3]
 8006696:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b084      	sub	sp, #16
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
 80066aa:	460b      	mov	r3, r1
 80066ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	32b0      	adds	r2, #176	@ 0xb0
 80066b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066bc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	32b0      	adds	r2, #176	@ 0xb0
 80066c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d101      	bne.n	80066d4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e01a      	b.n	800670a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80066d4:	78fb      	ldrb	r3, [r7, #3]
 80066d6:	4619      	mov	r1, r3
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f002 f93c 	bl	8008956 <USBD_LL_GetRxDataSize>
 80066de:	4602      	mov	r2, r0
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	33b0      	adds	r3, #176	@ 0xb0
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4413      	add	r3, r2
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006704:	4611      	mov	r1, r2
 8006706:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b084      	sub	sp, #16
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	32b0      	adds	r2, #176	@ 0xb0
 8006724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006728:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d101      	bne.n	8006734 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006730:	2303      	movs	r3, #3
 8006732:	e024      	b.n	800677e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	33b0      	adds	r3, #176	@ 0xb0
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d019      	beq.n	800677c <USBD_CDC_EP0_RxReady+0x6a>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800674e:	2bff      	cmp	r3, #255	@ 0xff
 8006750:	d014      	beq.n	800677c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	33b0      	adds	r3, #176	@ 0xb0
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800676a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006772:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	22ff      	movs	r2, #255	@ 0xff
 8006778:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
	...

08006788 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006790:	2182      	movs	r1, #130	@ 0x82
 8006792:	4818      	ldr	r0, [pc, #96]	@ (80067f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006794:	f000 fd0f 	bl	80071b6 <USBD_GetEpDesc>
 8006798:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800679a:	2101      	movs	r1, #1
 800679c:	4815      	ldr	r0, [pc, #84]	@ (80067f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800679e:	f000 fd0a 	bl	80071b6 <USBD_GetEpDesc>
 80067a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80067a4:	2181      	movs	r1, #129	@ 0x81
 80067a6:	4813      	ldr	r0, [pc, #76]	@ (80067f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80067a8:	f000 fd05 	bl	80071b6 <USBD_GetEpDesc>
 80067ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d002      	beq.n	80067ba <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	2210      	movs	r2, #16
 80067b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d006      	beq.n	80067ce <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067c8:	711a      	strb	r2, [r3, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d006      	beq.n	80067e2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067dc:	711a      	strb	r2, [r3, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2243      	movs	r2, #67	@ 0x43
 80067e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80067e8:	4b02      	ldr	r3, [pc, #8]	@ (80067f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3718      	adds	r7, #24
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	20000064 	.word	0x20000064

080067f8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006800:	2182      	movs	r1, #130	@ 0x82
 8006802:	4818      	ldr	r0, [pc, #96]	@ (8006864 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006804:	f000 fcd7 	bl	80071b6 <USBD_GetEpDesc>
 8006808:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800680a:	2101      	movs	r1, #1
 800680c:	4815      	ldr	r0, [pc, #84]	@ (8006864 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800680e:	f000 fcd2 	bl	80071b6 <USBD_GetEpDesc>
 8006812:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006814:	2181      	movs	r1, #129	@ 0x81
 8006816:	4813      	ldr	r0, [pc, #76]	@ (8006864 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006818:	f000 fccd 	bl	80071b6 <USBD_GetEpDesc>
 800681c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d002      	beq.n	800682a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	2210      	movs	r2, #16
 8006828:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d006      	beq.n	800683e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	2200      	movs	r2, #0
 8006834:	711a      	strb	r2, [r3, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f042 0202 	orr.w	r2, r2, #2
 800683c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d006      	beq.n	8006852 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	711a      	strb	r2, [r3, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f042 0202 	orr.w	r2, r2, #2
 8006850:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2243      	movs	r2, #67	@ 0x43
 8006856:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006858:	4b02      	ldr	r3, [pc, #8]	@ (8006864 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800685a:	4618      	mov	r0, r3
 800685c:	3718      	adds	r7, #24
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	20000064 	.word	0x20000064

08006868 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006870:	2182      	movs	r1, #130	@ 0x82
 8006872:	4818      	ldr	r0, [pc, #96]	@ (80068d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006874:	f000 fc9f 	bl	80071b6 <USBD_GetEpDesc>
 8006878:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800687a:	2101      	movs	r1, #1
 800687c:	4815      	ldr	r0, [pc, #84]	@ (80068d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800687e:	f000 fc9a 	bl	80071b6 <USBD_GetEpDesc>
 8006882:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006884:	2181      	movs	r1, #129	@ 0x81
 8006886:	4813      	ldr	r0, [pc, #76]	@ (80068d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006888:	f000 fc95 	bl	80071b6 <USBD_GetEpDesc>
 800688c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d002      	beq.n	800689a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	2210      	movs	r2, #16
 8006898:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d006      	beq.n	80068ae <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068a8:	711a      	strb	r2, [r3, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d006      	beq.n	80068c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068bc:	711a      	strb	r2, [r3, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2243      	movs	r2, #67	@ 0x43
 80068c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80068c8:	4b02      	ldr	r3, [pc, #8]	@ (80068d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3718      	adds	r7, #24
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	20000064 	.word	0x20000064

080068d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	220a      	movs	r2, #10
 80068e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80068e6:	4b03      	ldr	r3, [pc, #12]	@ (80068f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr
 80068f4:	20000020 	.word	0x20000020

080068f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d101      	bne.n	800690c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006908:	2303      	movs	r3, #3
 800690a:	e009      	b.n	8006920 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	33b0      	adds	r3, #176	@ 0xb0
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4413      	add	r3, r2
 800691a:	683a      	ldr	r2, [r7, #0]
 800691c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	32b0      	adds	r2, #176	@ 0xb0
 8006942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006946:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800694e:	2303      	movs	r3, #3
 8006950:	e008      	b.n	8006964 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	371c      	adds	r7, #28
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	32b0      	adds	r2, #176	@ 0xb0
 8006984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006988:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d101      	bne.n	8006994 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006990:	2303      	movs	r3, #3
 8006992:	e004      	b.n	800699e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	683a      	ldr	r2, [r7, #0]
 8006998:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3714      	adds	r7, #20
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
	...

080069ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	32b0      	adds	r2, #176	@ 0xb0
 80069be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	32b0      	adds	r2, #176	@ 0xb0
 80069ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e018      	b.n	8006a0c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	7c1b      	ldrb	r3, [r3, #16]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10a      	bne.n	80069f8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80069e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006a14 <USBD_CDC_ReceivePacket+0x68>)
 80069e4:	7819      	ldrb	r1, [r3, #0]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80069ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f001 ff8f 	bl	8008914 <USBD_LL_PrepareReceive>
 80069f6:	e008      	b.n	8006a0a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80069f8:	4b06      	ldr	r3, [pc, #24]	@ (8006a14 <USBD_CDC_ReceivePacket+0x68>)
 80069fa:	7819      	ldrb	r1, [r3, #0]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006a02:	2340      	movs	r3, #64	@ 0x40
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f001 ff85 	bl	8008914 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	200000a8 	.word	0x200000a8

08006a18 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	4613      	mov	r3, r2
 8006a24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d101      	bne.n	8006a30 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e01f      	b.n	8006a70 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	79fa      	ldrb	r2, [r7, #7]
 8006a62:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f001 fdff 	bl	8008668 <USBD_LL_Init>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3718      	adds	r7, #24
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d101      	bne.n	8006a90 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e025      	b.n	8006adc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	683a      	ldr	r2, [r7, #0]
 8006a94:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	32ae      	adds	r2, #174	@ 0xae
 8006aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00f      	beq.n	8006acc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	32ae      	adds	r2, #174	@ 0xae
 8006ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006abc:	f107 020e 	add.w	r2, r7, #14
 8006ac0:	4610      	mov	r0, r2
 8006ac2:	4798      	blx	r3
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006ad2:	1c5a      	adds	r2, r3, #1
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f001 fe07 	bl	8008700 <USBD_LL_Start>
 8006af2:	4603      	mov	r3, r0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3708      	adds	r7, #8
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b04:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b084      	sub	sp, #16
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d009      	beq.n	8006b40 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	78fa      	ldrb	r2, [r7, #3]
 8006b36:	4611      	mov	r1, r2
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	4798      	blx	r3
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b084      	sub	sp, #16
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	460b      	mov	r3, r1
 8006b54:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b56:	2300      	movs	r3, #0
 8006b58:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	78fa      	ldrb	r2, [r7, #3]
 8006b64:	4611      	mov	r1, r2
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	4798      	blx	r3
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d001      	beq.n	8006b74 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006b70:	2303      	movs	r3, #3
 8006b72:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b084      	sub	sp, #16
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006b8e:	6839      	ldr	r1, [r7, #0]
 8006b90:	4618      	mov	r0, r3
 8006b92:	f001 f90c 	bl	8007dae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006bb2:	f003 031f 	and.w	r3, r3, #31
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d01a      	beq.n	8006bf0 <USBD_LL_SetupStage+0x72>
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d822      	bhi.n	8006c04 <USBD_LL_SetupStage+0x86>
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d002      	beq.n	8006bc8 <USBD_LL_SetupStage+0x4a>
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d00a      	beq.n	8006bdc <USBD_LL_SetupStage+0x5e>
 8006bc6:	e01d      	b.n	8006c04 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fb63 	bl	800729c <USBD_StdDevReq>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	73fb      	strb	r3, [r7, #15]
      break;
 8006bda:	e020      	b.n	8006c1e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006be2:	4619      	mov	r1, r3
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fbcb 	bl	8007380 <USBD_StdItfReq>
 8006bea:	4603      	mov	r3, r0
 8006bec:	73fb      	strb	r3, [r7, #15]
      break;
 8006bee:	e016      	b.n	8006c1e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fc2d 	bl	8007458 <USBD_StdEPReq>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	73fb      	strb	r3, [r7, #15]
      break;
 8006c02:	e00c      	b.n	8006c1e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006c0a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	4619      	mov	r1, r3
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f001 fdd4 	bl	80087c0 <USBD_LL_StallEP>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006c1c:	bf00      	nop
  }

  return ret;
 8006c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	460b      	mov	r3, r1
 8006c32:	607a      	str	r2, [r7, #4]
 8006c34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c36:	2300      	movs	r3, #0
 8006c38:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006c3a:	7afb      	ldrb	r3, [r7, #11]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d16e      	bne.n	8006d1e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006c46:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006c4e:	2b03      	cmp	r3, #3
 8006c50:	f040 8098 	bne.w	8006d84 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	689a      	ldr	r2, [r3, #8]
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d913      	bls.n	8006c88 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	689a      	ldr	r2, [r3, #8]
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	1ad2      	subs	r2, r2, r3
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	68da      	ldr	r2, [r3, #12]
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	4293      	cmp	r3, r2
 8006c78:	bf28      	it	cs
 8006c7a:	4613      	movcs	r3, r2
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	6879      	ldr	r1, [r7, #4]
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f001 f994 	bl	8007fae <USBD_CtlContinueRx>
 8006c86:	e07d      	b.n	8006d84 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006c8e:	f003 031f 	and.w	r3, r3, #31
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d014      	beq.n	8006cc0 <USBD_LL_DataOutStage+0x98>
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d81d      	bhi.n	8006cd6 <USBD_LL_DataOutStage+0xae>
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d002      	beq.n	8006ca4 <USBD_LL_DataOutStage+0x7c>
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d003      	beq.n	8006caa <USBD_LL_DataOutStage+0x82>
 8006ca2:	e018      	b.n	8006cd6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	75bb      	strb	r3, [r7, #22]
            break;
 8006ca8:	e018      	b.n	8006cdc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 fa64 	bl	8007182 <USBD_CoreFindIF>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	75bb      	strb	r3, [r7, #22]
            break;
 8006cbe:	e00d      	b.n	8006cdc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	4619      	mov	r1, r3
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f000 fa66 	bl	800719c <USBD_CoreFindEP>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	75bb      	strb	r3, [r7, #22]
            break;
 8006cd4:	e002      	b.n	8006cdc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	75bb      	strb	r3, [r7, #22]
            break;
 8006cda:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006cdc:	7dbb      	ldrb	r3, [r7, #22]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d119      	bne.n	8006d16 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b03      	cmp	r3, #3
 8006cec:	d113      	bne.n	8006d16 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006cee:	7dba      	ldrb	r2, [r7, #22]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	32ae      	adds	r2, #174	@ 0xae
 8006cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00b      	beq.n	8006d16 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006cfe:	7dba      	ldrb	r2, [r7, #22]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006d06:	7dba      	ldrb	r2, [r7, #22]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	32ae      	adds	r2, #174	@ 0xae
 8006d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f001 f95a 	bl	8007fd0 <USBD_CtlSendStatus>
 8006d1c:	e032      	b.n	8006d84 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006d1e:	7afb      	ldrb	r3, [r7, #11]
 8006d20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	4619      	mov	r1, r3
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f000 fa37 	bl	800719c <USBD_CoreFindEP>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d32:	7dbb      	ldrb	r3, [r7, #22]
 8006d34:	2bff      	cmp	r3, #255	@ 0xff
 8006d36:	d025      	beq.n	8006d84 <USBD_LL_DataOutStage+0x15c>
 8006d38:	7dbb      	ldrb	r3, [r7, #22]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d122      	bne.n	8006d84 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	2b03      	cmp	r3, #3
 8006d48:	d117      	bne.n	8006d7a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006d4a:	7dba      	ldrb	r2, [r7, #22]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	32ae      	adds	r2, #174	@ 0xae
 8006d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00f      	beq.n	8006d7a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006d5a:	7dba      	ldrb	r2, [r7, #22]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006d62:	7dba      	ldrb	r2, [r7, #22]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	32ae      	adds	r2, #174	@ 0xae
 8006d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	7afa      	ldrb	r2, [r7, #11]
 8006d70:	4611      	mov	r1, r2
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	4798      	blx	r3
 8006d76:	4603      	mov	r3, r0
 8006d78:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006d7a:	7dfb      	ldrb	r3, [r7, #23]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d001      	beq.n	8006d84 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006d80:	7dfb      	ldrb	r3, [r7, #23]
 8006d82:	e000      	b.n	8006d86 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3718      	adds	r7, #24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b086      	sub	sp, #24
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	60f8      	str	r0, [r7, #12]
 8006d96:	460b      	mov	r3, r1
 8006d98:	607a      	str	r2, [r7, #4]
 8006d9a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006d9c:	7afb      	ldrb	r3, [r7, #11]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d16f      	bne.n	8006e82 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	3314      	adds	r3, #20
 8006da6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d15a      	bne.n	8006e68 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	689a      	ldr	r2, [r3, #8]
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d914      	bls.n	8006de8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	689a      	ldr	r2, [r3, #8]
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	1ad2      	subs	r2, r2, r3
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	6879      	ldr	r1, [r7, #4]
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f001 f8bc 	bl	8007f52 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006dda:	2300      	movs	r3, #0
 8006ddc:	2200      	movs	r2, #0
 8006dde:	2100      	movs	r1, #0
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f001 fd97 	bl	8008914 <USBD_LL_PrepareReceive>
 8006de6:	e03f      	b.n	8006e68 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	68da      	ldr	r2, [r3, #12]
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d11c      	bne.n	8006e2e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d316      	bcc.n	8006e2e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	685a      	ldr	r2, [r3, #4]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d20f      	bcs.n	8006e2e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006e0e:	2200      	movs	r2, #0
 8006e10:	2100      	movs	r1, #0
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f001 f89d 	bl	8007f52 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e20:	2300      	movs	r3, #0
 8006e22:	2200      	movs	r2, #0
 8006e24:	2100      	movs	r1, #0
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f001 fd74 	bl	8008914 <USBD_LL_PrepareReceive>
 8006e2c:	e01c      	b.n	8006e68 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b03      	cmp	r3, #3
 8006e38:	d10f      	bne.n	8006e5a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d009      	beq.n	8006e5a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e5a:	2180      	movs	r1, #128	@ 0x80
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f001 fcaf 	bl	80087c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f001 f8c7 	bl	8007ff6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d03a      	beq.n	8006ee8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f7ff fe42 	bl	8006afc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006e80:	e032      	b.n	8006ee8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006e82:	7afb      	ldrb	r3, [r7, #11]
 8006e84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	f000 f985 	bl	800719c <USBD_CoreFindEP>
 8006e92:	4603      	mov	r3, r0
 8006e94:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e96:	7dfb      	ldrb	r3, [r7, #23]
 8006e98:	2bff      	cmp	r3, #255	@ 0xff
 8006e9a:	d025      	beq.n	8006ee8 <USBD_LL_DataInStage+0x15a>
 8006e9c:	7dfb      	ldrb	r3, [r7, #23]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d122      	bne.n	8006ee8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b03      	cmp	r3, #3
 8006eac:	d11c      	bne.n	8006ee8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006eae:	7dfa      	ldrb	r2, [r7, #23]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	32ae      	adds	r2, #174	@ 0xae
 8006eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d014      	beq.n	8006ee8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006ebe:	7dfa      	ldrb	r2, [r7, #23]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006ec6:	7dfa      	ldrb	r2, [r7, #23]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	32ae      	adds	r2, #174	@ 0xae
 8006ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	7afa      	ldrb	r2, [r7, #11]
 8006ed4:	4611      	mov	r1, r2
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	4798      	blx	r3
 8006eda:	4603      	mov	r3, r0
 8006edc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006ede:	7dbb      	ldrb	r3, [r7, #22]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d001      	beq.n	8006ee8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006ee4:	7dbb      	ldrb	r3, [r7, #22]
 8006ee6:	e000      	b.n	8006eea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3718      	adds	r7, #24
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b084      	sub	sp, #16
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d014      	beq.n	8006f58 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00e      	beq.n	8006f58 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	6852      	ldr	r2, [r2, #4]
 8006f46:	b2d2      	uxtb	r2, r2
 8006f48:	4611      	mov	r1, r2
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	4798      	blx	r3
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d001      	beq.n	8006f58 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006f54:	2303      	movs	r3, #3
 8006f56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f58:	2340      	movs	r3, #64	@ 0x40
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f001 fbe9 	bl	8008736 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2240      	movs	r2, #64	@ 0x40
 8006f70:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f74:	2340      	movs	r3, #64	@ 0x40
 8006f76:	2200      	movs	r2, #0
 8006f78:	2180      	movs	r1, #128	@ 0x80
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f001 fbdb 	bl	8008736 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2240      	movs	r2, #64	@ 0x40
 8006f8a:	621a      	str	r2, [r3, #32]

  return ret;
 8006f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b083      	sub	sp, #12
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	78fa      	ldrb	r2, [r7, #3]
 8006fa6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006fb6:	b480      	push	{r7}
 8006fb8:	b083      	sub	sp, #12
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b04      	cmp	r3, #4
 8006fc8:	d006      	beq.n	8006fd8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fd0:	b2da      	uxtb	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2204      	movs	r2, #4
 8006fdc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	370c      	adds	r7, #12
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr

08006fee <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006fee:	b480      	push	{r7}
 8006ff0:	b083      	sub	sp, #12
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2b04      	cmp	r3, #4
 8007000:	d106      	bne.n	8007010 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007008:	b2da      	uxtb	r2, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	370c      	adds	r7, #12
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b082      	sub	sp, #8
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b03      	cmp	r3, #3
 8007030:	d110      	bne.n	8007054 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00b      	beq.n	8007054 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007042:	69db      	ldr	r3, [r3, #28]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d005      	beq.n	8007054 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800704e:	69db      	ldr	r3, [r3, #28]
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b082      	sub	sp, #8
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
 8007066:	460b      	mov	r3, r1
 8007068:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	32ae      	adds	r2, #174	@ 0xae
 8007074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d101      	bne.n	8007080 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800707c:	2303      	movs	r3, #3
 800707e:	e01c      	b.n	80070ba <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007086:	b2db      	uxtb	r3, r3
 8007088:	2b03      	cmp	r3, #3
 800708a:	d115      	bne.n	80070b8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	32ae      	adds	r2, #174	@ 0xae
 8007096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800709a:	6a1b      	ldr	r3, [r3, #32]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00b      	beq.n	80070b8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	32ae      	adds	r2, #174	@ 0xae
 80070aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ae:	6a1b      	ldr	r3, [r3, #32]
 80070b0:	78fa      	ldrb	r2, [r7, #3]
 80070b2:	4611      	mov	r1, r2
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3708      	adds	r7, #8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b082      	sub	sp, #8
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
 80070ca:	460b      	mov	r3, r1
 80070cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	32ae      	adds	r2, #174	@ 0xae
 80070d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d101      	bne.n	80070e4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e01c      	b.n	800711e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	2b03      	cmp	r3, #3
 80070ee:	d115      	bne.n	800711c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	32ae      	adds	r2, #174	@ 0xae
 80070fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00b      	beq.n	800711c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	32ae      	adds	r2, #174	@ 0xae
 800710e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007114:	78fa      	ldrb	r2, [r7, #3]
 8007116:	4611      	mov	r1, r2
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007126:	b480      	push	{r7}
 8007128:	b083      	sub	sp, #12
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007144:	2300      	movs	r3, #0
 8007146:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00e      	beq.n	8007178 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	6852      	ldr	r2, [r2, #4]
 8007166:	b2d2      	uxtb	r2, r2
 8007168:	4611      	mov	r1, r2
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	4798      	blx	r3
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d001      	beq.n	8007178 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007174:	2303      	movs	r3, #3
 8007176:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007178:	7bfb      	ldrb	r3, [r7, #15]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007182:	b480      	push	{r7}
 8007184:	b083      	sub	sp, #12
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
 800718a:	460b      	mov	r3, r1
 800718c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800718e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007190:	4618      	mov	r0, r3
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	460b      	mov	r3, r1
 80071a6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80071a8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr

080071b6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b086      	sub	sp, #24
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
 80071be:	460b      	mov	r3, r1
 80071c0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80071ca:	2300      	movs	r3, #0
 80071cc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	885b      	ldrh	r3, [r3, #2]
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	7812      	ldrb	r2, [r2, #0]
 80071d8:	4293      	cmp	r3, r2
 80071da:	d91f      	bls.n	800721c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80071e2:	e013      	b.n	800720c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80071e4:	f107 030a 	add.w	r3, r7, #10
 80071e8:	4619      	mov	r1, r3
 80071ea:	6978      	ldr	r0, [r7, #20]
 80071ec:	f000 f81b 	bl	8007226 <USBD_GetNextDesc>
 80071f0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	785b      	ldrb	r3, [r3, #1]
 80071f6:	2b05      	cmp	r3, #5
 80071f8:	d108      	bne.n	800720c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	789b      	ldrb	r3, [r3, #2]
 8007202:	78fa      	ldrb	r2, [r7, #3]
 8007204:	429a      	cmp	r2, r3
 8007206:	d008      	beq.n	800721a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007208:	2300      	movs	r3, #0
 800720a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	885b      	ldrh	r3, [r3, #2]
 8007210:	b29a      	uxth	r2, r3
 8007212:	897b      	ldrh	r3, [r7, #10]
 8007214:	429a      	cmp	r2, r3
 8007216:	d8e5      	bhi.n	80071e4 <USBD_GetEpDesc+0x2e>
 8007218:	e000      	b.n	800721c <USBD_GetEpDesc+0x66>
          break;
 800721a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800721c:	693b      	ldr	r3, [r7, #16]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3718      	adds	r7, #24
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007226:	b480      	push	{r7}
 8007228:	b085      	sub	sp, #20
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
 800722e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	881b      	ldrh	r3, [r3, #0]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	7812      	ldrb	r2, [r2, #0]
 800723c:	4413      	add	r3, r2
 800723e:	b29a      	uxth	r2, r3
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	461a      	mov	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4413      	add	r3, r2
 800724e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007250:	68fb      	ldr	r3, [r7, #12]
}
 8007252:	4618      	mov	r0, r3
 8007254:	3714      	adds	r7, #20
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800725e:	b480      	push	{r7}
 8007260:	b087      	sub	sp, #28
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	3301      	adds	r3, #1
 8007274:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800727c:	8a3b      	ldrh	r3, [r7, #16]
 800727e:	021b      	lsls	r3, r3, #8
 8007280:	b21a      	sxth	r2, r3
 8007282:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007286:	4313      	orrs	r3, r2
 8007288:	b21b      	sxth	r3, r3
 800728a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800728c:	89fb      	ldrh	r3, [r7, #14]
}
 800728e:	4618      	mov	r0, r3
 8007290:	371c      	adds	r7, #28
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
	...

0800729c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072a6:	2300      	movs	r3, #0
 80072a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80072b2:	2b40      	cmp	r3, #64	@ 0x40
 80072b4:	d005      	beq.n	80072c2 <USBD_StdDevReq+0x26>
 80072b6:	2b40      	cmp	r3, #64	@ 0x40
 80072b8:	d857      	bhi.n	800736a <USBD_StdDevReq+0xce>
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00f      	beq.n	80072de <USBD_StdDevReq+0x42>
 80072be:	2b20      	cmp	r3, #32
 80072c0:	d153      	bne.n	800736a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	32ae      	adds	r2, #174	@ 0xae
 80072cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	6839      	ldr	r1, [r7, #0]
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	4798      	blx	r3
 80072d8:	4603      	mov	r3, r0
 80072da:	73fb      	strb	r3, [r7, #15]
      break;
 80072dc:	e04a      	b.n	8007374 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	785b      	ldrb	r3, [r3, #1]
 80072e2:	2b09      	cmp	r3, #9
 80072e4:	d83b      	bhi.n	800735e <USBD_StdDevReq+0xc2>
 80072e6:	a201      	add	r2, pc, #4	@ (adr r2, 80072ec <USBD_StdDevReq+0x50>)
 80072e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ec:	08007341 	.word	0x08007341
 80072f0:	08007355 	.word	0x08007355
 80072f4:	0800735f 	.word	0x0800735f
 80072f8:	0800734b 	.word	0x0800734b
 80072fc:	0800735f 	.word	0x0800735f
 8007300:	0800731f 	.word	0x0800731f
 8007304:	08007315 	.word	0x08007315
 8007308:	0800735f 	.word	0x0800735f
 800730c:	08007337 	.word	0x08007337
 8007310:	08007329 	.word	0x08007329
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007314:	6839      	ldr	r1, [r7, #0]
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 fa3c 	bl	8007794 <USBD_GetDescriptor>
          break;
 800731c:	e024      	b.n	8007368 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800731e:	6839      	ldr	r1, [r7, #0]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 fba1 	bl	8007a68 <USBD_SetAddress>
          break;
 8007326:	e01f      	b.n	8007368 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007328:	6839      	ldr	r1, [r7, #0]
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 fbe0 	bl	8007af0 <USBD_SetConfig>
 8007330:	4603      	mov	r3, r0
 8007332:	73fb      	strb	r3, [r7, #15]
          break;
 8007334:	e018      	b.n	8007368 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007336:	6839      	ldr	r1, [r7, #0]
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fc83 	bl	8007c44 <USBD_GetConfig>
          break;
 800733e:	e013      	b.n	8007368 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007340:	6839      	ldr	r1, [r7, #0]
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 fcb4 	bl	8007cb0 <USBD_GetStatus>
          break;
 8007348:	e00e      	b.n	8007368 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800734a:	6839      	ldr	r1, [r7, #0]
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 fce3 	bl	8007d18 <USBD_SetFeature>
          break;
 8007352:	e009      	b.n	8007368 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007354:	6839      	ldr	r1, [r7, #0]
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 fd07 	bl	8007d6a <USBD_ClrFeature>
          break;
 800735c:	e004      	b.n	8007368 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800735e:	6839      	ldr	r1, [r7, #0]
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fd5e 	bl	8007e22 <USBD_CtlError>
          break;
 8007366:	bf00      	nop
      }
      break;
 8007368:	e004      	b.n	8007374 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800736a:	6839      	ldr	r1, [r7, #0]
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fd58 	bl	8007e22 <USBD_CtlError>
      break;
 8007372:	bf00      	nop
  }

  return ret;
 8007374:	7bfb      	ldrb	r3, [r7, #15]
}
 8007376:	4618      	mov	r0, r3
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop

08007380 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800738a:	2300      	movs	r3, #0
 800738c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007396:	2b40      	cmp	r3, #64	@ 0x40
 8007398:	d005      	beq.n	80073a6 <USBD_StdItfReq+0x26>
 800739a:	2b40      	cmp	r3, #64	@ 0x40
 800739c:	d852      	bhi.n	8007444 <USBD_StdItfReq+0xc4>
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d001      	beq.n	80073a6 <USBD_StdItfReq+0x26>
 80073a2:	2b20      	cmp	r3, #32
 80073a4:	d14e      	bne.n	8007444 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	3b01      	subs	r3, #1
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d840      	bhi.n	8007436 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	889b      	ldrh	r3, [r3, #4]
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d836      	bhi.n	800742c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	889b      	ldrh	r3, [r3, #4]
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	4619      	mov	r1, r3
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f7ff fedb 	bl	8007182 <USBD_CoreFindIF>
 80073cc:	4603      	mov	r3, r0
 80073ce:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073d0:	7bbb      	ldrb	r3, [r7, #14]
 80073d2:	2bff      	cmp	r3, #255	@ 0xff
 80073d4:	d01d      	beq.n	8007412 <USBD_StdItfReq+0x92>
 80073d6:	7bbb      	ldrb	r3, [r7, #14]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d11a      	bne.n	8007412 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80073dc:	7bba      	ldrb	r2, [r7, #14]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	32ae      	adds	r2, #174	@ 0xae
 80073e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00f      	beq.n	800740c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80073ec:	7bba      	ldrb	r2, [r7, #14]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80073f4:	7bba      	ldrb	r2, [r7, #14]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	32ae      	adds	r2, #174	@ 0xae
 80073fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	4798      	blx	r3
 8007406:	4603      	mov	r3, r0
 8007408:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800740a:	e004      	b.n	8007416 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800740c:	2303      	movs	r3, #3
 800740e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007410:	e001      	b.n	8007416 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007412:	2303      	movs	r3, #3
 8007414:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	88db      	ldrh	r3, [r3, #6]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d110      	bne.n	8007440 <USBD_StdItfReq+0xc0>
 800741e:	7bfb      	ldrb	r3, [r7, #15]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d10d      	bne.n	8007440 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 fdd3 	bl	8007fd0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800742a:	e009      	b.n	8007440 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800742c:	6839      	ldr	r1, [r7, #0]
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 fcf7 	bl	8007e22 <USBD_CtlError>
          break;
 8007434:	e004      	b.n	8007440 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007436:	6839      	ldr	r1, [r7, #0]
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fcf2 	bl	8007e22 <USBD_CtlError>
          break;
 800743e:	e000      	b.n	8007442 <USBD_StdItfReq+0xc2>
          break;
 8007440:	bf00      	nop
      }
      break;
 8007442:	e004      	b.n	800744e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007444:	6839      	ldr	r1, [r7, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fceb 	bl	8007e22 <USBD_CtlError>
      break;
 800744c:	bf00      	nop
  }

  return ret;
 800744e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007450:	4618      	mov	r0, r3
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007462:	2300      	movs	r3, #0
 8007464:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	889b      	ldrh	r3, [r3, #4]
 800746a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007474:	2b40      	cmp	r3, #64	@ 0x40
 8007476:	d007      	beq.n	8007488 <USBD_StdEPReq+0x30>
 8007478:	2b40      	cmp	r3, #64	@ 0x40
 800747a:	f200 817f 	bhi.w	800777c <USBD_StdEPReq+0x324>
 800747e:	2b00      	cmp	r3, #0
 8007480:	d02a      	beq.n	80074d8 <USBD_StdEPReq+0x80>
 8007482:	2b20      	cmp	r3, #32
 8007484:	f040 817a 	bne.w	800777c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007488:	7bbb      	ldrb	r3, [r7, #14]
 800748a:	4619      	mov	r1, r3
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f7ff fe85 	bl	800719c <USBD_CoreFindEP>
 8007492:	4603      	mov	r3, r0
 8007494:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007496:	7b7b      	ldrb	r3, [r7, #13]
 8007498:	2bff      	cmp	r3, #255	@ 0xff
 800749a:	f000 8174 	beq.w	8007786 <USBD_StdEPReq+0x32e>
 800749e:	7b7b      	ldrb	r3, [r7, #13]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f040 8170 	bne.w	8007786 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80074a6:	7b7a      	ldrb	r2, [r7, #13]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80074ae:	7b7a      	ldrb	r2, [r7, #13]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	32ae      	adds	r2, #174	@ 0xae
 80074b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f000 8163 	beq.w	8007786 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80074c0:	7b7a      	ldrb	r2, [r7, #13]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	32ae      	adds	r2, #174	@ 0xae
 80074c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	6839      	ldr	r1, [r7, #0]
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	4798      	blx	r3
 80074d2:	4603      	mov	r3, r0
 80074d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80074d6:	e156      	b.n	8007786 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	785b      	ldrb	r3, [r3, #1]
 80074dc:	2b03      	cmp	r3, #3
 80074de:	d008      	beq.n	80074f2 <USBD_StdEPReq+0x9a>
 80074e0:	2b03      	cmp	r3, #3
 80074e2:	f300 8145 	bgt.w	8007770 <USBD_StdEPReq+0x318>
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f000 809b 	beq.w	8007622 <USBD_StdEPReq+0x1ca>
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d03c      	beq.n	800756a <USBD_StdEPReq+0x112>
 80074f0:	e13e      	b.n	8007770 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d002      	beq.n	8007504 <USBD_StdEPReq+0xac>
 80074fe:	2b03      	cmp	r3, #3
 8007500:	d016      	beq.n	8007530 <USBD_StdEPReq+0xd8>
 8007502:	e02c      	b.n	800755e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007504:	7bbb      	ldrb	r3, [r7, #14]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00d      	beq.n	8007526 <USBD_StdEPReq+0xce>
 800750a:	7bbb      	ldrb	r3, [r7, #14]
 800750c:	2b80      	cmp	r3, #128	@ 0x80
 800750e:	d00a      	beq.n	8007526 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007510:	7bbb      	ldrb	r3, [r7, #14]
 8007512:	4619      	mov	r1, r3
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f001 f953 	bl	80087c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800751a:	2180      	movs	r1, #128	@ 0x80
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f001 f94f 	bl	80087c0 <USBD_LL_StallEP>
 8007522:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007524:	e020      	b.n	8007568 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007526:	6839      	ldr	r1, [r7, #0]
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 fc7a 	bl	8007e22 <USBD_CtlError>
              break;
 800752e:	e01b      	b.n	8007568 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	885b      	ldrh	r3, [r3, #2]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d10e      	bne.n	8007556 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007538:	7bbb      	ldrb	r3, [r7, #14]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00b      	beq.n	8007556 <USBD_StdEPReq+0xfe>
 800753e:	7bbb      	ldrb	r3, [r7, #14]
 8007540:	2b80      	cmp	r3, #128	@ 0x80
 8007542:	d008      	beq.n	8007556 <USBD_StdEPReq+0xfe>
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	88db      	ldrh	r3, [r3, #6]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d104      	bne.n	8007556 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800754c:	7bbb      	ldrb	r3, [r7, #14]
 800754e:	4619      	mov	r1, r3
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f001 f935 	bl	80087c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fd3a 	bl	8007fd0 <USBD_CtlSendStatus>

              break;
 800755c:	e004      	b.n	8007568 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800755e:	6839      	ldr	r1, [r7, #0]
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 fc5e 	bl	8007e22 <USBD_CtlError>
              break;
 8007566:	bf00      	nop
          }
          break;
 8007568:	e107      	b.n	800777a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b02      	cmp	r3, #2
 8007574:	d002      	beq.n	800757c <USBD_StdEPReq+0x124>
 8007576:	2b03      	cmp	r3, #3
 8007578:	d016      	beq.n	80075a8 <USBD_StdEPReq+0x150>
 800757a:	e04b      	b.n	8007614 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800757c:	7bbb      	ldrb	r3, [r7, #14]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00d      	beq.n	800759e <USBD_StdEPReq+0x146>
 8007582:	7bbb      	ldrb	r3, [r7, #14]
 8007584:	2b80      	cmp	r3, #128	@ 0x80
 8007586:	d00a      	beq.n	800759e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007588:	7bbb      	ldrb	r3, [r7, #14]
 800758a:	4619      	mov	r1, r3
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f001 f917 	bl	80087c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007592:	2180      	movs	r1, #128	@ 0x80
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f001 f913 	bl	80087c0 <USBD_LL_StallEP>
 800759a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800759c:	e040      	b.n	8007620 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800759e:	6839      	ldr	r1, [r7, #0]
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 fc3e 	bl	8007e22 <USBD_CtlError>
              break;
 80075a6:	e03b      	b.n	8007620 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	885b      	ldrh	r3, [r3, #2]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d136      	bne.n	800761e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80075b0:	7bbb      	ldrb	r3, [r7, #14]
 80075b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d004      	beq.n	80075c4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80075ba:	7bbb      	ldrb	r3, [r7, #14]
 80075bc:	4619      	mov	r1, r3
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f001 f91d 	bl	80087fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 fd03 	bl	8007fd0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80075ca:	7bbb      	ldrb	r3, [r7, #14]
 80075cc:	4619      	mov	r1, r3
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f7ff fde4 	bl	800719c <USBD_CoreFindEP>
 80075d4:	4603      	mov	r3, r0
 80075d6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075d8:	7b7b      	ldrb	r3, [r7, #13]
 80075da:	2bff      	cmp	r3, #255	@ 0xff
 80075dc:	d01f      	beq.n	800761e <USBD_StdEPReq+0x1c6>
 80075de:	7b7b      	ldrb	r3, [r7, #13]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d11c      	bne.n	800761e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80075e4:	7b7a      	ldrb	r2, [r7, #13]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80075ec:	7b7a      	ldrb	r2, [r7, #13]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	32ae      	adds	r2, #174	@ 0xae
 80075f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d010      	beq.n	800761e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80075fc:	7b7a      	ldrb	r2, [r7, #13]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	32ae      	adds	r2, #174	@ 0xae
 8007602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	6839      	ldr	r1, [r7, #0]
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	4798      	blx	r3
 800760e:	4603      	mov	r3, r0
 8007610:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007612:	e004      	b.n	800761e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fc03 	bl	8007e22 <USBD_CtlError>
              break;
 800761c:	e000      	b.n	8007620 <USBD_StdEPReq+0x1c8>
              break;
 800761e:	bf00      	nop
          }
          break;
 8007620:	e0ab      	b.n	800777a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b02      	cmp	r3, #2
 800762c:	d002      	beq.n	8007634 <USBD_StdEPReq+0x1dc>
 800762e:	2b03      	cmp	r3, #3
 8007630:	d032      	beq.n	8007698 <USBD_StdEPReq+0x240>
 8007632:	e097      	b.n	8007764 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007634:	7bbb      	ldrb	r3, [r7, #14]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d007      	beq.n	800764a <USBD_StdEPReq+0x1f2>
 800763a:	7bbb      	ldrb	r3, [r7, #14]
 800763c:	2b80      	cmp	r3, #128	@ 0x80
 800763e:	d004      	beq.n	800764a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007640:	6839      	ldr	r1, [r7, #0]
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 fbed 	bl	8007e22 <USBD_CtlError>
                break;
 8007648:	e091      	b.n	800776e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800764a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800764e:	2b00      	cmp	r3, #0
 8007650:	da0b      	bge.n	800766a <USBD_StdEPReq+0x212>
 8007652:	7bbb      	ldrb	r3, [r7, #14]
 8007654:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007658:	4613      	mov	r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4413      	add	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	3310      	adds	r3, #16
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	4413      	add	r3, r2
 8007666:	3304      	adds	r3, #4
 8007668:	e00b      	b.n	8007682 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800766a:	7bbb      	ldrb	r3, [r7, #14]
 800766c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007670:	4613      	mov	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4413      	add	r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	4413      	add	r3, r2
 8007680:	3304      	adds	r3, #4
 8007682:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2200      	movs	r2, #0
 8007688:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	2202      	movs	r2, #2
 800768e:	4619      	mov	r1, r3
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fc43 	bl	8007f1c <USBD_CtlSendData>
              break;
 8007696:	e06a      	b.n	800776e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007698:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800769c:	2b00      	cmp	r3, #0
 800769e:	da11      	bge.n	80076c4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80076a0:	7bbb      	ldrb	r3, [r7, #14]
 80076a2:	f003 020f 	and.w	r2, r3, #15
 80076a6:	6879      	ldr	r1, [r7, #4]
 80076a8:	4613      	mov	r3, r2
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	440b      	add	r3, r1
 80076b2:	3324      	adds	r3, #36	@ 0x24
 80076b4:	881b      	ldrh	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d117      	bne.n	80076ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 fbb0 	bl	8007e22 <USBD_CtlError>
                  break;
 80076c2:	e054      	b.n	800776e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80076c4:	7bbb      	ldrb	r3, [r7, #14]
 80076c6:	f003 020f 	and.w	r2, r3, #15
 80076ca:	6879      	ldr	r1, [r7, #4]
 80076cc:	4613      	mov	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4413      	add	r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	440b      	add	r3, r1
 80076d6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80076da:	881b      	ldrh	r3, [r3, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d104      	bne.n	80076ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80076e0:	6839      	ldr	r1, [r7, #0]
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 fb9d 	bl	8007e22 <USBD_CtlError>
                  break;
 80076e8:	e041      	b.n	800776e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	da0b      	bge.n	800770a <USBD_StdEPReq+0x2b2>
 80076f2:	7bbb      	ldrb	r3, [r7, #14]
 80076f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076f8:	4613      	mov	r3, r2
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4413      	add	r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	3310      	adds	r3, #16
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	4413      	add	r3, r2
 8007706:	3304      	adds	r3, #4
 8007708:	e00b      	b.n	8007722 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800770a:	7bbb      	ldrb	r3, [r7, #14]
 800770c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007710:	4613      	mov	r3, r2
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	4413      	add	r3, r2
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	4413      	add	r3, r2
 8007720:	3304      	adds	r3, #4
 8007722:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007724:	7bbb      	ldrb	r3, [r7, #14]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d002      	beq.n	8007730 <USBD_StdEPReq+0x2d8>
 800772a:	7bbb      	ldrb	r3, [r7, #14]
 800772c:	2b80      	cmp	r3, #128	@ 0x80
 800772e:	d103      	bne.n	8007738 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	2200      	movs	r2, #0
 8007734:	601a      	str	r2, [r3, #0]
 8007736:	e00e      	b.n	8007756 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007738:	7bbb      	ldrb	r3, [r7, #14]
 800773a:	4619      	mov	r1, r3
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f001 f87d 	bl	800883c <USBD_LL_IsStallEP>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d003      	beq.n	8007750 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	2201      	movs	r2, #1
 800774c:	601a      	str	r2, [r3, #0]
 800774e:	e002      	b.n	8007756 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	2200      	movs	r2, #0
 8007754:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	2202      	movs	r2, #2
 800775a:	4619      	mov	r1, r3
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fbdd 	bl	8007f1c <USBD_CtlSendData>
              break;
 8007762:	e004      	b.n	800776e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007764:	6839      	ldr	r1, [r7, #0]
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fb5b 	bl	8007e22 <USBD_CtlError>
              break;
 800776c:	bf00      	nop
          }
          break;
 800776e:	e004      	b.n	800777a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007770:	6839      	ldr	r1, [r7, #0]
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fb55 	bl	8007e22 <USBD_CtlError>
          break;
 8007778:	bf00      	nop
      }
      break;
 800777a:	e005      	b.n	8007788 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fb4f 	bl	8007e22 <USBD_CtlError>
      break;
 8007784:	e000      	b.n	8007788 <USBD_StdEPReq+0x330>
      break;
 8007786:	bf00      	nop
  }

  return ret;
 8007788:	7bfb      	ldrb	r3, [r7, #15]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
	...

08007794 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800779e:	2300      	movs	r3, #0
 80077a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80077a2:	2300      	movs	r3, #0
 80077a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80077a6:	2300      	movs	r3, #0
 80077a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	885b      	ldrh	r3, [r3, #2]
 80077ae:	0a1b      	lsrs	r3, r3, #8
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	3b01      	subs	r3, #1
 80077b4:	2b06      	cmp	r3, #6
 80077b6:	f200 8128 	bhi.w	8007a0a <USBD_GetDescriptor+0x276>
 80077ba:	a201      	add	r2, pc, #4	@ (adr r2, 80077c0 <USBD_GetDescriptor+0x2c>)
 80077bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c0:	080077dd 	.word	0x080077dd
 80077c4:	080077f5 	.word	0x080077f5
 80077c8:	08007835 	.word	0x08007835
 80077cc:	08007a0b 	.word	0x08007a0b
 80077d0:	08007a0b 	.word	0x08007a0b
 80077d4:	080079ab 	.word	0x080079ab
 80077d8:	080079d7 	.word	0x080079d7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	7c12      	ldrb	r2, [r2, #16]
 80077e8:	f107 0108 	add.w	r1, r7, #8
 80077ec:	4610      	mov	r0, r2
 80077ee:	4798      	blx	r3
 80077f0:	60f8      	str	r0, [r7, #12]
      break;
 80077f2:	e112      	b.n	8007a1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	7c1b      	ldrb	r3, [r3, #16]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d10d      	bne.n	8007818 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007804:	f107 0208 	add.w	r2, r7, #8
 8007808:	4610      	mov	r0, r2
 800780a:	4798      	blx	r3
 800780c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	3301      	adds	r3, #1
 8007812:	2202      	movs	r2, #2
 8007814:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007816:	e100      	b.n	8007a1a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800781e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007820:	f107 0208 	add.w	r2, r7, #8
 8007824:	4610      	mov	r0, r2
 8007826:	4798      	blx	r3
 8007828:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	3301      	adds	r3, #1
 800782e:	2202      	movs	r2, #2
 8007830:	701a      	strb	r2, [r3, #0]
      break;
 8007832:	e0f2      	b.n	8007a1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	885b      	ldrh	r3, [r3, #2]
 8007838:	b2db      	uxtb	r3, r3
 800783a:	2b05      	cmp	r3, #5
 800783c:	f200 80ac 	bhi.w	8007998 <USBD_GetDescriptor+0x204>
 8007840:	a201      	add	r2, pc, #4	@ (adr r2, 8007848 <USBD_GetDescriptor+0xb4>)
 8007842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007846:	bf00      	nop
 8007848:	08007861 	.word	0x08007861
 800784c:	08007895 	.word	0x08007895
 8007850:	080078c9 	.word	0x080078c9
 8007854:	080078fd 	.word	0x080078fd
 8007858:	08007931 	.word	0x08007931
 800785c:	08007965 	.word	0x08007965
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00b      	beq.n	8007884 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	7c12      	ldrb	r2, [r2, #16]
 8007878:	f107 0108 	add.w	r1, r7, #8
 800787c:	4610      	mov	r0, r2
 800787e:	4798      	blx	r3
 8007880:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007882:	e091      	b.n	80079a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007884:	6839      	ldr	r1, [r7, #0]
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 facb 	bl	8007e22 <USBD_CtlError>
            err++;
 800788c:	7afb      	ldrb	r3, [r7, #11]
 800788e:	3301      	adds	r3, #1
 8007890:	72fb      	strb	r3, [r7, #11]
          break;
 8007892:	e089      	b.n	80079a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00b      	beq.n	80078b8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	7c12      	ldrb	r2, [r2, #16]
 80078ac:	f107 0108 	add.w	r1, r7, #8
 80078b0:	4610      	mov	r0, r2
 80078b2:	4798      	blx	r3
 80078b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078b6:	e077      	b.n	80079a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078b8:	6839      	ldr	r1, [r7, #0]
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fab1 	bl	8007e22 <USBD_CtlError>
            err++;
 80078c0:	7afb      	ldrb	r3, [r7, #11]
 80078c2:	3301      	adds	r3, #1
 80078c4:	72fb      	strb	r3, [r7, #11]
          break;
 80078c6:	e06f      	b.n	80079a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00b      	beq.n	80078ec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	7c12      	ldrb	r2, [r2, #16]
 80078e0:	f107 0108 	add.w	r1, r7, #8
 80078e4:	4610      	mov	r0, r2
 80078e6:	4798      	blx	r3
 80078e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078ea:	e05d      	b.n	80079a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078ec:	6839      	ldr	r1, [r7, #0]
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fa97 	bl	8007e22 <USBD_CtlError>
            err++;
 80078f4:	7afb      	ldrb	r3, [r7, #11]
 80078f6:	3301      	adds	r3, #1
 80078f8:	72fb      	strb	r3, [r7, #11]
          break;
 80078fa:	e055      	b.n	80079a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d00b      	beq.n	8007920 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	7c12      	ldrb	r2, [r2, #16]
 8007914:	f107 0108 	add.w	r1, r7, #8
 8007918:	4610      	mov	r0, r2
 800791a:	4798      	blx	r3
 800791c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800791e:	e043      	b.n	80079a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007920:	6839      	ldr	r1, [r7, #0]
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fa7d 	bl	8007e22 <USBD_CtlError>
            err++;
 8007928:	7afb      	ldrb	r3, [r7, #11]
 800792a:	3301      	adds	r3, #1
 800792c:	72fb      	strb	r3, [r7, #11]
          break;
 800792e:	e03b      	b.n	80079a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007936:	695b      	ldr	r3, [r3, #20]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00b      	beq.n	8007954 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007942:	695b      	ldr	r3, [r3, #20]
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	7c12      	ldrb	r2, [r2, #16]
 8007948:	f107 0108 	add.w	r1, r7, #8
 800794c:	4610      	mov	r0, r2
 800794e:	4798      	blx	r3
 8007950:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007952:	e029      	b.n	80079a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007954:	6839      	ldr	r1, [r7, #0]
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fa63 	bl	8007e22 <USBD_CtlError>
            err++;
 800795c:	7afb      	ldrb	r3, [r7, #11]
 800795e:	3301      	adds	r3, #1
 8007960:	72fb      	strb	r3, [r7, #11]
          break;
 8007962:	e021      	b.n	80079a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00b      	beq.n	8007988 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	7c12      	ldrb	r2, [r2, #16]
 800797c:	f107 0108 	add.w	r1, r7, #8
 8007980:	4610      	mov	r0, r2
 8007982:	4798      	blx	r3
 8007984:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007986:	e00f      	b.n	80079a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007988:	6839      	ldr	r1, [r7, #0]
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fa49 	bl	8007e22 <USBD_CtlError>
            err++;
 8007990:	7afb      	ldrb	r3, [r7, #11]
 8007992:	3301      	adds	r3, #1
 8007994:	72fb      	strb	r3, [r7, #11]
          break;
 8007996:	e007      	b.n	80079a8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007998:	6839      	ldr	r1, [r7, #0]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fa41 	bl	8007e22 <USBD_CtlError>
          err++;
 80079a0:	7afb      	ldrb	r3, [r7, #11]
 80079a2:	3301      	adds	r3, #1
 80079a4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80079a6:	bf00      	nop
      }
      break;
 80079a8:	e037      	b.n	8007a1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	7c1b      	ldrb	r3, [r3, #16]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d109      	bne.n	80079c6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079ba:	f107 0208 	add.w	r2, r7, #8
 80079be:	4610      	mov	r0, r2
 80079c0:	4798      	blx	r3
 80079c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079c4:	e029      	b.n	8007a1a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079c6:	6839      	ldr	r1, [r7, #0]
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 fa2a 	bl	8007e22 <USBD_CtlError>
        err++;
 80079ce:	7afb      	ldrb	r3, [r7, #11]
 80079d0:	3301      	adds	r3, #1
 80079d2:	72fb      	strb	r3, [r7, #11]
      break;
 80079d4:	e021      	b.n	8007a1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	7c1b      	ldrb	r3, [r3, #16]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10d      	bne.n	80079fa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079e6:	f107 0208 	add.w	r2, r7, #8
 80079ea:	4610      	mov	r0, r2
 80079ec:	4798      	blx	r3
 80079ee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	3301      	adds	r3, #1
 80079f4:	2207      	movs	r2, #7
 80079f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079f8:	e00f      	b.n	8007a1a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079fa:	6839      	ldr	r1, [r7, #0]
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fa10 	bl	8007e22 <USBD_CtlError>
        err++;
 8007a02:	7afb      	ldrb	r3, [r7, #11]
 8007a04:	3301      	adds	r3, #1
 8007a06:	72fb      	strb	r3, [r7, #11]
      break;
 8007a08:	e007      	b.n	8007a1a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007a0a:	6839      	ldr	r1, [r7, #0]
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fa08 	bl	8007e22 <USBD_CtlError>
      err++;
 8007a12:	7afb      	ldrb	r3, [r7, #11]
 8007a14:	3301      	adds	r3, #1
 8007a16:	72fb      	strb	r3, [r7, #11]
      break;
 8007a18:	bf00      	nop
  }

  if (err != 0U)
 8007a1a:	7afb      	ldrb	r3, [r7, #11]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d11e      	bne.n	8007a5e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	88db      	ldrh	r3, [r3, #6]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d016      	beq.n	8007a56 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007a28:	893b      	ldrh	r3, [r7, #8]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00e      	beq.n	8007a4c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	88da      	ldrh	r2, [r3, #6]
 8007a32:	893b      	ldrh	r3, [r7, #8]
 8007a34:	4293      	cmp	r3, r2
 8007a36:	bf28      	it	cs
 8007a38:	4613      	movcs	r3, r2
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007a3e:	893b      	ldrh	r3, [r7, #8]
 8007a40:	461a      	mov	r2, r3
 8007a42:	68f9      	ldr	r1, [r7, #12]
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 fa69 	bl	8007f1c <USBD_CtlSendData>
 8007a4a:	e009      	b.n	8007a60 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f9e7 	bl	8007e22 <USBD_CtlError>
 8007a54:	e004      	b.n	8007a60 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 faba 	bl	8007fd0 <USBD_CtlSendStatus>
 8007a5c:	e000      	b.n	8007a60 <USBD_GetDescriptor+0x2cc>
    return;
 8007a5e:	bf00      	nop
  }
}
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop

08007a68 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	889b      	ldrh	r3, [r3, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d131      	bne.n	8007ade <USBD_SetAddress+0x76>
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	88db      	ldrh	r3, [r3, #6]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d12d      	bne.n	8007ade <USBD_SetAddress+0x76>
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	885b      	ldrh	r3, [r3, #2]
 8007a86:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a88:	d829      	bhi.n	8007ade <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	885b      	ldrh	r3, [r3, #2]
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a94:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	d104      	bne.n	8007aac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007aa2:	6839      	ldr	r1, [r7, #0]
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f9bc 	bl	8007e22 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aaa:	e01d      	b.n	8007ae8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	7bfa      	ldrb	r2, [r7, #15]
 8007ab0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ab4:	7bfb      	ldrb	r3, [r7, #15]
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 feeb 	bl	8008894 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fa86 	bl	8007fd0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007ac4:	7bfb      	ldrb	r3, [r7, #15]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d004      	beq.n	8007ad4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2202      	movs	r2, #2
 8007ace:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ad2:	e009      	b.n	8007ae8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007adc:	e004      	b.n	8007ae8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007ade:	6839      	ldr	r1, [r7, #0]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f99e 	bl	8007e22 <USBD_CtlError>
  }
}
 8007ae6:	bf00      	nop
 8007ae8:	bf00      	nop
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007afa:	2300      	movs	r3, #0
 8007afc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	885b      	ldrh	r3, [r3, #2]
 8007b02:	b2da      	uxtb	r2, r3
 8007b04:	4b4e      	ldr	r3, [pc, #312]	@ (8007c40 <USBD_SetConfig+0x150>)
 8007b06:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007b08:	4b4d      	ldr	r3, [pc, #308]	@ (8007c40 <USBD_SetConfig+0x150>)
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d905      	bls.n	8007b1c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007b10:	6839      	ldr	r1, [r7, #0]
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f985 	bl	8007e22 <USBD_CtlError>
    return USBD_FAIL;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e08c      	b.n	8007c36 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d002      	beq.n	8007b2e <USBD_SetConfig+0x3e>
 8007b28:	2b03      	cmp	r3, #3
 8007b2a:	d029      	beq.n	8007b80 <USBD_SetConfig+0x90>
 8007b2c:	e075      	b.n	8007c1a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007b2e:	4b44      	ldr	r3, [pc, #272]	@ (8007c40 <USBD_SetConfig+0x150>)
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d020      	beq.n	8007b78 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007b36:	4b42      	ldr	r3, [pc, #264]	@ (8007c40 <USBD_SetConfig+0x150>)
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b40:	4b3f      	ldr	r3, [pc, #252]	@ (8007c40 <USBD_SetConfig+0x150>)
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	4619      	mov	r1, r3
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7fe ffe3 	bl	8006b12 <USBD_SetClassConfig>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007b50:	7bfb      	ldrb	r3, [r7, #15]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d008      	beq.n	8007b68 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 f962 	bl	8007e22 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2202      	movs	r2, #2
 8007b62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b66:	e065      	b.n	8007c34 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 fa31 	bl	8007fd0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2203      	movs	r2, #3
 8007b72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007b76:	e05d      	b.n	8007c34 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fa29 	bl	8007fd0 <USBD_CtlSendStatus>
      break;
 8007b7e:	e059      	b.n	8007c34 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007b80:	4b2f      	ldr	r3, [pc, #188]	@ (8007c40 <USBD_SetConfig+0x150>)
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d112      	bne.n	8007bae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2202      	movs	r2, #2
 8007b8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007b90:	4b2b      	ldr	r3, [pc, #172]	@ (8007c40 <USBD_SetConfig+0x150>)
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	461a      	mov	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b9a:	4b29      	ldr	r3, [pc, #164]	@ (8007c40 <USBD_SetConfig+0x150>)
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f7fe ffd2 	bl	8006b4a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 fa12 	bl	8007fd0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007bac:	e042      	b.n	8007c34 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007bae:	4b24      	ldr	r3, [pc, #144]	@ (8007c40 <USBD_SetConfig+0x150>)
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d02a      	beq.n	8007c12 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f7fe ffc0 	bl	8006b4a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007bca:	4b1d      	ldr	r3, [pc, #116]	@ (8007c40 <USBD_SetConfig+0x150>)
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8007c40 <USBD_SetConfig+0x150>)
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	4619      	mov	r1, r3
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f7fe ff99 	bl	8006b12 <USBD_SetClassConfig>
 8007be0:	4603      	mov	r3, r0
 8007be2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007be4:	7bfb      	ldrb	r3, [r7, #15]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00f      	beq.n	8007c0a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007bea:	6839      	ldr	r1, [r7, #0]
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 f918 	bl	8007e22 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f7fe ffa5 	bl	8006b4a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2202      	movs	r2, #2
 8007c04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007c08:	e014      	b.n	8007c34 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 f9e0 	bl	8007fd0 <USBD_CtlSendStatus>
      break;
 8007c10:	e010      	b.n	8007c34 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f9dc 	bl	8007fd0 <USBD_CtlSendStatus>
      break;
 8007c18:	e00c      	b.n	8007c34 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007c1a:	6839      	ldr	r1, [r7, #0]
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f900 	bl	8007e22 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c22:	4b07      	ldr	r3, [pc, #28]	@ (8007c40 <USBD_SetConfig+0x150>)
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	4619      	mov	r1, r3
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f7fe ff8e 	bl	8006b4a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	73fb      	strb	r3, [r7, #15]
      break;
 8007c32:	bf00      	nop
  }

  return ret;
 8007c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	200003b4 	.word	0x200003b4

08007c44 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	88db      	ldrh	r3, [r3, #6]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d004      	beq.n	8007c60 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007c56:	6839      	ldr	r1, [r7, #0]
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 f8e2 	bl	8007e22 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007c5e:	e023      	b.n	8007ca8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	dc02      	bgt.n	8007c72 <USBD_GetConfig+0x2e>
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	dc03      	bgt.n	8007c78 <USBD_GetConfig+0x34>
 8007c70:	e015      	b.n	8007c9e <USBD_GetConfig+0x5a>
 8007c72:	2b03      	cmp	r3, #3
 8007c74:	d00b      	beq.n	8007c8e <USBD_GetConfig+0x4a>
 8007c76:	e012      	b.n	8007c9e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	3308      	adds	r3, #8
 8007c82:	2201      	movs	r2, #1
 8007c84:	4619      	mov	r1, r3
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 f948 	bl	8007f1c <USBD_CtlSendData>
        break;
 8007c8c:	e00c      	b.n	8007ca8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	3304      	adds	r3, #4
 8007c92:	2201      	movs	r2, #1
 8007c94:	4619      	mov	r1, r3
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f940 	bl	8007f1c <USBD_CtlSendData>
        break;
 8007c9c:	e004      	b.n	8007ca8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007c9e:	6839      	ldr	r1, [r7, #0]
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 f8be 	bl	8007e22 <USBD_CtlError>
        break;
 8007ca6:	bf00      	nop
}
 8007ca8:	bf00      	nop
 8007caa:	3708      	adds	r7, #8
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d81e      	bhi.n	8007d06 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	88db      	ldrh	r3, [r3, #6]
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d004      	beq.n	8007cda <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007cd0:	6839      	ldr	r1, [r7, #0]
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 f8a5 	bl	8007e22 <USBD_CtlError>
        break;
 8007cd8:	e01a      	b.n	8007d10 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d005      	beq.n	8007cf6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	f043 0202 	orr.w	r2, r3, #2
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	330c      	adds	r3, #12
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 f90c 	bl	8007f1c <USBD_CtlSendData>
      break;
 8007d04:	e004      	b.n	8007d10 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007d06:	6839      	ldr	r1, [r7, #0]
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 f88a 	bl	8007e22 <USBD_CtlError>
      break;
 8007d0e:	bf00      	nop
  }
}
 8007d10:	bf00      	nop
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	885b      	ldrh	r3, [r3, #2]
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d107      	bne.n	8007d3a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f94c 	bl	8007fd0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007d38:	e013      	b.n	8007d62 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	885b      	ldrh	r3, [r3, #2]
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d10b      	bne.n	8007d5a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	889b      	ldrh	r3, [r3, #4]
 8007d46:	0a1b      	lsrs	r3, r3, #8
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	b2da      	uxtb	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f93c 	bl	8007fd0 <USBD_CtlSendStatus>
}
 8007d58:	e003      	b.n	8007d62 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f860 	bl	8007e22 <USBD_CtlError>
}
 8007d62:	bf00      	nop
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b082      	sub	sp, #8
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
 8007d72:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d80b      	bhi.n	8007d9a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	885b      	ldrh	r3, [r3, #2]
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d10c      	bne.n	8007da4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 f91c 	bl	8007fd0 <USBD_CtlSendStatus>
      }
      break;
 8007d98:	e004      	b.n	8007da4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007d9a:	6839      	ldr	r1, [r7, #0]
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 f840 	bl	8007e22 <USBD_CtlError>
      break;
 8007da2:	e000      	b.n	8007da6 <USBD_ClrFeature+0x3c>
      break;
 8007da4:	bf00      	nop
  }
}
 8007da6:	bf00      	nop
 8007da8:	3708      	adds	r7, #8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b084      	sub	sp, #16
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
 8007db6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	781a      	ldrb	r2, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	781a      	ldrb	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f7ff fa40 	bl	800725e <SWAPBYTE>
 8007dde:	4603      	mov	r3, r0
 8007de0:	461a      	mov	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	3301      	adds	r3, #1
 8007dea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	3301      	adds	r3, #1
 8007df0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f7ff fa33 	bl	800725e <SWAPBYTE>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	3301      	adds	r3, #1
 8007e04:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f7ff fa26 	bl	800725e <SWAPBYTE>
 8007e12:	4603      	mov	r3, r0
 8007e14:	461a      	mov	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	80da      	strh	r2, [r3, #6]
}
 8007e1a:	bf00      	nop
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b082      	sub	sp, #8
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e2c:	2180      	movs	r1, #128	@ 0x80
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 fcc6 	bl	80087c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007e34:	2100      	movs	r1, #0
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fcc2 	bl	80087c0 <USBD_LL_StallEP>
}
 8007e3c:	bf00      	nop
 8007e3e:	3708      	adds	r7, #8
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b086      	sub	sp, #24
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007e50:	2300      	movs	r3, #0
 8007e52:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d042      	beq.n	8007ee0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007e5e:	6938      	ldr	r0, [r7, #16]
 8007e60:	f000 f842 	bl	8007ee8 <USBD_GetLen>
 8007e64:	4603      	mov	r3, r0
 8007e66:	3301      	adds	r3, #1
 8007e68:	005b      	lsls	r3, r3, #1
 8007e6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e6e:	d808      	bhi.n	8007e82 <USBD_GetString+0x3e>
 8007e70:	6938      	ldr	r0, [r7, #16]
 8007e72:	f000 f839 	bl	8007ee8 <USBD_GetLen>
 8007e76:	4603      	mov	r3, r0
 8007e78:	3301      	adds	r3, #1
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	005b      	lsls	r3, r3, #1
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	e001      	b.n	8007e86 <USBD_GetString+0x42>
 8007e82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007e8a:	7dfb      	ldrb	r3, [r7, #23]
 8007e8c:	68ba      	ldr	r2, [r7, #8]
 8007e8e:	4413      	add	r3, r2
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	7812      	ldrb	r2, [r2, #0]
 8007e94:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e96:	7dfb      	ldrb	r3, [r7, #23]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007e9c:	7dfb      	ldrb	r3, [r7, #23]
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	2203      	movs	r2, #3
 8007ea4:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ea6:	7dfb      	ldrb	r3, [r7, #23]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007eac:	e013      	b.n	8007ed6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007eae:	7dfb      	ldrb	r3, [r7, #23]
 8007eb0:	68ba      	ldr	r2, [r7, #8]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	7812      	ldrb	r2, [r2, #0]
 8007eb8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	613b      	str	r3, [r7, #16]
    idx++;
 8007ec0:	7dfb      	ldrb	r3, [r7, #23]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007ec6:	7dfb      	ldrb	r3, [r7, #23]
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	4413      	add	r3, r2
 8007ecc:	2200      	movs	r2, #0
 8007ece:	701a      	strb	r2, [r3, #0]
    idx++;
 8007ed0:	7dfb      	ldrb	r3, [r7, #23]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d1e7      	bne.n	8007eae <USBD_GetString+0x6a>
 8007ede:	e000      	b.n	8007ee2 <USBD_GetString+0x9e>
    return;
 8007ee0:	bf00      	nop
  }
}
 8007ee2:	3718      	adds	r7, #24
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007ef8:	e005      	b.n	8007f06 <USBD_GetLen+0x1e>
  {
    len++;
 8007efa:	7bfb      	ldrb	r3, [r7, #15]
 8007efc:	3301      	adds	r3, #1
 8007efe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	3301      	adds	r3, #1
 8007f04:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d1f5      	bne.n	8007efa <USBD_GetLen+0x12>
  }

  return len;
 8007f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3714      	adds	r7, #20
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2202      	movs	r2, #2
 8007f2c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	2100      	movs	r1, #0
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f000 fcc5 	bl	80088d2 <USBD_LL_Transmit>

  return USBD_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3710      	adds	r7, #16
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b084      	sub	sp, #16
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	60f8      	str	r0, [r7, #12]
 8007f5a:	60b9      	str	r1, [r7, #8]
 8007f5c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	2100      	movs	r1, #0
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f000 fcb4 	bl	80088d2 <USBD_LL_Transmit>

  return USBD_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2203      	movs	r2, #3
 8007f84:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f000 fcb8 	bl	8008914 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3710      	adds	r7, #16
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b084      	sub	sp, #16
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	60f8      	str	r0, [r7, #12]
 8007fb6:	60b9      	str	r1, [r7, #8]
 8007fb8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	68ba      	ldr	r2, [r7, #8]
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f000 fca7 	bl	8008914 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2204      	movs	r2, #4
 8007fdc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 fc73 	bl	80088d2 <USBD_LL_Transmit>

  return USBD_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b082      	sub	sp, #8
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2205      	movs	r2, #5
 8008002:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008006:	2300      	movs	r3, #0
 8008008:	2200      	movs	r2, #0
 800800a:	2100      	movs	r1, #0
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fc81 	bl	8008914 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008020:	2200      	movs	r2, #0
 8008022:	4912      	ldr	r1, [pc, #72]	@ (800806c <MX_USB_DEVICE_Init+0x50>)
 8008024:	4812      	ldr	r0, [pc, #72]	@ (8008070 <MX_USB_DEVICE_Init+0x54>)
 8008026:	f7fe fcf7 	bl	8006a18 <USBD_Init>
 800802a:	4603      	mov	r3, r0
 800802c:	2b00      	cmp	r3, #0
 800802e:	d001      	beq.n	8008034 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008030:	f7f9 f896 	bl	8001160 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008034:	490f      	ldr	r1, [pc, #60]	@ (8008074 <MX_USB_DEVICE_Init+0x58>)
 8008036:	480e      	ldr	r0, [pc, #56]	@ (8008070 <MX_USB_DEVICE_Init+0x54>)
 8008038:	f7fe fd1e 	bl	8006a78 <USBD_RegisterClass>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d001      	beq.n	8008046 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008042:	f7f9 f88d 	bl	8001160 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008046:	490c      	ldr	r1, [pc, #48]	@ (8008078 <MX_USB_DEVICE_Init+0x5c>)
 8008048:	4809      	ldr	r0, [pc, #36]	@ (8008070 <MX_USB_DEVICE_Init+0x54>)
 800804a:	f7fe fc55 	bl	80068f8 <USBD_CDC_RegisterInterface>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d001      	beq.n	8008058 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008054:	f7f9 f884 	bl	8001160 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008058:	4805      	ldr	r0, [pc, #20]	@ (8008070 <MX_USB_DEVICE_Init+0x54>)
 800805a:	f7fe fd43 	bl	8006ae4 <USBD_Start>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d001      	beq.n	8008068 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008064:	f7f9 f87c 	bl	8001160 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008068:	bf00      	nop
 800806a:	bd80      	pop	{r7, pc}
 800806c:	200000c0 	.word	0x200000c0
 8008070:	200003b8 	.word	0x200003b8
 8008074:	2000002c 	.word	0x2000002c
 8008078:	200000ac 	.word	0x200000ac

0800807c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008080:	2200      	movs	r2, #0
 8008082:	4905      	ldr	r1, [pc, #20]	@ (8008098 <CDC_Init_FS+0x1c>)
 8008084:	4805      	ldr	r0, [pc, #20]	@ (800809c <CDC_Init_FS+0x20>)
 8008086:	f7fe fc51 	bl	800692c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800808a:	4905      	ldr	r1, [pc, #20]	@ (80080a0 <CDC_Init_FS+0x24>)
 800808c:	4803      	ldr	r0, [pc, #12]	@ (800809c <CDC_Init_FS+0x20>)
 800808e:	f7fe fc6f 	bl	8006970 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008092:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008094:	4618      	mov	r0, r3
 8008096:	bd80      	pop	{r7, pc}
 8008098:	20000e94 	.word	0x20000e94
 800809c:	200003b8 	.word	0x200003b8
 80080a0:	20000694 	.word	0x20000694

080080a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80080a4:	b480      	push	{r7}
 80080a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80080a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	4603      	mov	r3, r0
 80080bc:	6039      	str	r1, [r7, #0]
 80080be:	71fb      	strb	r3, [r7, #7]
 80080c0:	4613      	mov	r3, r2
 80080c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80080c4:	79fb      	ldrb	r3, [r7, #7]
 80080c6:	2b23      	cmp	r3, #35	@ 0x23
 80080c8:	d84a      	bhi.n	8008160 <CDC_Control_FS+0xac>
 80080ca:	a201      	add	r2, pc, #4	@ (adr r2, 80080d0 <CDC_Control_FS+0x1c>)
 80080cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d0:	08008161 	.word	0x08008161
 80080d4:	08008161 	.word	0x08008161
 80080d8:	08008161 	.word	0x08008161
 80080dc:	08008161 	.word	0x08008161
 80080e0:	08008161 	.word	0x08008161
 80080e4:	08008161 	.word	0x08008161
 80080e8:	08008161 	.word	0x08008161
 80080ec:	08008161 	.word	0x08008161
 80080f0:	08008161 	.word	0x08008161
 80080f4:	08008161 	.word	0x08008161
 80080f8:	08008161 	.word	0x08008161
 80080fc:	08008161 	.word	0x08008161
 8008100:	08008161 	.word	0x08008161
 8008104:	08008161 	.word	0x08008161
 8008108:	08008161 	.word	0x08008161
 800810c:	08008161 	.word	0x08008161
 8008110:	08008161 	.word	0x08008161
 8008114:	08008161 	.word	0x08008161
 8008118:	08008161 	.word	0x08008161
 800811c:	08008161 	.word	0x08008161
 8008120:	08008161 	.word	0x08008161
 8008124:	08008161 	.word	0x08008161
 8008128:	08008161 	.word	0x08008161
 800812c:	08008161 	.word	0x08008161
 8008130:	08008161 	.word	0x08008161
 8008134:	08008161 	.word	0x08008161
 8008138:	08008161 	.word	0x08008161
 800813c:	08008161 	.word	0x08008161
 8008140:	08008161 	.word	0x08008161
 8008144:	08008161 	.word	0x08008161
 8008148:	08008161 	.word	0x08008161
 800814c:	08008161 	.word	0x08008161
 8008150:	08008161 	.word	0x08008161
 8008154:	08008161 	.word	0x08008161
 8008158:	08008161 	.word	0x08008161
 800815c:	08008161 	.word	0x08008161
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008160:	bf00      	nop
  }

  return (USBD_OK);
 8008162:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008164:	4618      	mov	r0, r3
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800817a:	6879      	ldr	r1, [r7, #4]
 800817c:	4805      	ldr	r0, [pc, #20]	@ (8008194 <CDC_Receive_FS+0x24>)
 800817e:	f7fe fbf7 	bl	8006970 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008182:	4804      	ldr	r0, [pc, #16]	@ (8008194 <CDC_Receive_FS+0x24>)
 8008184:	f7fe fc12 	bl	80069ac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008188:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800818a:	4618      	mov	r0, r3
 800818c:	3708      	adds	r7, #8
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	200003b8 	.word	0x200003b8

08008198 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008198:	b480      	push	{r7}
 800819a:	b087      	sub	sp, #28
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	4613      	mov	r3, r2
 80081a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80081a6:	2300      	movs	r3, #0
 80081a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80081aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	371c      	adds	r7, #28
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
	...

080081bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	4603      	mov	r3, r0
 80081c4:	6039      	str	r1, [r7, #0]
 80081c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	2212      	movs	r2, #18
 80081cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80081ce:	4b03      	ldr	r3, [pc, #12]	@ (80081dc <USBD_FS_DeviceDescriptor+0x20>)
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr
 80081dc:	200000dc 	.word	0x200000dc

080081e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	4603      	mov	r3, r0
 80081e8:	6039      	str	r1, [r7, #0]
 80081ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	2204      	movs	r2, #4
 80081f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80081f2:	4b03      	ldr	r3, [pc, #12]	@ (8008200 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr
 8008200:	200000f0 	.word	0x200000f0

08008204 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
 800820a:	4603      	mov	r3, r0
 800820c:	6039      	str	r1, [r7, #0]
 800820e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008210:	79fb      	ldrb	r3, [r7, #7]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d105      	bne.n	8008222 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008216:	683a      	ldr	r2, [r7, #0]
 8008218:	4907      	ldr	r1, [pc, #28]	@ (8008238 <USBD_FS_ProductStrDescriptor+0x34>)
 800821a:	4808      	ldr	r0, [pc, #32]	@ (800823c <USBD_FS_ProductStrDescriptor+0x38>)
 800821c:	f7ff fe12 	bl	8007e44 <USBD_GetString>
 8008220:	e004      	b.n	800822c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008222:	683a      	ldr	r2, [r7, #0]
 8008224:	4904      	ldr	r1, [pc, #16]	@ (8008238 <USBD_FS_ProductStrDescriptor+0x34>)
 8008226:	4805      	ldr	r0, [pc, #20]	@ (800823c <USBD_FS_ProductStrDescriptor+0x38>)
 8008228:	f7ff fe0c 	bl	8007e44 <USBD_GetString>
  }
  return USBD_StrDesc;
 800822c:	4b02      	ldr	r3, [pc, #8]	@ (8008238 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800822e:	4618      	mov	r0, r3
 8008230:	3708      	adds	r7, #8
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	20001694 	.word	0x20001694
 800823c:	08009aa0 	.word	0x08009aa0

08008240 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	4603      	mov	r3, r0
 8008248:	6039      	str	r1, [r7, #0]
 800824a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800824c:	683a      	ldr	r2, [r7, #0]
 800824e:	4904      	ldr	r1, [pc, #16]	@ (8008260 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008250:	4804      	ldr	r0, [pc, #16]	@ (8008264 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008252:	f7ff fdf7 	bl	8007e44 <USBD_GetString>
  return USBD_StrDesc;
 8008256:	4b02      	ldr	r3, [pc, #8]	@ (8008260 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008258:	4618      	mov	r0, r3
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}
 8008260:	20001694 	.word	0x20001694
 8008264:	08009ab8 	.word	0x08009ab8

08008268 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	4603      	mov	r3, r0
 8008270:	6039      	str	r1, [r7, #0]
 8008272:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	221a      	movs	r2, #26
 8008278:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800827a:	f000 f843 	bl	8008304 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800827e:	4b02      	ldr	r3, [pc, #8]	@ (8008288 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008280:	4618      	mov	r0, r3
 8008282:	3708      	adds	r7, #8
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	200000f4 	.word	0x200000f4

0800828c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	4603      	mov	r3, r0
 8008294:	6039      	str	r1, [r7, #0]
 8008296:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008298:	79fb      	ldrb	r3, [r7, #7]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d105      	bne.n	80082aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	4907      	ldr	r1, [pc, #28]	@ (80082c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80082a2:	4808      	ldr	r0, [pc, #32]	@ (80082c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80082a4:	f7ff fdce 	bl	8007e44 <USBD_GetString>
 80082a8:	e004      	b.n	80082b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082aa:	683a      	ldr	r2, [r7, #0]
 80082ac:	4904      	ldr	r1, [pc, #16]	@ (80082c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80082ae:	4805      	ldr	r0, [pc, #20]	@ (80082c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80082b0:	f7ff fdc8 	bl	8007e44 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082b4:	4b02      	ldr	r3, [pc, #8]	@ (80082c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3708      	adds	r7, #8
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	20001694 	.word	0x20001694
 80082c4:	08009acc 	.word	0x08009acc

080082c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	4603      	mov	r3, r0
 80082d0:	6039      	str	r1, [r7, #0]
 80082d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082d4:	79fb      	ldrb	r3, [r7, #7]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d105      	bne.n	80082e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082da:	683a      	ldr	r2, [r7, #0]
 80082dc:	4907      	ldr	r1, [pc, #28]	@ (80082fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082de:	4808      	ldr	r0, [pc, #32]	@ (8008300 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082e0:	f7ff fdb0 	bl	8007e44 <USBD_GetString>
 80082e4:	e004      	b.n	80082f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082e6:	683a      	ldr	r2, [r7, #0]
 80082e8:	4904      	ldr	r1, [pc, #16]	@ (80082fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082ea:	4805      	ldr	r0, [pc, #20]	@ (8008300 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082ec:	f7ff fdaa 	bl	8007e44 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082f0:	4b02      	ldr	r3, [pc, #8]	@ (80082fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3708      	adds	r7, #8
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	20001694 	.word	0x20001694
 8008300:	08009ad8 	.word	0x08009ad8

08008304 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800830a:	4b0f      	ldr	r3, [pc, #60]	@ (8008348 <Get_SerialNum+0x44>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008310:	4b0e      	ldr	r3, [pc, #56]	@ (800834c <Get_SerialNum+0x48>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008316:	4b0e      	ldr	r3, [pc, #56]	@ (8008350 <Get_SerialNum+0x4c>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4413      	add	r3, r2
 8008322:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d009      	beq.n	800833e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800832a:	2208      	movs	r2, #8
 800832c:	4909      	ldr	r1, [pc, #36]	@ (8008354 <Get_SerialNum+0x50>)
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f000 f814 	bl	800835c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008334:	2204      	movs	r2, #4
 8008336:	4908      	ldr	r1, [pc, #32]	@ (8008358 <Get_SerialNum+0x54>)
 8008338:	68b8      	ldr	r0, [r7, #8]
 800833a:	f000 f80f 	bl	800835c <IntToUnicode>
  }
}
 800833e:	bf00      	nop
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	1fff7a10 	.word	0x1fff7a10
 800834c:	1fff7a14 	.word	0x1fff7a14
 8008350:	1fff7a18 	.word	0x1fff7a18
 8008354:	200000f6 	.word	0x200000f6
 8008358:	20000106 	.word	0x20000106

0800835c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800835c:	b480      	push	{r7}
 800835e:	b087      	sub	sp, #28
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	4613      	mov	r3, r2
 8008368:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800836a:	2300      	movs	r3, #0
 800836c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800836e:	2300      	movs	r3, #0
 8008370:	75fb      	strb	r3, [r7, #23]
 8008372:	e027      	b.n	80083c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	0f1b      	lsrs	r3, r3, #28
 8008378:	2b09      	cmp	r3, #9
 800837a:	d80b      	bhi.n	8008394 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	0f1b      	lsrs	r3, r3, #28
 8008380:	b2da      	uxtb	r2, r3
 8008382:	7dfb      	ldrb	r3, [r7, #23]
 8008384:	005b      	lsls	r3, r3, #1
 8008386:	4619      	mov	r1, r3
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	440b      	add	r3, r1
 800838c:	3230      	adds	r2, #48	@ 0x30
 800838e:	b2d2      	uxtb	r2, r2
 8008390:	701a      	strb	r2, [r3, #0]
 8008392:	e00a      	b.n	80083aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	0f1b      	lsrs	r3, r3, #28
 8008398:	b2da      	uxtb	r2, r3
 800839a:	7dfb      	ldrb	r3, [r7, #23]
 800839c:	005b      	lsls	r3, r3, #1
 800839e:	4619      	mov	r1, r3
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	440b      	add	r3, r1
 80083a4:	3237      	adds	r2, #55	@ 0x37
 80083a6:	b2d2      	uxtb	r2, r2
 80083a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	011b      	lsls	r3, r3, #4
 80083ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80083b0:	7dfb      	ldrb	r3, [r7, #23]
 80083b2:	005b      	lsls	r3, r3, #1
 80083b4:	3301      	adds	r3, #1
 80083b6:	68ba      	ldr	r2, [r7, #8]
 80083b8:	4413      	add	r3, r2
 80083ba:	2200      	movs	r2, #0
 80083bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80083be:	7dfb      	ldrb	r3, [r7, #23]
 80083c0:	3301      	adds	r3, #1
 80083c2:	75fb      	strb	r3, [r7, #23]
 80083c4:	7dfa      	ldrb	r2, [r7, #23]
 80083c6:	79fb      	ldrb	r3, [r7, #7]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d3d3      	bcc.n	8008374 <IntToUnicode+0x18>
  }
}
 80083cc:	bf00      	nop
 80083ce:	bf00      	nop
 80083d0:	371c      	adds	r7, #28
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
	...

080083dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b08a      	sub	sp, #40	@ 0x28
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083e4:	f107 0314 	add.w	r3, r7, #20
 80083e8:	2200      	movs	r2, #0
 80083ea:	601a      	str	r2, [r3, #0]
 80083ec:	605a      	str	r2, [r3, #4]
 80083ee:	609a      	str	r2, [r3, #8]
 80083f0:	60da      	str	r2, [r3, #12]
 80083f2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083fc:	d13a      	bne.n	8008474 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083fe:	2300      	movs	r3, #0
 8008400:	613b      	str	r3, [r7, #16]
 8008402:	4b1e      	ldr	r3, [pc, #120]	@ (800847c <HAL_PCD_MspInit+0xa0>)
 8008404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008406:	4a1d      	ldr	r2, [pc, #116]	@ (800847c <HAL_PCD_MspInit+0xa0>)
 8008408:	f043 0301 	orr.w	r3, r3, #1
 800840c:	6313      	str	r3, [r2, #48]	@ 0x30
 800840e:	4b1b      	ldr	r3, [pc, #108]	@ (800847c <HAL_PCD_MspInit+0xa0>)
 8008410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008412:	f003 0301 	and.w	r3, r3, #1
 8008416:	613b      	str	r3, [r7, #16]
 8008418:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800841a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800841e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008420:	2302      	movs	r3, #2
 8008422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008424:	2300      	movs	r3, #0
 8008426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008428:	2303      	movs	r3, #3
 800842a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800842c:	230a      	movs	r3, #10
 800842e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008430:	f107 0314 	add.w	r3, r7, #20
 8008434:	4619      	mov	r1, r3
 8008436:	4812      	ldr	r0, [pc, #72]	@ (8008480 <HAL_PCD_MspInit+0xa4>)
 8008438:	f7f9 fb40 	bl	8001abc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800843c:	4b0f      	ldr	r3, [pc, #60]	@ (800847c <HAL_PCD_MspInit+0xa0>)
 800843e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008440:	4a0e      	ldr	r2, [pc, #56]	@ (800847c <HAL_PCD_MspInit+0xa0>)
 8008442:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008446:	6353      	str	r3, [r2, #52]	@ 0x34
 8008448:	2300      	movs	r3, #0
 800844a:	60fb      	str	r3, [r7, #12]
 800844c:	4b0b      	ldr	r3, [pc, #44]	@ (800847c <HAL_PCD_MspInit+0xa0>)
 800844e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008450:	4a0a      	ldr	r2, [pc, #40]	@ (800847c <HAL_PCD_MspInit+0xa0>)
 8008452:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008456:	6453      	str	r3, [r2, #68]	@ 0x44
 8008458:	4b08      	ldr	r3, [pc, #32]	@ (800847c <HAL_PCD_MspInit+0xa0>)
 800845a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800845c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008460:	60fb      	str	r3, [r7, #12]
 8008462:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008464:	2200      	movs	r2, #0
 8008466:	2100      	movs	r1, #0
 8008468:	2043      	movs	r0, #67	@ 0x43
 800846a:	f7f9 fa5e 	bl	800192a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800846e:	2043      	movs	r0, #67	@ 0x43
 8008470:	f7f9 fa77 	bl	8001962 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008474:	bf00      	nop
 8008476:	3728      	adds	r7, #40	@ 0x28
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	40023800 	.word	0x40023800
 8008480:	40020000 	.word	0x40020000

08008484 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008498:	4619      	mov	r1, r3
 800849a:	4610      	mov	r0, r2
 800849c:	f7fe fb6f 	bl	8006b7e <USBD_LL_SetupStage>
}
 80084a0:	bf00      	nop
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	460b      	mov	r3, r1
 80084b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80084ba:	78fa      	ldrb	r2, [r7, #3]
 80084bc:	6879      	ldr	r1, [r7, #4]
 80084be:	4613      	mov	r3, r2
 80084c0:	00db      	lsls	r3, r3, #3
 80084c2:	4413      	add	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	440b      	add	r3, r1
 80084c8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	78fb      	ldrb	r3, [r7, #3]
 80084d0:	4619      	mov	r1, r3
 80084d2:	f7fe fba9 	bl	8006c28 <USBD_LL_DataOutStage>
}
 80084d6:	bf00      	nop
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b082      	sub	sp, #8
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
 80084e6:	460b      	mov	r3, r1
 80084e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80084f0:	78fa      	ldrb	r2, [r7, #3]
 80084f2:	6879      	ldr	r1, [r7, #4]
 80084f4:	4613      	mov	r3, r2
 80084f6:	00db      	lsls	r3, r3, #3
 80084f8:	4413      	add	r3, r2
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	440b      	add	r3, r1
 80084fe:	3320      	adds	r3, #32
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	78fb      	ldrb	r3, [r7, #3]
 8008504:	4619      	mov	r1, r3
 8008506:	f7fe fc42 	bl	8006d8e <USBD_LL_DataInStage>
}
 800850a:	bf00      	nop
 800850c:	3708      	adds	r7, #8
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b082      	sub	sp, #8
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008520:	4618      	mov	r0, r3
 8008522:	f7fe fd7c 	bl	800701e <USBD_LL_SOF>
}
 8008526:	bf00      	nop
 8008528:	3708      	adds	r7, #8
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b084      	sub	sp, #16
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008536:	2301      	movs	r3, #1
 8008538:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	79db      	ldrb	r3, [r3, #7]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d102      	bne.n	8008548 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008542:	2300      	movs	r3, #0
 8008544:	73fb      	strb	r3, [r7, #15]
 8008546:	e008      	b.n	800855a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	79db      	ldrb	r3, [r3, #7]
 800854c:	2b02      	cmp	r3, #2
 800854e:	d102      	bne.n	8008556 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008550:	2301      	movs	r3, #1
 8008552:	73fb      	strb	r3, [r7, #15]
 8008554:	e001      	b.n	800855a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008556:	f7f8 fe03 	bl	8001160 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008560:	7bfa      	ldrb	r2, [r7, #15]
 8008562:	4611      	mov	r1, r2
 8008564:	4618      	mov	r0, r3
 8008566:	f7fe fd16 	bl	8006f96 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008570:	4618      	mov	r0, r3
 8008572:	f7fe fcbe 	bl	8006ef2 <USBD_LL_Reset>
}
 8008576:	bf00      	nop
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
	...

08008580 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800858e:	4618      	mov	r0, r3
 8008590:	f7fe fd11 	bl	8006fb6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	6812      	ldr	r2, [r2, #0]
 80085a2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80085a6:	f043 0301 	orr.w	r3, r3, #1
 80085aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	7adb      	ldrb	r3, [r3, #11]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d005      	beq.n	80085c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80085b4:	4b04      	ldr	r3, [pc, #16]	@ (80085c8 <HAL_PCD_SuspendCallback+0x48>)
 80085b6:	691b      	ldr	r3, [r3, #16]
 80085b8:	4a03      	ldr	r2, [pc, #12]	@ (80085c8 <HAL_PCD_SuspendCallback+0x48>)
 80085ba:	f043 0306 	orr.w	r3, r3, #6
 80085be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80085c0:	bf00      	nop
 80085c2:	3708      	adds	r7, #8
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	e000ed00 	.word	0xe000ed00

080085cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80085da:	4618      	mov	r0, r3
 80085dc:	f7fe fd07 	bl	8006fee <USBD_LL_Resume>
}
 80085e0:	bf00      	nop
 80085e2:	3708      	adds	r7, #8
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	460b      	mov	r3, r1
 80085f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80085fa:	78fa      	ldrb	r2, [r7, #3]
 80085fc:	4611      	mov	r1, r2
 80085fe:	4618      	mov	r0, r3
 8008600:	f7fe fd5f 	bl	80070c2 <USBD_LL_IsoOUTIncomplete>
}
 8008604:	bf00      	nop
 8008606:	3708      	adds	r7, #8
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	460b      	mov	r3, r1
 8008616:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800861e:	78fa      	ldrb	r2, [r7, #3]
 8008620:	4611      	mov	r1, r2
 8008622:	4618      	mov	r0, r3
 8008624:	f7fe fd1b 	bl	800705e <USBD_LL_IsoINIncomplete>
}
 8008628:	bf00      	nop
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800863e:	4618      	mov	r0, r3
 8008640:	f7fe fd71 	bl	8007126 <USBD_LL_DevConnected>
}
 8008644:	bf00      	nop
 8008646:	3708      	adds	r7, #8
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800865a:	4618      	mov	r0, r3
 800865c:	f7fe fd6e 	bl	800713c <USBD_LL_DevDisconnected>
}
 8008660:	bf00      	nop
 8008662:	3708      	adds	r7, #8
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d13c      	bne.n	80086f2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008678:	4a20      	ldr	r2, [pc, #128]	@ (80086fc <USBD_LL_Init+0x94>)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a1e      	ldr	r2, [pc, #120]	@ (80086fc <USBD_LL_Init+0x94>)
 8008684:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008688:	4b1c      	ldr	r3, [pc, #112]	@ (80086fc <USBD_LL_Init+0x94>)
 800868a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800868e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008690:	4b1a      	ldr	r3, [pc, #104]	@ (80086fc <USBD_LL_Init+0x94>)
 8008692:	2204      	movs	r2, #4
 8008694:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008696:	4b19      	ldr	r3, [pc, #100]	@ (80086fc <USBD_LL_Init+0x94>)
 8008698:	2202      	movs	r2, #2
 800869a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800869c:	4b17      	ldr	r3, [pc, #92]	@ (80086fc <USBD_LL_Init+0x94>)
 800869e:	2200      	movs	r2, #0
 80086a0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80086a2:	4b16      	ldr	r3, [pc, #88]	@ (80086fc <USBD_LL_Init+0x94>)
 80086a4:	2202      	movs	r2, #2
 80086a6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80086a8:	4b14      	ldr	r3, [pc, #80]	@ (80086fc <USBD_LL_Init+0x94>)
 80086aa:	2200      	movs	r2, #0
 80086ac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80086ae:	4b13      	ldr	r3, [pc, #76]	@ (80086fc <USBD_LL_Init+0x94>)
 80086b0:	2200      	movs	r2, #0
 80086b2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80086b4:	4b11      	ldr	r3, [pc, #68]	@ (80086fc <USBD_LL_Init+0x94>)
 80086b6:	2200      	movs	r2, #0
 80086b8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80086ba:	4b10      	ldr	r3, [pc, #64]	@ (80086fc <USBD_LL_Init+0x94>)
 80086bc:	2200      	movs	r2, #0
 80086be:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80086c0:	4b0e      	ldr	r3, [pc, #56]	@ (80086fc <USBD_LL_Init+0x94>)
 80086c2:	2200      	movs	r2, #0
 80086c4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80086c6:	480d      	ldr	r0, [pc, #52]	@ (80086fc <USBD_LL_Init+0x94>)
 80086c8:	f7f9 fbc5 	bl	8001e56 <HAL_PCD_Init>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d001      	beq.n	80086d6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80086d2:	f7f8 fd45 	bl	8001160 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80086d6:	2180      	movs	r1, #128	@ 0x80
 80086d8:	4808      	ldr	r0, [pc, #32]	@ (80086fc <USBD_LL_Init+0x94>)
 80086da:	f7fa fdf2 	bl	80032c2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80086de:	2240      	movs	r2, #64	@ 0x40
 80086e0:	2100      	movs	r1, #0
 80086e2:	4806      	ldr	r0, [pc, #24]	@ (80086fc <USBD_LL_Init+0x94>)
 80086e4:	f7fa fda6 	bl	8003234 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80086e8:	2280      	movs	r2, #128	@ 0x80
 80086ea:	2101      	movs	r1, #1
 80086ec:	4803      	ldr	r0, [pc, #12]	@ (80086fc <USBD_LL_Init+0x94>)
 80086ee:	f7fa fda1 	bl	8003234 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3708      	adds	r7, #8
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	20001894 	.word	0x20001894

08008700 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008708:	2300      	movs	r3, #0
 800870a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800870c:	2300      	movs	r3, #0
 800870e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008716:	4618      	mov	r0, r3
 8008718:	f7f9 fcac 	bl	8002074 <HAL_PCD_Start>
 800871c:	4603      	mov	r3, r0
 800871e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008720:	7bfb      	ldrb	r3, [r7, #15]
 8008722:	4618      	mov	r0, r3
 8008724:	f000 f942 	bl	80089ac <USBD_Get_USB_Status>
 8008728:	4603      	mov	r3, r0
 800872a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800872c:	7bbb      	ldrb	r3, [r7, #14]
}
 800872e:	4618      	mov	r0, r3
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b084      	sub	sp, #16
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
 800873e:	4608      	mov	r0, r1
 8008740:	4611      	mov	r1, r2
 8008742:	461a      	mov	r2, r3
 8008744:	4603      	mov	r3, r0
 8008746:	70fb      	strb	r3, [r7, #3]
 8008748:	460b      	mov	r3, r1
 800874a:	70bb      	strb	r3, [r7, #2]
 800874c:	4613      	mov	r3, r2
 800874e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008750:	2300      	movs	r3, #0
 8008752:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008754:	2300      	movs	r3, #0
 8008756:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800875e:	78bb      	ldrb	r3, [r7, #2]
 8008760:	883a      	ldrh	r2, [r7, #0]
 8008762:	78f9      	ldrb	r1, [r7, #3]
 8008764:	f7fa f980 	bl	8002a68 <HAL_PCD_EP_Open>
 8008768:	4603      	mov	r3, r0
 800876a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800876c:	7bfb      	ldrb	r3, [r7, #15]
 800876e:	4618      	mov	r0, r3
 8008770:	f000 f91c 	bl	80089ac <USBD_Get_USB_Status>
 8008774:	4603      	mov	r3, r0
 8008776:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008778:	7bbb      	ldrb	r3, [r7, #14]
}
 800877a:	4618      	mov	r0, r3
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008782:	b580      	push	{r7, lr}
 8008784:	b084      	sub	sp, #16
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
 800878a:	460b      	mov	r3, r1
 800878c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800878e:	2300      	movs	r3, #0
 8008790:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008792:	2300      	movs	r3, #0
 8008794:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800879c:	78fa      	ldrb	r2, [r7, #3]
 800879e:	4611      	mov	r1, r2
 80087a0:	4618      	mov	r0, r3
 80087a2:	f7fa f9cb 	bl	8002b3c <HAL_PCD_EP_Close>
 80087a6:	4603      	mov	r3, r0
 80087a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087aa:	7bfb      	ldrb	r3, [r7, #15]
 80087ac:	4618      	mov	r0, r3
 80087ae:	f000 f8fd 	bl	80089ac <USBD_Get_USB_Status>
 80087b2:	4603      	mov	r3, r0
 80087b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3710      	adds	r7, #16
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	460b      	mov	r3, r1
 80087ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087cc:	2300      	movs	r3, #0
 80087ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087d0:	2300      	movs	r3, #0
 80087d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80087da:	78fa      	ldrb	r2, [r7, #3]
 80087dc:	4611      	mov	r1, r2
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fa fa83 	bl	8002cea <HAL_PCD_EP_SetStall>
 80087e4:	4603      	mov	r3, r0
 80087e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087e8:	7bfb      	ldrb	r3, [r7, #15]
 80087ea:	4618      	mov	r0, r3
 80087ec:	f000 f8de 	bl	80089ac <USBD_Get_USB_Status>
 80087f0:	4603      	mov	r3, r0
 80087f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b084      	sub	sp, #16
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
 8008806:	460b      	mov	r3, r1
 8008808:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800880a:	2300      	movs	r3, #0
 800880c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800880e:	2300      	movs	r3, #0
 8008810:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008818:	78fa      	ldrb	r2, [r7, #3]
 800881a:	4611      	mov	r1, r2
 800881c:	4618      	mov	r0, r3
 800881e:	f7fa fac7 	bl	8002db0 <HAL_PCD_EP_ClrStall>
 8008822:	4603      	mov	r3, r0
 8008824:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008826:	7bfb      	ldrb	r3, [r7, #15]
 8008828:	4618      	mov	r0, r3
 800882a:	f000 f8bf 	bl	80089ac <USBD_Get_USB_Status>
 800882e:	4603      	mov	r3, r0
 8008830:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008832:	7bbb      	ldrb	r3, [r7, #14]
}
 8008834:	4618      	mov	r0, r3
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800883c:	b480      	push	{r7}
 800883e:	b085      	sub	sp, #20
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	460b      	mov	r3, r1
 8008846:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800884e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008850:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008854:	2b00      	cmp	r3, #0
 8008856:	da0b      	bge.n	8008870 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008858:	78fb      	ldrb	r3, [r7, #3]
 800885a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800885e:	68f9      	ldr	r1, [r7, #12]
 8008860:	4613      	mov	r3, r2
 8008862:	00db      	lsls	r3, r3, #3
 8008864:	4413      	add	r3, r2
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	440b      	add	r3, r1
 800886a:	3316      	adds	r3, #22
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	e00b      	b.n	8008888 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008870:	78fb      	ldrb	r3, [r7, #3]
 8008872:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008876:	68f9      	ldr	r1, [r7, #12]
 8008878:	4613      	mov	r3, r2
 800887a:	00db      	lsls	r3, r3, #3
 800887c:	4413      	add	r3, r2
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	440b      	add	r3, r1
 8008882:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008886:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008888:	4618      	mov	r0, r3
 800888a:	3714      	adds	r7, #20
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	460b      	mov	r3, r1
 800889e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088a0:	2300      	movs	r3, #0
 80088a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088a4:	2300      	movs	r3, #0
 80088a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80088ae:	78fa      	ldrb	r2, [r7, #3]
 80088b0:	4611      	mov	r1, r2
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7fa f8b4 	bl	8002a20 <HAL_PCD_SetAddress>
 80088b8:	4603      	mov	r3, r0
 80088ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
 80088be:	4618      	mov	r0, r3
 80088c0:	f000 f874 	bl	80089ac <USBD_Get_USB_Status>
 80088c4:	4603      	mov	r3, r0
 80088c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b086      	sub	sp, #24
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	60f8      	str	r0, [r7, #12]
 80088da:	607a      	str	r2, [r7, #4]
 80088dc:	603b      	str	r3, [r7, #0]
 80088de:	460b      	mov	r3, r1
 80088e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088e2:	2300      	movs	r3, #0
 80088e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088e6:	2300      	movs	r3, #0
 80088e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80088f0:	7af9      	ldrb	r1, [r7, #11]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	f7fa f9be 	bl	8002c76 <HAL_PCD_EP_Transmit>
 80088fa:	4603      	mov	r3, r0
 80088fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088fe:	7dfb      	ldrb	r3, [r7, #23]
 8008900:	4618      	mov	r0, r3
 8008902:	f000 f853 	bl	80089ac <USBD_Get_USB_Status>
 8008906:	4603      	mov	r3, r0
 8008908:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800890a:	7dbb      	ldrb	r3, [r7, #22]
}
 800890c:	4618      	mov	r0, r3
 800890e:	3718      	adds	r7, #24
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b086      	sub	sp, #24
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	607a      	str	r2, [r7, #4]
 800891e:	603b      	str	r3, [r7, #0]
 8008920:	460b      	mov	r3, r1
 8008922:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008924:	2300      	movs	r3, #0
 8008926:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008928:	2300      	movs	r3, #0
 800892a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008932:	7af9      	ldrb	r1, [r7, #11]
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	f7fa f94a 	bl	8002bd0 <HAL_PCD_EP_Receive>
 800893c:	4603      	mov	r3, r0
 800893e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008940:	7dfb      	ldrb	r3, [r7, #23]
 8008942:	4618      	mov	r0, r3
 8008944:	f000 f832 	bl	80089ac <USBD_Get_USB_Status>
 8008948:	4603      	mov	r3, r0
 800894a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800894c:	7dbb      	ldrb	r3, [r7, #22]
}
 800894e:	4618      	mov	r0, r3
 8008950:	3718      	adds	r7, #24
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b082      	sub	sp, #8
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
 800895e:	460b      	mov	r3, r1
 8008960:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008968:	78fa      	ldrb	r2, [r7, #3]
 800896a:	4611      	mov	r1, r2
 800896c:	4618      	mov	r0, r3
 800896e:	f7fa f96a 	bl	8002c46 <HAL_PCD_EP_GetRxCount>
 8008972:	4603      	mov	r3, r0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3708      	adds	r7, #8
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008984:	4b03      	ldr	r3, [pc, #12]	@ (8008994 <USBD_static_malloc+0x18>)
}
 8008986:	4618      	mov	r0, r3
 8008988:	370c      	adds	r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	20001d78 	.word	0x20001d78

08008998 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]

}
 80089a0:	bf00      	nop
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	4603      	mov	r3, r0
 80089b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089b6:	2300      	movs	r3, #0
 80089b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80089ba:	79fb      	ldrb	r3, [r7, #7]
 80089bc:	2b03      	cmp	r3, #3
 80089be:	d817      	bhi.n	80089f0 <USBD_Get_USB_Status+0x44>
 80089c0:	a201      	add	r2, pc, #4	@ (adr r2, 80089c8 <USBD_Get_USB_Status+0x1c>)
 80089c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c6:	bf00      	nop
 80089c8:	080089d9 	.word	0x080089d9
 80089cc:	080089df 	.word	0x080089df
 80089d0:	080089e5 	.word	0x080089e5
 80089d4:	080089eb 	.word	0x080089eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80089d8:	2300      	movs	r3, #0
 80089da:	73fb      	strb	r3, [r7, #15]
    break;
 80089dc:	e00b      	b.n	80089f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80089de:	2303      	movs	r3, #3
 80089e0:	73fb      	strb	r3, [r7, #15]
    break;
 80089e2:	e008      	b.n	80089f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80089e4:	2301      	movs	r3, #1
 80089e6:	73fb      	strb	r3, [r7, #15]
    break;
 80089e8:	e005      	b.n	80089f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80089ea:	2303      	movs	r3, #3
 80089ec:	73fb      	strb	r3, [r7, #15]
    break;
 80089ee:	e002      	b.n	80089f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80089f0:	2303      	movs	r3, #3
 80089f2:	73fb      	strb	r3, [r7, #15]
    break;
 80089f4:	bf00      	nop
  }
  return usb_status;
 80089f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3714      	adds	r7, #20
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr

08008a04 <siprintf>:
 8008a04:	b40e      	push	{r1, r2, r3}
 8008a06:	b500      	push	{lr}
 8008a08:	b09c      	sub	sp, #112	@ 0x70
 8008a0a:	ab1d      	add	r3, sp, #116	@ 0x74
 8008a0c:	9002      	str	r0, [sp, #8]
 8008a0e:	9006      	str	r0, [sp, #24]
 8008a10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008a14:	4809      	ldr	r0, [pc, #36]	@ (8008a3c <siprintf+0x38>)
 8008a16:	9107      	str	r1, [sp, #28]
 8008a18:	9104      	str	r1, [sp, #16]
 8008a1a:	4909      	ldr	r1, [pc, #36]	@ (8008a40 <siprintf+0x3c>)
 8008a1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a20:	9105      	str	r1, [sp, #20]
 8008a22:	6800      	ldr	r0, [r0, #0]
 8008a24:	9301      	str	r3, [sp, #4]
 8008a26:	a902      	add	r1, sp, #8
 8008a28:	f000 f9a4 	bl	8008d74 <_svfiprintf_r>
 8008a2c:	9b02      	ldr	r3, [sp, #8]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	701a      	strb	r2, [r3, #0]
 8008a32:	b01c      	add	sp, #112	@ 0x70
 8008a34:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a38:	b003      	add	sp, #12
 8008a3a:	4770      	bx	lr
 8008a3c:	20000110 	.word	0x20000110
 8008a40:	ffff0208 	.word	0xffff0208

08008a44 <memset>:
 8008a44:	4402      	add	r2, r0
 8008a46:	4603      	mov	r3, r0
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d100      	bne.n	8008a4e <memset+0xa>
 8008a4c:	4770      	bx	lr
 8008a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a52:	e7f9      	b.n	8008a48 <memset+0x4>

08008a54 <strcat>:
 8008a54:	b510      	push	{r4, lr}
 8008a56:	4602      	mov	r2, r0
 8008a58:	7814      	ldrb	r4, [r2, #0]
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	3201      	adds	r2, #1
 8008a5e:	2c00      	cmp	r4, #0
 8008a60:	d1fa      	bne.n	8008a58 <strcat+0x4>
 8008a62:	3b01      	subs	r3, #1
 8008a64:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a68:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a6c:	2a00      	cmp	r2, #0
 8008a6e:	d1f9      	bne.n	8008a64 <strcat+0x10>
 8008a70:	bd10      	pop	{r4, pc}
	...

08008a74 <__errno>:
 8008a74:	4b01      	ldr	r3, [pc, #4]	@ (8008a7c <__errno+0x8>)
 8008a76:	6818      	ldr	r0, [r3, #0]
 8008a78:	4770      	bx	lr
 8008a7a:	bf00      	nop
 8008a7c:	20000110 	.word	0x20000110

08008a80 <__libc_init_array>:
 8008a80:	b570      	push	{r4, r5, r6, lr}
 8008a82:	4d0d      	ldr	r5, [pc, #52]	@ (8008ab8 <__libc_init_array+0x38>)
 8008a84:	4c0d      	ldr	r4, [pc, #52]	@ (8008abc <__libc_init_array+0x3c>)
 8008a86:	1b64      	subs	r4, r4, r5
 8008a88:	10a4      	asrs	r4, r4, #2
 8008a8a:	2600      	movs	r6, #0
 8008a8c:	42a6      	cmp	r6, r4
 8008a8e:	d109      	bne.n	8008aa4 <__libc_init_array+0x24>
 8008a90:	4d0b      	ldr	r5, [pc, #44]	@ (8008ac0 <__libc_init_array+0x40>)
 8008a92:	4c0c      	ldr	r4, [pc, #48]	@ (8008ac4 <__libc_init_array+0x44>)
 8008a94:	f000 fc66 	bl	8009364 <_init>
 8008a98:	1b64      	subs	r4, r4, r5
 8008a9a:	10a4      	asrs	r4, r4, #2
 8008a9c:	2600      	movs	r6, #0
 8008a9e:	42a6      	cmp	r6, r4
 8008aa0:	d105      	bne.n	8008aae <__libc_init_array+0x2e>
 8008aa2:	bd70      	pop	{r4, r5, r6, pc}
 8008aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aa8:	4798      	blx	r3
 8008aaa:	3601      	adds	r6, #1
 8008aac:	e7ee      	b.n	8008a8c <__libc_init_array+0xc>
 8008aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ab2:	4798      	blx	r3
 8008ab4:	3601      	adds	r6, #1
 8008ab6:	e7f2      	b.n	8008a9e <__libc_init_array+0x1e>
 8008ab8:	08009b3c 	.word	0x08009b3c
 8008abc:	08009b3c 	.word	0x08009b3c
 8008ac0:	08009b3c 	.word	0x08009b3c
 8008ac4:	08009b40 	.word	0x08009b40

08008ac8 <__retarget_lock_acquire_recursive>:
 8008ac8:	4770      	bx	lr

08008aca <__retarget_lock_release_recursive>:
 8008aca:	4770      	bx	lr

08008acc <_free_r>:
 8008acc:	b538      	push	{r3, r4, r5, lr}
 8008ace:	4605      	mov	r5, r0
 8008ad0:	2900      	cmp	r1, #0
 8008ad2:	d041      	beq.n	8008b58 <_free_r+0x8c>
 8008ad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ad8:	1f0c      	subs	r4, r1, #4
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	bfb8      	it	lt
 8008ade:	18e4      	addlt	r4, r4, r3
 8008ae0:	f000 f8e0 	bl	8008ca4 <__malloc_lock>
 8008ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8008b5c <_free_r+0x90>)
 8008ae6:	6813      	ldr	r3, [r2, #0]
 8008ae8:	b933      	cbnz	r3, 8008af8 <_free_r+0x2c>
 8008aea:	6063      	str	r3, [r4, #4]
 8008aec:	6014      	str	r4, [r2, #0]
 8008aee:	4628      	mov	r0, r5
 8008af0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008af4:	f000 b8dc 	b.w	8008cb0 <__malloc_unlock>
 8008af8:	42a3      	cmp	r3, r4
 8008afa:	d908      	bls.n	8008b0e <_free_r+0x42>
 8008afc:	6820      	ldr	r0, [r4, #0]
 8008afe:	1821      	adds	r1, r4, r0
 8008b00:	428b      	cmp	r3, r1
 8008b02:	bf01      	itttt	eq
 8008b04:	6819      	ldreq	r1, [r3, #0]
 8008b06:	685b      	ldreq	r3, [r3, #4]
 8008b08:	1809      	addeq	r1, r1, r0
 8008b0a:	6021      	streq	r1, [r4, #0]
 8008b0c:	e7ed      	b.n	8008aea <_free_r+0x1e>
 8008b0e:	461a      	mov	r2, r3
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	b10b      	cbz	r3, 8008b18 <_free_r+0x4c>
 8008b14:	42a3      	cmp	r3, r4
 8008b16:	d9fa      	bls.n	8008b0e <_free_r+0x42>
 8008b18:	6811      	ldr	r1, [r2, #0]
 8008b1a:	1850      	adds	r0, r2, r1
 8008b1c:	42a0      	cmp	r0, r4
 8008b1e:	d10b      	bne.n	8008b38 <_free_r+0x6c>
 8008b20:	6820      	ldr	r0, [r4, #0]
 8008b22:	4401      	add	r1, r0
 8008b24:	1850      	adds	r0, r2, r1
 8008b26:	4283      	cmp	r3, r0
 8008b28:	6011      	str	r1, [r2, #0]
 8008b2a:	d1e0      	bne.n	8008aee <_free_r+0x22>
 8008b2c:	6818      	ldr	r0, [r3, #0]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	6053      	str	r3, [r2, #4]
 8008b32:	4408      	add	r0, r1
 8008b34:	6010      	str	r0, [r2, #0]
 8008b36:	e7da      	b.n	8008aee <_free_r+0x22>
 8008b38:	d902      	bls.n	8008b40 <_free_r+0x74>
 8008b3a:	230c      	movs	r3, #12
 8008b3c:	602b      	str	r3, [r5, #0]
 8008b3e:	e7d6      	b.n	8008aee <_free_r+0x22>
 8008b40:	6820      	ldr	r0, [r4, #0]
 8008b42:	1821      	adds	r1, r4, r0
 8008b44:	428b      	cmp	r3, r1
 8008b46:	bf04      	itt	eq
 8008b48:	6819      	ldreq	r1, [r3, #0]
 8008b4a:	685b      	ldreq	r3, [r3, #4]
 8008b4c:	6063      	str	r3, [r4, #4]
 8008b4e:	bf04      	itt	eq
 8008b50:	1809      	addeq	r1, r1, r0
 8008b52:	6021      	streq	r1, [r4, #0]
 8008b54:	6054      	str	r4, [r2, #4]
 8008b56:	e7ca      	b.n	8008aee <_free_r+0x22>
 8008b58:	bd38      	pop	{r3, r4, r5, pc}
 8008b5a:	bf00      	nop
 8008b5c:	200020dc 	.word	0x200020dc

08008b60 <sbrk_aligned>:
 8008b60:	b570      	push	{r4, r5, r6, lr}
 8008b62:	4e0f      	ldr	r6, [pc, #60]	@ (8008ba0 <sbrk_aligned+0x40>)
 8008b64:	460c      	mov	r4, r1
 8008b66:	6831      	ldr	r1, [r6, #0]
 8008b68:	4605      	mov	r5, r0
 8008b6a:	b911      	cbnz	r1, 8008b72 <sbrk_aligned+0x12>
 8008b6c:	f000 fba6 	bl	80092bc <_sbrk_r>
 8008b70:	6030      	str	r0, [r6, #0]
 8008b72:	4621      	mov	r1, r4
 8008b74:	4628      	mov	r0, r5
 8008b76:	f000 fba1 	bl	80092bc <_sbrk_r>
 8008b7a:	1c43      	adds	r3, r0, #1
 8008b7c:	d103      	bne.n	8008b86 <sbrk_aligned+0x26>
 8008b7e:	f04f 34ff 	mov.w	r4, #4294967295
 8008b82:	4620      	mov	r0, r4
 8008b84:	bd70      	pop	{r4, r5, r6, pc}
 8008b86:	1cc4      	adds	r4, r0, #3
 8008b88:	f024 0403 	bic.w	r4, r4, #3
 8008b8c:	42a0      	cmp	r0, r4
 8008b8e:	d0f8      	beq.n	8008b82 <sbrk_aligned+0x22>
 8008b90:	1a21      	subs	r1, r4, r0
 8008b92:	4628      	mov	r0, r5
 8008b94:	f000 fb92 	bl	80092bc <_sbrk_r>
 8008b98:	3001      	adds	r0, #1
 8008b9a:	d1f2      	bne.n	8008b82 <sbrk_aligned+0x22>
 8008b9c:	e7ef      	b.n	8008b7e <sbrk_aligned+0x1e>
 8008b9e:	bf00      	nop
 8008ba0:	200020d8 	.word	0x200020d8

08008ba4 <_malloc_r>:
 8008ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ba8:	1ccd      	adds	r5, r1, #3
 8008baa:	f025 0503 	bic.w	r5, r5, #3
 8008bae:	3508      	adds	r5, #8
 8008bb0:	2d0c      	cmp	r5, #12
 8008bb2:	bf38      	it	cc
 8008bb4:	250c      	movcc	r5, #12
 8008bb6:	2d00      	cmp	r5, #0
 8008bb8:	4606      	mov	r6, r0
 8008bba:	db01      	blt.n	8008bc0 <_malloc_r+0x1c>
 8008bbc:	42a9      	cmp	r1, r5
 8008bbe:	d904      	bls.n	8008bca <_malloc_r+0x26>
 8008bc0:	230c      	movs	r3, #12
 8008bc2:	6033      	str	r3, [r6, #0]
 8008bc4:	2000      	movs	r0, #0
 8008bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ca0 <_malloc_r+0xfc>
 8008bce:	f000 f869 	bl	8008ca4 <__malloc_lock>
 8008bd2:	f8d8 3000 	ldr.w	r3, [r8]
 8008bd6:	461c      	mov	r4, r3
 8008bd8:	bb44      	cbnz	r4, 8008c2c <_malloc_r+0x88>
 8008bda:	4629      	mov	r1, r5
 8008bdc:	4630      	mov	r0, r6
 8008bde:	f7ff ffbf 	bl	8008b60 <sbrk_aligned>
 8008be2:	1c43      	adds	r3, r0, #1
 8008be4:	4604      	mov	r4, r0
 8008be6:	d158      	bne.n	8008c9a <_malloc_r+0xf6>
 8008be8:	f8d8 4000 	ldr.w	r4, [r8]
 8008bec:	4627      	mov	r7, r4
 8008bee:	2f00      	cmp	r7, #0
 8008bf0:	d143      	bne.n	8008c7a <_malloc_r+0xd6>
 8008bf2:	2c00      	cmp	r4, #0
 8008bf4:	d04b      	beq.n	8008c8e <_malloc_r+0xea>
 8008bf6:	6823      	ldr	r3, [r4, #0]
 8008bf8:	4639      	mov	r1, r7
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	eb04 0903 	add.w	r9, r4, r3
 8008c00:	f000 fb5c 	bl	80092bc <_sbrk_r>
 8008c04:	4581      	cmp	r9, r0
 8008c06:	d142      	bne.n	8008c8e <_malloc_r+0xea>
 8008c08:	6821      	ldr	r1, [r4, #0]
 8008c0a:	1a6d      	subs	r5, r5, r1
 8008c0c:	4629      	mov	r1, r5
 8008c0e:	4630      	mov	r0, r6
 8008c10:	f7ff ffa6 	bl	8008b60 <sbrk_aligned>
 8008c14:	3001      	adds	r0, #1
 8008c16:	d03a      	beq.n	8008c8e <_malloc_r+0xea>
 8008c18:	6823      	ldr	r3, [r4, #0]
 8008c1a:	442b      	add	r3, r5
 8008c1c:	6023      	str	r3, [r4, #0]
 8008c1e:	f8d8 3000 	ldr.w	r3, [r8]
 8008c22:	685a      	ldr	r2, [r3, #4]
 8008c24:	bb62      	cbnz	r2, 8008c80 <_malloc_r+0xdc>
 8008c26:	f8c8 7000 	str.w	r7, [r8]
 8008c2a:	e00f      	b.n	8008c4c <_malloc_r+0xa8>
 8008c2c:	6822      	ldr	r2, [r4, #0]
 8008c2e:	1b52      	subs	r2, r2, r5
 8008c30:	d420      	bmi.n	8008c74 <_malloc_r+0xd0>
 8008c32:	2a0b      	cmp	r2, #11
 8008c34:	d917      	bls.n	8008c66 <_malloc_r+0xc2>
 8008c36:	1961      	adds	r1, r4, r5
 8008c38:	42a3      	cmp	r3, r4
 8008c3a:	6025      	str	r5, [r4, #0]
 8008c3c:	bf18      	it	ne
 8008c3e:	6059      	strne	r1, [r3, #4]
 8008c40:	6863      	ldr	r3, [r4, #4]
 8008c42:	bf08      	it	eq
 8008c44:	f8c8 1000 	streq.w	r1, [r8]
 8008c48:	5162      	str	r2, [r4, r5]
 8008c4a:	604b      	str	r3, [r1, #4]
 8008c4c:	4630      	mov	r0, r6
 8008c4e:	f000 f82f 	bl	8008cb0 <__malloc_unlock>
 8008c52:	f104 000b 	add.w	r0, r4, #11
 8008c56:	1d23      	adds	r3, r4, #4
 8008c58:	f020 0007 	bic.w	r0, r0, #7
 8008c5c:	1ac2      	subs	r2, r0, r3
 8008c5e:	bf1c      	itt	ne
 8008c60:	1a1b      	subne	r3, r3, r0
 8008c62:	50a3      	strne	r3, [r4, r2]
 8008c64:	e7af      	b.n	8008bc6 <_malloc_r+0x22>
 8008c66:	6862      	ldr	r2, [r4, #4]
 8008c68:	42a3      	cmp	r3, r4
 8008c6a:	bf0c      	ite	eq
 8008c6c:	f8c8 2000 	streq.w	r2, [r8]
 8008c70:	605a      	strne	r2, [r3, #4]
 8008c72:	e7eb      	b.n	8008c4c <_malloc_r+0xa8>
 8008c74:	4623      	mov	r3, r4
 8008c76:	6864      	ldr	r4, [r4, #4]
 8008c78:	e7ae      	b.n	8008bd8 <_malloc_r+0x34>
 8008c7a:	463c      	mov	r4, r7
 8008c7c:	687f      	ldr	r7, [r7, #4]
 8008c7e:	e7b6      	b.n	8008bee <_malloc_r+0x4a>
 8008c80:	461a      	mov	r2, r3
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	42a3      	cmp	r3, r4
 8008c86:	d1fb      	bne.n	8008c80 <_malloc_r+0xdc>
 8008c88:	2300      	movs	r3, #0
 8008c8a:	6053      	str	r3, [r2, #4]
 8008c8c:	e7de      	b.n	8008c4c <_malloc_r+0xa8>
 8008c8e:	230c      	movs	r3, #12
 8008c90:	6033      	str	r3, [r6, #0]
 8008c92:	4630      	mov	r0, r6
 8008c94:	f000 f80c 	bl	8008cb0 <__malloc_unlock>
 8008c98:	e794      	b.n	8008bc4 <_malloc_r+0x20>
 8008c9a:	6005      	str	r5, [r0, #0]
 8008c9c:	e7d6      	b.n	8008c4c <_malloc_r+0xa8>
 8008c9e:	bf00      	nop
 8008ca0:	200020dc 	.word	0x200020dc

08008ca4 <__malloc_lock>:
 8008ca4:	4801      	ldr	r0, [pc, #4]	@ (8008cac <__malloc_lock+0x8>)
 8008ca6:	f7ff bf0f 	b.w	8008ac8 <__retarget_lock_acquire_recursive>
 8008caa:	bf00      	nop
 8008cac:	200020d4 	.word	0x200020d4

08008cb0 <__malloc_unlock>:
 8008cb0:	4801      	ldr	r0, [pc, #4]	@ (8008cb8 <__malloc_unlock+0x8>)
 8008cb2:	f7ff bf0a 	b.w	8008aca <__retarget_lock_release_recursive>
 8008cb6:	bf00      	nop
 8008cb8:	200020d4 	.word	0x200020d4

08008cbc <__ssputs_r>:
 8008cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc0:	688e      	ldr	r6, [r1, #8]
 8008cc2:	461f      	mov	r7, r3
 8008cc4:	42be      	cmp	r6, r7
 8008cc6:	680b      	ldr	r3, [r1, #0]
 8008cc8:	4682      	mov	sl, r0
 8008cca:	460c      	mov	r4, r1
 8008ccc:	4690      	mov	r8, r2
 8008cce:	d82d      	bhi.n	8008d2c <__ssputs_r+0x70>
 8008cd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008cd4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008cd8:	d026      	beq.n	8008d28 <__ssputs_r+0x6c>
 8008cda:	6965      	ldr	r5, [r4, #20]
 8008cdc:	6909      	ldr	r1, [r1, #16]
 8008cde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ce2:	eba3 0901 	sub.w	r9, r3, r1
 8008ce6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cea:	1c7b      	adds	r3, r7, #1
 8008cec:	444b      	add	r3, r9
 8008cee:	106d      	asrs	r5, r5, #1
 8008cf0:	429d      	cmp	r5, r3
 8008cf2:	bf38      	it	cc
 8008cf4:	461d      	movcc	r5, r3
 8008cf6:	0553      	lsls	r3, r2, #21
 8008cf8:	d527      	bpl.n	8008d4a <__ssputs_r+0x8e>
 8008cfa:	4629      	mov	r1, r5
 8008cfc:	f7ff ff52 	bl	8008ba4 <_malloc_r>
 8008d00:	4606      	mov	r6, r0
 8008d02:	b360      	cbz	r0, 8008d5e <__ssputs_r+0xa2>
 8008d04:	6921      	ldr	r1, [r4, #16]
 8008d06:	464a      	mov	r2, r9
 8008d08:	f000 fae8 	bl	80092dc <memcpy>
 8008d0c:	89a3      	ldrh	r3, [r4, #12]
 8008d0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008d12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d16:	81a3      	strh	r3, [r4, #12]
 8008d18:	6126      	str	r6, [r4, #16]
 8008d1a:	6165      	str	r5, [r4, #20]
 8008d1c:	444e      	add	r6, r9
 8008d1e:	eba5 0509 	sub.w	r5, r5, r9
 8008d22:	6026      	str	r6, [r4, #0]
 8008d24:	60a5      	str	r5, [r4, #8]
 8008d26:	463e      	mov	r6, r7
 8008d28:	42be      	cmp	r6, r7
 8008d2a:	d900      	bls.n	8008d2e <__ssputs_r+0x72>
 8008d2c:	463e      	mov	r6, r7
 8008d2e:	6820      	ldr	r0, [r4, #0]
 8008d30:	4632      	mov	r2, r6
 8008d32:	4641      	mov	r1, r8
 8008d34:	f000 faa8 	bl	8009288 <memmove>
 8008d38:	68a3      	ldr	r3, [r4, #8]
 8008d3a:	1b9b      	subs	r3, r3, r6
 8008d3c:	60a3      	str	r3, [r4, #8]
 8008d3e:	6823      	ldr	r3, [r4, #0]
 8008d40:	4433      	add	r3, r6
 8008d42:	6023      	str	r3, [r4, #0]
 8008d44:	2000      	movs	r0, #0
 8008d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d4a:	462a      	mov	r2, r5
 8008d4c:	f000 fad4 	bl	80092f8 <_realloc_r>
 8008d50:	4606      	mov	r6, r0
 8008d52:	2800      	cmp	r0, #0
 8008d54:	d1e0      	bne.n	8008d18 <__ssputs_r+0x5c>
 8008d56:	6921      	ldr	r1, [r4, #16]
 8008d58:	4650      	mov	r0, sl
 8008d5a:	f7ff feb7 	bl	8008acc <_free_r>
 8008d5e:	230c      	movs	r3, #12
 8008d60:	f8ca 3000 	str.w	r3, [sl]
 8008d64:	89a3      	ldrh	r3, [r4, #12]
 8008d66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d6a:	81a3      	strh	r3, [r4, #12]
 8008d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d70:	e7e9      	b.n	8008d46 <__ssputs_r+0x8a>
	...

08008d74 <_svfiprintf_r>:
 8008d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d78:	4698      	mov	r8, r3
 8008d7a:	898b      	ldrh	r3, [r1, #12]
 8008d7c:	061b      	lsls	r3, r3, #24
 8008d7e:	b09d      	sub	sp, #116	@ 0x74
 8008d80:	4607      	mov	r7, r0
 8008d82:	460d      	mov	r5, r1
 8008d84:	4614      	mov	r4, r2
 8008d86:	d510      	bpl.n	8008daa <_svfiprintf_r+0x36>
 8008d88:	690b      	ldr	r3, [r1, #16]
 8008d8a:	b973      	cbnz	r3, 8008daa <_svfiprintf_r+0x36>
 8008d8c:	2140      	movs	r1, #64	@ 0x40
 8008d8e:	f7ff ff09 	bl	8008ba4 <_malloc_r>
 8008d92:	6028      	str	r0, [r5, #0]
 8008d94:	6128      	str	r0, [r5, #16]
 8008d96:	b930      	cbnz	r0, 8008da6 <_svfiprintf_r+0x32>
 8008d98:	230c      	movs	r3, #12
 8008d9a:	603b      	str	r3, [r7, #0]
 8008d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008da0:	b01d      	add	sp, #116	@ 0x74
 8008da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008da6:	2340      	movs	r3, #64	@ 0x40
 8008da8:	616b      	str	r3, [r5, #20]
 8008daa:	2300      	movs	r3, #0
 8008dac:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dae:	2320      	movs	r3, #32
 8008db0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008db4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008db8:	2330      	movs	r3, #48	@ 0x30
 8008dba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008f58 <_svfiprintf_r+0x1e4>
 8008dbe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008dc2:	f04f 0901 	mov.w	r9, #1
 8008dc6:	4623      	mov	r3, r4
 8008dc8:	469a      	mov	sl, r3
 8008dca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dce:	b10a      	cbz	r2, 8008dd4 <_svfiprintf_r+0x60>
 8008dd0:	2a25      	cmp	r2, #37	@ 0x25
 8008dd2:	d1f9      	bne.n	8008dc8 <_svfiprintf_r+0x54>
 8008dd4:	ebba 0b04 	subs.w	fp, sl, r4
 8008dd8:	d00b      	beq.n	8008df2 <_svfiprintf_r+0x7e>
 8008dda:	465b      	mov	r3, fp
 8008ddc:	4622      	mov	r2, r4
 8008dde:	4629      	mov	r1, r5
 8008de0:	4638      	mov	r0, r7
 8008de2:	f7ff ff6b 	bl	8008cbc <__ssputs_r>
 8008de6:	3001      	adds	r0, #1
 8008de8:	f000 80a7 	beq.w	8008f3a <_svfiprintf_r+0x1c6>
 8008dec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008dee:	445a      	add	r2, fp
 8008df0:	9209      	str	r2, [sp, #36]	@ 0x24
 8008df2:	f89a 3000 	ldrb.w	r3, [sl]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	f000 809f 	beq.w	8008f3a <_svfiprintf_r+0x1c6>
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8008e02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e06:	f10a 0a01 	add.w	sl, sl, #1
 8008e0a:	9304      	str	r3, [sp, #16]
 8008e0c:	9307      	str	r3, [sp, #28]
 8008e0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e12:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e14:	4654      	mov	r4, sl
 8008e16:	2205      	movs	r2, #5
 8008e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e1c:	484e      	ldr	r0, [pc, #312]	@ (8008f58 <_svfiprintf_r+0x1e4>)
 8008e1e:	f7f7 f9ef 	bl	8000200 <memchr>
 8008e22:	9a04      	ldr	r2, [sp, #16]
 8008e24:	b9d8      	cbnz	r0, 8008e5e <_svfiprintf_r+0xea>
 8008e26:	06d0      	lsls	r0, r2, #27
 8008e28:	bf44      	itt	mi
 8008e2a:	2320      	movmi	r3, #32
 8008e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e30:	0711      	lsls	r1, r2, #28
 8008e32:	bf44      	itt	mi
 8008e34:	232b      	movmi	r3, #43	@ 0x2b
 8008e36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e3a:	f89a 3000 	ldrb.w	r3, [sl]
 8008e3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e40:	d015      	beq.n	8008e6e <_svfiprintf_r+0xfa>
 8008e42:	9a07      	ldr	r2, [sp, #28]
 8008e44:	4654      	mov	r4, sl
 8008e46:	2000      	movs	r0, #0
 8008e48:	f04f 0c0a 	mov.w	ip, #10
 8008e4c:	4621      	mov	r1, r4
 8008e4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e52:	3b30      	subs	r3, #48	@ 0x30
 8008e54:	2b09      	cmp	r3, #9
 8008e56:	d94b      	bls.n	8008ef0 <_svfiprintf_r+0x17c>
 8008e58:	b1b0      	cbz	r0, 8008e88 <_svfiprintf_r+0x114>
 8008e5a:	9207      	str	r2, [sp, #28]
 8008e5c:	e014      	b.n	8008e88 <_svfiprintf_r+0x114>
 8008e5e:	eba0 0308 	sub.w	r3, r0, r8
 8008e62:	fa09 f303 	lsl.w	r3, r9, r3
 8008e66:	4313      	orrs	r3, r2
 8008e68:	9304      	str	r3, [sp, #16]
 8008e6a:	46a2      	mov	sl, r4
 8008e6c:	e7d2      	b.n	8008e14 <_svfiprintf_r+0xa0>
 8008e6e:	9b03      	ldr	r3, [sp, #12]
 8008e70:	1d19      	adds	r1, r3, #4
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	9103      	str	r1, [sp, #12]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	bfbb      	ittet	lt
 8008e7a:	425b      	neglt	r3, r3
 8008e7c:	f042 0202 	orrlt.w	r2, r2, #2
 8008e80:	9307      	strge	r3, [sp, #28]
 8008e82:	9307      	strlt	r3, [sp, #28]
 8008e84:	bfb8      	it	lt
 8008e86:	9204      	strlt	r2, [sp, #16]
 8008e88:	7823      	ldrb	r3, [r4, #0]
 8008e8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e8c:	d10a      	bne.n	8008ea4 <_svfiprintf_r+0x130>
 8008e8e:	7863      	ldrb	r3, [r4, #1]
 8008e90:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e92:	d132      	bne.n	8008efa <_svfiprintf_r+0x186>
 8008e94:	9b03      	ldr	r3, [sp, #12]
 8008e96:	1d1a      	adds	r2, r3, #4
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	9203      	str	r2, [sp, #12]
 8008e9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ea0:	3402      	adds	r4, #2
 8008ea2:	9305      	str	r3, [sp, #20]
 8008ea4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008f68 <_svfiprintf_r+0x1f4>
 8008ea8:	7821      	ldrb	r1, [r4, #0]
 8008eaa:	2203      	movs	r2, #3
 8008eac:	4650      	mov	r0, sl
 8008eae:	f7f7 f9a7 	bl	8000200 <memchr>
 8008eb2:	b138      	cbz	r0, 8008ec4 <_svfiprintf_r+0x150>
 8008eb4:	9b04      	ldr	r3, [sp, #16]
 8008eb6:	eba0 000a 	sub.w	r0, r0, sl
 8008eba:	2240      	movs	r2, #64	@ 0x40
 8008ebc:	4082      	lsls	r2, r0
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	3401      	adds	r4, #1
 8008ec2:	9304      	str	r3, [sp, #16]
 8008ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ec8:	4824      	ldr	r0, [pc, #144]	@ (8008f5c <_svfiprintf_r+0x1e8>)
 8008eca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ece:	2206      	movs	r2, #6
 8008ed0:	f7f7 f996 	bl	8000200 <memchr>
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	d036      	beq.n	8008f46 <_svfiprintf_r+0x1d2>
 8008ed8:	4b21      	ldr	r3, [pc, #132]	@ (8008f60 <_svfiprintf_r+0x1ec>)
 8008eda:	bb1b      	cbnz	r3, 8008f24 <_svfiprintf_r+0x1b0>
 8008edc:	9b03      	ldr	r3, [sp, #12]
 8008ede:	3307      	adds	r3, #7
 8008ee0:	f023 0307 	bic.w	r3, r3, #7
 8008ee4:	3308      	adds	r3, #8
 8008ee6:	9303      	str	r3, [sp, #12]
 8008ee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eea:	4433      	add	r3, r6
 8008eec:	9309      	str	r3, [sp, #36]	@ 0x24
 8008eee:	e76a      	b.n	8008dc6 <_svfiprintf_r+0x52>
 8008ef0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ef4:	460c      	mov	r4, r1
 8008ef6:	2001      	movs	r0, #1
 8008ef8:	e7a8      	b.n	8008e4c <_svfiprintf_r+0xd8>
 8008efa:	2300      	movs	r3, #0
 8008efc:	3401      	adds	r4, #1
 8008efe:	9305      	str	r3, [sp, #20]
 8008f00:	4619      	mov	r1, r3
 8008f02:	f04f 0c0a 	mov.w	ip, #10
 8008f06:	4620      	mov	r0, r4
 8008f08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f0c:	3a30      	subs	r2, #48	@ 0x30
 8008f0e:	2a09      	cmp	r2, #9
 8008f10:	d903      	bls.n	8008f1a <_svfiprintf_r+0x1a6>
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d0c6      	beq.n	8008ea4 <_svfiprintf_r+0x130>
 8008f16:	9105      	str	r1, [sp, #20]
 8008f18:	e7c4      	b.n	8008ea4 <_svfiprintf_r+0x130>
 8008f1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f1e:	4604      	mov	r4, r0
 8008f20:	2301      	movs	r3, #1
 8008f22:	e7f0      	b.n	8008f06 <_svfiprintf_r+0x192>
 8008f24:	ab03      	add	r3, sp, #12
 8008f26:	9300      	str	r3, [sp, #0]
 8008f28:	462a      	mov	r2, r5
 8008f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8008f64 <_svfiprintf_r+0x1f0>)
 8008f2c:	a904      	add	r1, sp, #16
 8008f2e:	4638      	mov	r0, r7
 8008f30:	f3af 8000 	nop.w
 8008f34:	1c42      	adds	r2, r0, #1
 8008f36:	4606      	mov	r6, r0
 8008f38:	d1d6      	bne.n	8008ee8 <_svfiprintf_r+0x174>
 8008f3a:	89ab      	ldrh	r3, [r5, #12]
 8008f3c:	065b      	lsls	r3, r3, #25
 8008f3e:	f53f af2d 	bmi.w	8008d9c <_svfiprintf_r+0x28>
 8008f42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f44:	e72c      	b.n	8008da0 <_svfiprintf_r+0x2c>
 8008f46:	ab03      	add	r3, sp, #12
 8008f48:	9300      	str	r3, [sp, #0]
 8008f4a:	462a      	mov	r2, r5
 8008f4c:	4b05      	ldr	r3, [pc, #20]	@ (8008f64 <_svfiprintf_r+0x1f0>)
 8008f4e:	a904      	add	r1, sp, #16
 8008f50:	4638      	mov	r0, r7
 8008f52:	f000 f879 	bl	8009048 <_printf_i>
 8008f56:	e7ed      	b.n	8008f34 <_svfiprintf_r+0x1c0>
 8008f58:	08009b00 	.word	0x08009b00
 8008f5c:	08009b0a 	.word	0x08009b0a
 8008f60:	00000000 	.word	0x00000000
 8008f64:	08008cbd 	.word	0x08008cbd
 8008f68:	08009b06 	.word	0x08009b06

08008f6c <_printf_common>:
 8008f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f70:	4616      	mov	r6, r2
 8008f72:	4698      	mov	r8, r3
 8008f74:	688a      	ldr	r2, [r1, #8]
 8008f76:	690b      	ldr	r3, [r1, #16]
 8008f78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	bfb8      	it	lt
 8008f80:	4613      	movlt	r3, r2
 8008f82:	6033      	str	r3, [r6, #0]
 8008f84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008f88:	4607      	mov	r7, r0
 8008f8a:	460c      	mov	r4, r1
 8008f8c:	b10a      	cbz	r2, 8008f92 <_printf_common+0x26>
 8008f8e:	3301      	adds	r3, #1
 8008f90:	6033      	str	r3, [r6, #0]
 8008f92:	6823      	ldr	r3, [r4, #0]
 8008f94:	0699      	lsls	r1, r3, #26
 8008f96:	bf42      	ittt	mi
 8008f98:	6833      	ldrmi	r3, [r6, #0]
 8008f9a:	3302      	addmi	r3, #2
 8008f9c:	6033      	strmi	r3, [r6, #0]
 8008f9e:	6825      	ldr	r5, [r4, #0]
 8008fa0:	f015 0506 	ands.w	r5, r5, #6
 8008fa4:	d106      	bne.n	8008fb4 <_printf_common+0x48>
 8008fa6:	f104 0a19 	add.w	sl, r4, #25
 8008faa:	68e3      	ldr	r3, [r4, #12]
 8008fac:	6832      	ldr	r2, [r6, #0]
 8008fae:	1a9b      	subs	r3, r3, r2
 8008fb0:	42ab      	cmp	r3, r5
 8008fb2:	dc26      	bgt.n	8009002 <_printf_common+0x96>
 8008fb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008fb8:	6822      	ldr	r2, [r4, #0]
 8008fba:	3b00      	subs	r3, #0
 8008fbc:	bf18      	it	ne
 8008fbe:	2301      	movne	r3, #1
 8008fc0:	0692      	lsls	r2, r2, #26
 8008fc2:	d42b      	bmi.n	800901c <_printf_common+0xb0>
 8008fc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008fc8:	4641      	mov	r1, r8
 8008fca:	4638      	mov	r0, r7
 8008fcc:	47c8      	blx	r9
 8008fce:	3001      	adds	r0, #1
 8008fd0:	d01e      	beq.n	8009010 <_printf_common+0xa4>
 8008fd2:	6823      	ldr	r3, [r4, #0]
 8008fd4:	6922      	ldr	r2, [r4, #16]
 8008fd6:	f003 0306 	and.w	r3, r3, #6
 8008fda:	2b04      	cmp	r3, #4
 8008fdc:	bf02      	ittt	eq
 8008fde:	68e5      	ldreq	r5, [r4, #12]
 8008fe0:	6833      	ldreq	r3, [r6, #0]
 8008fe2:	1aed      	subeq	r5, r5, r3
 8008fe4:	68a3      	ldr	r3, [r4, #8]
 8008fe6:	bf0c      	ite	eq
 8008fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fec:	2500      	movne	r5, #0
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	bfc4      	itt	gt
 8008ff2:	1a9b      	subgt	r3, r3, r2
 8008ff4:	18ed      	addgt	r5, r5, r3
 8008ff6:	2600      	movs	r6, #0
 8008ff8:	341a      	adds	r4, #26
 8008ffa:	42b5      	cmp	r5, r6
 8008ffc:	d11a      	bne.n	8009034 <_printf_common+0xc8>
 8008ffe:	2000      	movs	r0, #0
 8009000:	e008      	b.n	8009014 <_printf_common+0xa8>
 8009002:	2301      	movs	r3, #1
 8009004:	4652      	mov	r2, sl
 8009006:	4641      	mov	r1, r8
 8009008:	4638      	mov	r0, r7
 800900a:	47c8      	blx	r9
 800900c:	3001      	adds	r0, #1
 800900e:	d103      	bne.n	8009018 <_printf_common+0xac>
 8009010:	f04f 30ff 	mov.w	r0, #4294967295
 8009014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009018:	3501      	adds	r5, #1
 800901a:	e7c6      	b.n	8008faa <_printf_common+0x3e>
 800901c:	18e1      	adds	r1, r4, r3
 800901e:	1c5a      	adds	r2, r3, #1
 8009020:	2030      	movs	r0, #48	@ 0x30
 8009022:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009026:	4422      	add	r2, r4
 8009028:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800902c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009030:	3302      	adds	r3, #2
 8009032:	e7c7      	b.n	8008fc4 <_printf_common+0x58>
 8009034:	2301      	movs	r3, #1
 8009036:	4622      	mov	r2, r4
 8009038:	4641      	mov	r1, r8
 800903a:	4638      	mov	r0, r7
 800903c:	47c8      	blx	r9
 800903e:	3001      	adds	r0, #1
 8009040:	d0e6      	beq.n	8009010 <_printf_common+0xa4>
 8009042:	3601      	adds	r6, #1
 8009044:	e7d9      	b.n	8008ffa <_printf_common+0x8e>
	...

08009048 <_printf_i>:
 8009048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800904c:	7e0f      	ldrb	r7, [r1, #24]
 800904e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009050:	2f78      	cmp	r7, #120	@ 0x78
 8009052:	4691      	mov	r9, r2
 8009054:	4680      	mov	r8, r0
 8009056:	460c      	mov	r4, r1
 8009058:	469a      	mov	sl, r3
 800905a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800905e:	d807      	bhi.n	8009070 <_printf_i+0x28>
 8009060:	2f62      	cmp	r7, #98	@ 0x62
 8009062:	d80a      	bhi.n	800907a <_printf_i+0x32>
 8009064:	2f00      	cmp	r7, #0
 8009066:	f000 80d2 	beq.w	800920e <_printf_i+0x1c6>
 800906a:	2f58      	cmp	r7, #88	@ 0x58
 800906c:	f000 80b9 	beq.w	80091e2 <_printf_i+0x19a>
 8009070:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009074:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009078:	e03a      	b.n	80090f0 <_printf_i+0xa8>
 800907a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800907e:	2b15      	cmp	r3, #21
 8009080:	d8f6      	bhi.n	8009070 <_printf_i+0x28>
 8009082:	a101      	add	r1, pc, #4	@ (adr r1, 8009088 <_printf_i+0x40>)
 8009084:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009088:	080090e1 	.word	0x080090e1
 800908c:	080090f5 	.word	0x080090f5
 8009090:	08009071 	.word	0x08009071
 8009094:	08009071 	.word	0x08009071
 8009098:	08009071 	.word	0x08009071
 800909c:	08009071 	.word	0x08009071
 80090a0:	080090f5 	.word	0x080090f5
 80090a4:	08009071 	.word	0x08009071
 80090a8:	08009071 	.word	0x08009071
 80090ac:	08009071 	.word	0x08009071
 80090b0:	08009071 	.word	0x08009071
 80090b4:	080091f5 	.word	0x080091f5
 80090b8:	0800911f 	.word	0x0800911f
 80090bc:	080091af 	.word	0x080091af
 80090c0:	08009071 	.word	0x08009071
 80090c4:	08009071 	.word	0x08009071
 80090c8:	08009217 	.word	0x08009217
 80090cc:	08009071 	.word	0x08009071
 80090d0:	0800911f 	.word	0x0800911f
 80090d4:	08009071 	.word	0x08009071
 80090d8:	08009071 	.word	0x08009071
 80090dc:	080091b7 	.word	0x080091b7
 80090e0:	6833      	ldr	r3, [r6, #0]
 80090e2:	1d1a      	adds	r2, r3, #4
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	6032      	str	r2, [r6, #0]
 80090e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80090f0:	2301      	movs	r3, #1
 80090f2:	e09d      	b.n	8009230 <_printf_i+0x1e8>
 80090f4:	6833      	ldr	r3, [r6, #0]
 80090f6:	6820      	ldr	r0, [r4, #0]
 80090f8:	1d19      	adds	r1, r3, #4
 80090fa:	6031      	str	r1, [r6, #0]
 80090fc:	0606      	lsls	r6, r0, #24
 80090fe:	d501      	bpl.n	8009104 <_printf_i+0xbc>
 8009100:	681d      	ldr	r5, [r3, #0]
 8009102:	e003      	b.n	800910c <_printf_i+0xc4>
 8009104:	0645      	lsls	r5, r0, #25
 8009106:	d5fb      	bpl.n	8009100 <_printf_i+0xb8>
 8009108:	f9b3 5000 	ldrsh.w	r5, [r3]
 800910c:	2d00      	cmp	r5, #0
 800910e:	da03      	bge.n	8009118 <_printf_i+0xd0>
 8009110:	232d      	movs	r3, #45	@ 0x2d
 8009112:	426d      	negs	r5, r5
 8009114:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009118:	4859      	ldr	r0, [pc, #356]	@ (8009280 <_printf_i+0x238>)
 800911a:	230a      	movs	r3, #10
 800911c:	e011      	b.n	8009142 <_printf_i+0xfa>
 800911e:	6821      	ldr	r1, [r4, #0]
 8009120:	6833      	ldr	r3, [r6, #0]
 8009122:	0608      	lsls	r0, r1, #24
 8009124:	f853 5b04 	ldr.w	r5, [r3], #4
 8009128:	d402      	bmi.n	8009130 <_printf_i+0xe8>
 800912a:	0649      	lsls	r1, r1, #25
 800912c:	bf48      	it	mi
 800912e:	b2ad      	uxthmi	r5, r5
 8009130:	2f6f      	cmp	r7, #111	@ 0x6f
 8009132:	4853      	ldr	r0, [pc, #332]	@ (8009280 <_printf_i+0x238>)
 8009134:	6033      	str	r3, [r6, #0]
 8009136:	bf14      	ite	ne
 8009138:	230a      	movne	r3, #10
 800913a:	2308      	moveq	r3, #8
 800913c:	2100      	movs	r1, #0
 800913e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009142:	6866      	ldr	r6, [r4, #4]
 8009144:	60a6      	str	r6, [r4, #8]
 8009146:	2e00      	cmp	r6, #0
 8009148:	bfa2      	ittt	ge
 800914a:	6821      	ldrge	r1, [r4, #0]
 800914c:	f021 0104 	bicge.w	r1, r1, #4
 8009150:	6021      	strge	r1, [r4, #0]
 8009152:	b90d      	cbnz	r5, 8009158 <_printf_i+0x110>
 8009154:	2e00      	cmp	r6, #0
 8009156:	d04b      	beq.n	80091f0 <_printf_i+0x1a8>
 8009158:	4616      	mov	r6, r2
 800915a:	fbb5 f1f3 	udiv	r1, r5, r3
 800915e:	fb03 5711 	mls	r7, r3, r1, r5
 8009162:	5dc7      	ldrb	r7, [r0, r7]
 8009164:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009168:	462f      	mov	r7, r5
 800916a:	42bb      	cmp	r3, r7
 800916c:	460d      	mov	r5, r1
 800916e:	d9f4      	bls.n	800915a <_printf_i+0x112>
 8009170:	2b08      	cmp	r3, #8
 8009172:	d10b      	bne.n	800918c <_printf_i+0x144>
 8009174:	6823      	ldr	r3, [r4, #0]
 8009176:	07df      	lsls	r7, r3, #31
 8009178:	d508      	bpl.n	800918c <_printf_i+0x144>
 800917a:	6923      	ldr	r3, [r4, #16]
 800917c:	6861      	ldr	r1, [r4, #4]
 800917e:	4299      	cmp	r1, r3
 8009180:	bfde      	ittt	le
 8009182:	2330      	movle	r3, #48	@ 0x30
 8009184:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009188:	f106 36ff 	addle.w	r6, r6, #4294967295
 800918c:	1b92      	subs	r2, r2, r6
 800918e:	6122      	str	r2, [r4, #16]
 8009190:	f8cd a000 	str.w	sl, [sp]
 8009194:	464b      	mov	r3, r9
 8009196:	aa03      	add	r2, sp, #12
 8009198:	4621      	mov	r1, r4
 800919a:	4640      	mov	r0, r8
 800919c:	f7ff fee6 	bl	8008f6c <_printf_common>
 80091a0:	3001      	adds	r0, #1
 80091a2:	d14a      	bne.n	800923a <_printf_i+0x1f2>
 80091a4:	f04f 30ff 	mov.w	r0, #4294967295
 80091a8:	b004      	add	sp, #16
 80091aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ae:	6823      	ldr	r3, [r4, #0]
 80091b0:	f043 0320 	orr.w	r3, r3, #32
 80091b4:	6023      	str	r3, [r4, #0]
 80091b6:	4833      	ldr	r0, [pc, #204]	@ (8009284 <_printf_i+0x23c>)
 80091b8:	2778      	movs	r7, #120	@ 0x78
 80091ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80091be:	6823      	ldr	r3, [r4, #0]
 80091c0:	6831      	ldr	r1, [r6, #0]
 80091c2:	061f      	lsls	r7, r3, #24
 80091c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80091c8:	d402      	bmi.n	80091d0 <_printf_i+0x188>
 80091ca:	065f      	lsls	r7, r3, #25
 80091cc:	bf48      	it	mi
 80091ce:	b2ad      	uxthmi	r5, r5
 80091d0:	6031      	str	r1, [r6, #0]
 80091d2:	07d9      	lsls	r1, r3, #31
 80091d4:	bf44      	itt	mi
 80091d6:	f043 0320 	orrmi.w	r3, r3, #32
 80091da:	6023      	strmi	r3, [r4, #0]
 80091dc:	b11d      	cbz	r5, 80091e6 <_printf_i+0x19e>
 80091de:	2310      	movs	r3, #16
 80091e0:	e7ac      	b.n	800913c <_printf_i+0xf4>
 80091e2:	4827      	ldr	r0, [pc, #156]	@ (8009280 <_printf_i+0x238>)
 80091e4:	e7e9      	b.n	80091ba <_printf_i+0x172>
 80091e6:	6823      	ldr	r3, [r4, #0]
 80091e8:	f023 0320 	bic.w	r3, r3, #32
 80091ec:	6023      	str	r3, [r4, #0]
 80091ee:	e7f6      	b.n	80091de <_printf_i+0x196>
 80091f0:	4616      	mov	r6, r2
 80091f2:	e7bd      	b.n	8009170 <_printf_i+0x128>
 80091f4:	6833      	ldr	r3, [r6, #0]
 80091f6:	6825      	ldr	r5, [r4, #0]
 80091f8:	6961      	ldr	r1, [r4, #20]
 80091fa:	1d18      	adds	r0, r3, #4
 80091fc:	6030      	str	r0, [r6, #0]
 80091fe:	062e      	lsls	r6, r5, #24
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	d501      	bpl.n	8009208 <_printf_i+0x1c0>
 8009204:	6019      	str	r1, [r3, #0]
 8009206:	e002      	b.n	800920e <_printf_i+0x1c6>
 8009208:	0668      	lsls	r0, r5, #25
 800920a:	d5fb      	bpl.n	8009204 <_printf_i+0x1bc>
 800920c:	8019      	strh	r1, [r3, #0]
 800920e:	2300      	movs	r3, #0
 8009210:	6123      	str	r3, [r4, #16]
 8009212:	4616      	mov	r6, r2
 8009214:	e7bc      	b.n	8009190 <_printf_i+0x148>
 8009216:	6833      	ldr	r3, [r6, #0]
 8009218:	1d1a      	adds	r2, r3, #4
 800921a:	6032      	str	r2, [r6, #0]
 800921c:	681e      	ldr	r6, [r3, #0]
 800921e:	6862      	ldr	r2, [r4, #4]
 8009220:	2100      	movs	r1, #0
 8009222:	4630      	mov	r0, r6
 8009224:	f7f6 ffec 	bl	8000200 <memchr>
 8009228:	b108      	cbz	r0, 800922e <_printf_i+0x1e6>
 800922a:	1b80      	subs	r0, r0, r6
 800922c:	6060      	str	r0, [r4, #4]
 800922e:	6863      	ldr	r3, [r4, #4]
 8009230:	6123      	str	r3, [r4, #16]
 8009232:	2300      	movs	r3, #0
 8009234:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009238:	e7aa      	b.n	8009190 <_printf_i+0x148>
 800923a:	6923      	ldr	r3, [r4, #16]
 800923c:	4632      	mov	r2, r6
 800923e:	4649      	mov	r1, r9
 8009240:	4640      	mov	r0, r8
 8009242:	47d0      	blx	sl
 8009244:	3001      	adds	r0, #1
 8009246:	d0ad      	beq.n	80091a4 <_printf_i+0x15c>
 8009248:	6823      	ldr	r3, [r4, #0]
 800924a:	079b      	lsls	r3, r3, #30
 800924c:	d413      	bmi.n	8009276 <_printf_i+0x22e>
 800924e:	68e0      	ldr	r0, [r4, #12]
 8009250:	9b03      	ldr	r3, [sp, #12]
 8009252:	4298      	cmp	r0, r3
 8009254:	bfb8      	it	lt
 8009256:	4618      	movlt	r0, r3
 8009258:	e7a6      	b.n	80091a8 <_printf_i+0x160>
 800925a:	2301      	movs	r3, #1
 800925c:	4632      	mov	r2, r6
 800925e:	4649      	mov	r1, r9
 8009260:	4640      	mov	r0, r8
 8009262:	47d0      	blx	sl
 8009264:	3001      	adds	r0, #1
 8009266:	d09d      	beq.n	80091a4 <_printf_i+0x15c>
 8009268:	3501      	adds	r5, #1
 800926a:	68e3      	ldr	r3, [r4, #12]
 800926c:	9903      	ldr	r1, [sp, #12]
 800926e:	1a5b      	subs	r3, r3, r1
 8009270:	42ab      	cmp	r3, r5
 8009272:	dcf2      	bgt.n	800925a <_printf_i+0x212>
 8009274:	e7eb      	b.n	800924e <_printf_i+0x206>
 8009276:	2500      	movs	r5, #0
 8009278:	f104 0619 	add.w	r6, r4, #25
 800927c:	e7f5      	b.n	800926a <_printf_i+0x222>
 800927e:	bf00      	nop
 8009280:	08009b11 	.word	0x08009b11
 8009284:	08009b22 	.word	0x08009b22

08009288 <memmove>:
 8009288:	4288      	cmp	r0, r1
 800928a:	b510      	push	{r4, lr}
 800928c:	eb01 0402 	add.w	r4, r1, r2
 8009290:	d902      	bls.n	8009298 <memmove+0x10>
 8009292:	4284      	cmp	r4, r0
 8009294:	4623      	mov	r3, r4
 8009296:	d807      	bhi.n	80092a8 <memmove+0x20>
 8009298:	1e43      	subs	r3, r0, #1
 800929a:	42a1      	cmp	r1, r4
 800929c:	d008      	beq.n	80092b0 <memmove+0x28>
 800929e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092a6:	e7f8      	b.n	800929a <memmove+0x12>
 80092a8:	4402      	add	r2, r0
 80092aa:	4601      	mov	r1, r0
 80092ac:	428a      	cmp	r2, r1
 80092ae:	d100      	bne.n	80092b2 <memmove+0x2a>
 80092b0:	bd10      	pop	{r4, pc}
 80092b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092ba:	e7f7      	b.n	80092ac <memmove+0x24>

080092bc <_sbrk_r>:
 80092bc:	b538      	push	{r3, r4, r5, lr}
 80092be:	4d06      	ldr	r5, [pc, #24]	@ (80092d8 <_sbrk_r+0x1c>)
 80092c0:	2300      	movs	r3, #0
 80092c2:	4604      	mov	r4, r0
 80092c4:	4608      	mov	r0, r1
 80092c6:	602b      	str	r3, [r5, #0]
 80092c8:	f7f8 f8b2 	bl	8001430 <_sbrk>
 80092cc:	1c43      	adds	r3, r0, #1
 80092ce:	d102      	bne.n	80092d6 <_sbrk_r+0x1a>
 80092d0:	682b      	ldr	r3, [r5, #0]
 80092d2:	b103      	cbz	r3, 80092d6 <_sbrk_r+0x1a>
 80092d4:	6023      	str	r3, [r4, #0]
 80092d6:	bd38      	pop	{r3, r4, r5, pc}
 80092d8:	200020d0 	.word	0x200020d0

080092dc <memcpy>:
 80092dc:	440a      	add	r2, r1
 80092de:	4291      	cmp	r1, r2
 80092e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80092e4:	d100      	bne.n	80092e8 <memcpy+0xc>
 80092e6:	4770      	bx	lr
 80092e8:	b510      	push	{r4, lr}
 80092ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092f2:	4291      	cmp	r1, r2
 80092f4:	d1f9      	bne.n	80092ea <memcpy+0xe>
 80092f6:	bd10      	pop	{r4, pc}

080092f8 <_realloc_r>:
 80092f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092fc:	4680      	mov	r8, r0
 80092fe:	4615      	mov	r5, r2
 8009300:	460c      	mov	r4, r1
 8009302:	b921      	cbnz	r1, 800930e <_realloc_r+0x16>
 8009304:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009308:	4611      	mov	r1, r2
 800930a:	f7ff bc4b 	b.w	8008ba4 <_malloc_r>
 800930e:	b92a      	cbnz	r2, 800931c <_realloc_r+0x24>
 8009310:	f7ff fbdc 	bl	8008acc <_free_r>
 8009314:	2400      	movs	r4, #0
 8009316:	4620      	mov	r0, r4
 8009318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800931c:	f000 f81a 	bl	8009354 <_malloc_usable_size_r>
 8009320:	4285      	cmp	r5, r0
 8009322:	4606      	mov	r6, r0
 8009324:	d802      	bhi.n	800932c <_realloc_r+0x34>
 8009326:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800932a:	d8f4      	bhi.n	8009316 <_realloc_r+0x1e>
 800932c:	4629      	mov	r1, r5
 800932e:	4640      	mov	r0, r8
 8009330:	f7ff fc38 	bl	8008ba4 <_malloc_r>
 8009334:	4607      	mov	r7, r0
 8009336:	2800      	cmp	r0, #0
 8009338:	d0ec      	beq.n	8009314 <_realloc_r+0x1c>
 800933a:	42b5      	cmp	r5, r6
 800933c:	462a      	mov	r2, r5
 800933e:	4621      	mov	r1, r4
 8009340:	bf28      	it	cs
 8009342:	4632      	movcs	r2, r6
 8009344:	f7ff ffca 	bl	80092dc <memcpy>
 8009348:	4621      	mov	r1, r4
 800934a:	4640      	mov	r0, r8
 800934c:	f7ff fbbe 	bl	8008acc <_free_r>
 8009350:	463c      	mov	r4, r7
 8009352:	e7e0      	b.n	8009316 <_realloc_r+0x1e>

08009354 <_malloc_usable_size_r>:
 8009354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009358:	1f18      	subs	r0, r3, #4
 800935a:	2b00      	cmp	r3, #0
 800935c:	bfbc      	itt	lt
 800935e:	580b      	ldrlt	r3, [r1, r0]
 8009360:	18c0      	addlt	r0, r0, r3
 8009362:	4770      	bx	lr

08009364 <_init>:
 8009364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009366:	bf00      	nop
 8009368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800936a:	bc08      	pop	{r3}
 800936c:	469e      	mov	lr, r3
 800936e:	4770      	bx	lr

08009370 <_fini>:
 8009370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009372:	bf00      	nop
 8009374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009376:	bc08      	pop	{r3}
 8009378:	469e      	mov	lr, r3
 800937a:	4770      	bx	lr
